[{"/Users/albert/projects/med-bakery-react/client/src/index.tsx":"1","/Users/albert/projects/med-bakery-react/client/src/App.tsx":"2","/Users/albert/projects/med-bakery-react/client/src/functions.tsx":"3","/Users/albert/projects/med-bakery-react/client/src/MetaContext.tsx":"4","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/SubscribePage.tsx":"5","/Users/albert/projects/med-bakery-react/client/src/components/ExpiryLoginPage/ExpiryLoginPage.tsx":"6","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx":"7","/Users/albert/projects/med-bakery-react/client/src/components/UserPage/UserPage.tsx":"8","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/DataInterpPage.tsx":"9","/Users/albert/projects/med-bakery-react/client/src/components/HomePage/HomePage.tsx":"10","/Users/albert/projects/med-bakery-react/client/src/components/HomePage/Header.jsx":"11","/Users/albert/projects/med-bakery-react/client/src/myaxios.ts":"12","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/Checkout.tsx":"13","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/PaymentAfterMath.tsx":"14","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx":"15","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/LoadingOverlay.tsx":"16","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/hooks.tsx":"17","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/SubscribeModal.tsx":"18","/Users/albert/projects/med-bakery-react/client/src/components/UserPage/ProgressPie.tsx":"19","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/TaskPage.tsx":"20","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/AnswerPage.tsx":"21","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/exampleQuestions.tsx":"22","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCESelector.tsx":"23","/Users/albert/projects/med-bakery-react/client/src/components/Navigator.tsx":"24","/Users/albert/projects/med-bakery-react/client/src/components/HomePage/LoginLogout.tsx":"25","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/DemoStations/NullStation.tsx":"26","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/QuestionSelector.tsx":"27","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/LoadingScreen.tsx":"28","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Brief.tsx":"29","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Summary.tsx":"30","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/types.tsx":"31","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/MarkReviewPage.tsx":"32","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx":"33","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewPage.tsx":"34","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/CategorySelector.tsx":"35","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationSummaryCard.tsx":"36","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/FilterSelector.tsx":"37","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx":"38","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/SaveModal.tsx":"39","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Common.tsx":"40","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Header.tsx":"41","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/SummaryPrompt.tsx":"42","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx":"43","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewContent.tsx":"44","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/TimerBar.tsx":"45","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPrompt.tsx":"46","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/WaveSurfer.tsx":"47","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/RecordControl.tsx":"48","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/MarkScheme.tsx":"49","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/WaveSurferReview.tsx":"50","/Users/albert/projects/med-bakery-react/client/src/old-components/ECGPage/Functions/utility.tsx":"51","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/TopicsSelectorPage.tsx":"52"},{"size":289,"mtime":1677939355625,"results":"53","hashOfConfig":"54"},{"size":3688,"mtime":1677939354784,"results":"55","hashOfConfig":"54"},{"size":4328,"mtime":1677939355328,"results":"56","hashOfConfig":"54"},{"size":441,"mtime":1677939354785,"results":"57","hashOfConfig":"54"},{"size":805,"mtime":1677939355315,"results":"58","hashOfConfig":"54"},{"size":443,"mtime":1677939355270,"results":"59","hashOfConfig":"54"},{"size":4793,"mtime":1677939355278,"results":"60","hashOfConfig":"54"},{"size":3806,"mtime":1677939355316,"results":"61","hashOfConfig":"54"},{"size":3601,"mtime":1679849820642,"results":"62","hashOfConfig":"54"},{"size":2024,"mtime":1677939355271,"results":"63","hashOfConfig":"54"},{"size":1635,"mtime":1678574586047,"results":"64","hashOfConfig":"54"},{"size":828,"mtime":1677939355626,"results":"65","hashOfConfig":"54"},{"size":3230,"mtime":1677939355313,"results":"66","hashOfConfig":"54"},{"size":1083,"mtime":1677939355314,"results":"67","hashOfConfig":"54"},{"size":3228,"mtime":1677939355282,"results":"68","hashOfConfig":"54"},{"size":425,"mtime":1677939355277,"results":"69","hashOfConfig":"54"},{"size":8816,"mtime":1677939355284,"results":"70","hashOfConfig":"54"},{"size":2444,"mtime":1677939355314,"results":"71","hashOfConfig":"54"},{"size":1603,"mtime":1677939355316,"results":"72","hashOfConfig":"54"},{"size":2508,"mtime":1679849820643,"results":"73","hashOfConfig":"54"},{"size":3402,"mtime":1679849820642,"results":"74","hashOfConfig":"54"},{"size":4290,"mtime":1677939355269,"results":"75","hashOfConfig":"54"},{"size":4212,"mtime":1677939355278,"results":"76","hashOfConfig":"54"},{"size":2953,"mtime":1677939355274,"results":"77","hashOfConfig":"54"},{"size":2635,"mtime":1677939355272,"results":"78","hashOfConfig":"54"},{"size":520,"mtime":1677939355276,"results":"79","hashOfConfig":"54"},{"size":18383,"mtime":1679849820643,"results":"80","hashOfConfig":"54"},{"size":944,"mtime":1677939355278,"results":"81","hashOfConfig":"54"},{"size":1884,"mtime":1677939355275,"results":"82","hashOfConfig":"54"},{"size":1911,"mtime":1677939355283,"results":"83","hashOfConfig":"54"},{"size":1618,"mtime":1677939355312,"results":"84","hashOfConfig":"54"},{"size":5498,"mtime":1677939355278,"results":"85","hashOfConfig":"54"},{"size":2490,"mtime":1677939355279,"results":"86","hashOfConfig":"54"},{"size":2682,"mtime":1677939355280,"results":"87","hashOfConfig":"54"},{"size":2000,"mtime":1677939355276,"results":"88","hashOfConfig":"54"},{"size":4468,"mtime":1677939355282,"results":"89","hashOfConfig":"54"},{"size":1997,"mtime":1677939355277,"results":"90","hashOfConfig":"54"},{"size":1063,"mtime":1677939355275,"results":"91","hashOfConfig":"54"},{"size":1598,"mtime":1677939355281,"results":"92","hashOfConfig":"54"},{"size":916,"mtime":1677939355276,"results":"93","hashOfConfig":"54"},{"size":3343,"mtime":1677939355277,"results":"94","hashOfConfig":"54"},{"size":1268,"mtime":1677939355283,"results":"95","hashOfConfig":"54"},{"size":4284,"mtime":1677939355279,"results":"96","hashOfConfig":"54"},{"size":4280,"mtime":1677939355280,"results":"97","hashOfConfig":"54"},{"size":588,"mtime":1677939355284,"results":"98","hashOfConfig":"54"},{"size":1723,"mtime":1677939355280,"results":"99","hashOfConfig":"54"},{"size":2460,"mtime":1677939355279,"results":"100","hashOfConfig":"54"},{"size":1781,"mtime":1677939355279,"results":"101","hashOfConfig":"54"},{"size":2222,"mtime":1677939355280,"results":"102","hashOfConfig":"54"},{"size":3519,"mtime":1677939355280,"results":"103","hashOfConfig":"54"},{"size":739,"mtime":1677939355633,"results":"104","hashOfConfig":"54"},{"size":9710,"mtime":1679849820643,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"it4kfn",{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/albert/projects/med-bakery-react/client/src/index.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/App.tsx",["242","243","244","245"],"import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useToken, useWindowSize } from \"./functions\";\nimport { useState } from \"react\";\nimport HomePage from \"./components/HomePage/HomePage\";\nimport { createBrowserHistory } from \"history\";\nimport styled from \"styled-components\";\nimport MetaContext from \"./MetaContext\";\nimport OSCEPage from \"./components/OSCEPage/OSCEPage\";\nimport ExpiryLoginPage from \"./components/ExpiryLoginPage/ExpiryLoginPage\";\nimport SubscribePage from \"./components/SubscribePage/SubscribePage\";\nimport UserPage from \"./components/UserPage/UserPage\";\nimport Data from \"./components/Data Interp/Data\";\nimport DataInterpPage from \"./components/DataInterpPage/DataInterpPage\";\n\nconst App = () => {\n    const { token, setToken } = useToken();\n    const [darkMode, setDarkMode] = useState(true); //initialise darkMode\n    const [w, _] = useWindowSize();\n\n    const narrowWindow = w < 650;\n\n    // if we're on local host (development) then change url accordingly\n    let SERVER_URL = \"\";\n    let CLIENT_URL = \"\";\n\n    if (window.location.href.startsWith(\"http://localhost:3000/\")) {\n        SERVER_URL = \"http://localhost:3001\";\n        CLIENT_URL = \"http://localhost:3000\";\n    }\n\n    if (window.location.href.startsWith(\"https://medbakery.co.uk\")) {\n        SERVER_URL = \"https://medbakery.co.uk\";\n        CLIENT_URL = \"https://medbakery.co.uk\";\n    }\n\n    const history = createBrowserHistory();\n\n    let prevPath: any = null;\n\n    // listen and notify Segment of client-side page updates\n    history.listen(location => {\n        if (location.pathname !== prevPath) {\n            prevPath = location.pathname;\n            window.analytics.page();\n        }\n    });\n\n    return (\n        <Container darkMode={darkMode}>\n            <Router>\n                <Switch>\n                    <MetaContext.Provider\n                        value={{ darkMode, SERVER_URL, CLIENT_URL, token, setToken, narrowWindow }}\n                    >\n                        <Route exact path=\"/\">\n                            <HomePage />\n                        </Route>\n\n                        <Route exact path=\"/User\">\n                            <UserPage />\n                        </Route>\n\n                        <Route path=\"/OSCE\">\n                            <OSCEPage />\n                        </Route>\n\n                        <Route path=\"/DataInterpretation\">\n                            <DataInterpPage />\n                        </Route>\n\n                        <Route path=\"/Subscribe\">\n                            <SubscribePage />\n                        </Route>\n\n                        <Route path=\"/ExpiryLogin\">\n                            <ExpiryLoginPage />\n                        </Route>\n                    </MetaContext.Provider>\n                </Switch>\n            </Router>\n        </Container>\n    );\n};\n\nexport default App;\n\nconst Container = styled.div<{ darkMode: boolean }>`\n    color: ${props => (props.darkMode ? \"white\" : \"black\")};\n    fill: ${props => (props.darkMode ? \"#0072CE\" : \"#C02222\")};\n    font-family: Proxima;\n`;\n\nconst Background = styled.div<{ darkMode: boolean; backlogodark: string; backlogolight: string }>`\n    background-color: ${props => (props.darkMode ? \"#272727\" : \"#ffffff\")};\n    background-image: url(${props => (props.darkMode ? props.backlogodark : props.backlogolight)});\n    background-size: 9%;\n    background-attachment: fixed;\n    position: fixed;\n    filter: blur(0px);\n    color: ${props => (props.darkMode ? \"white\" : \"black\")};\n    fill: ${props => (props.darkMode ? \"#0072CE\" : \"#C02222\")};\n    font-family: Proxima;\n    height: 100vh;\n    width: 100%;\n    z-index: -1;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/functions.tsx",["246","247","248","249"],"import { MasterCategory } from \"./types\";\nimport { useState, useLayoutEffect } from \"react\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { Station } from \"./components/OSCEPage/types\";\nimport { GoogleLoginResponse } from \"react-google-login\";\n\nexport const updateCategory = (\n    root: MasterCategory,\n    path: string[],\n    value: boolean\n): MasterCategory => {\n    if (path.length === 0) {\n        return {\n            ...root,\n            selected: value,\n            subcategories: root.subcategories.map(falsifyCategorySelection),\n        };\n    }\n\n    const nextCategoryIdx = root.subcategories.findIndex(sc => sc.categoryTitle === path[0])!;\n\n    return {\n        ...root,\n        selected: false,\n        subcategories: root.subcategories.map((sc, idx) =>\n            idx === nextCategoryIdx ? updateCategory(sc, path.slice(1), value) : sc\n        ),\n    };\n};\n\nexport const falsifyCategorySelection = (category: MasterCategory): MasterCategory => {\n    return {\n        ...category,\n        selected: false,\n        subcategories: category.subcategories.map(falsifyCategorySelection),\n    };\n};\n\nexport const getAllPaths = (root: MasterCategory): string[][] => {\n    if (root.subcategories.length === 0) return [[root.categoryTitle]];\n\n    return root.subcategories.reduce((categoryList, category) => {\n        return categoryList.concat(getAllPaths(category).map(p => [root.categoryTitle].concat(p)));\n    }, [] as string[][]);\n};\n\nexport const getPaths = (root: MasterCategory): string[][] => {\n    if (root.selected) return getAllPaths(root);\n\n    if (root.subcategories.length === 0) return root.selected ? [[root.categoryTitle]] : [];\n\n    return root.subcategories.reduce((categoryList, category) => {\n        return categoryList.concat(getPaths(category).map(p => [root.categoryTitle].concat(p)));\n    }, [] as string[][]);\n};\n\nexport const useToken = () => {\n    const getToken = () => {\n        const token = sessionStorage.getItem(\"token\");\n        return token ? token : \"\";\n    };\n\n    const [token, setToken] = useState(getToken());\n\n    const saveToken: (userToken: string) => void = userToken => {\n        sessionStorage.setItem(\"token\", userToken);\n        setToken(userToken);\n    };\n\n    return { token, setToken: saveToken };\n};\n\n// --------------------------------------------------------------------------------------\n\nexport const handleLogOut = (setToken: (userToken: string) => void) => {\n    setToken(\"\");\n    window.location.href = \"/\";\n};\n\nexport const getEmailFromToken = async (tokenId: string) => {\n    const client = new OAuth2Client(process.env.GOOGlE_CLIENT_ID);\n    const ticket = await client\n        .verifyIdToken({\n            idToken: tokenId,\n            audience: process.env.GOOGlE_CLIENT_ID,\n        })\n        .catch(console.log);\n\n    if (!ticket) return \"\";\n\n    return ticket!.getPayload()!.email;\n};\n\nexport const useWindowSize = () => {\n    const [size, setSize] = useState([window.innerWidth, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener(\"resize\", updateSize);\n        updateSize();\n\n        return () => window.removeEventListener(\"resize\", updateSize);\n    }, []);\n\n    return size;\n};\n\n// remember this, this is how we store tings in mongodb\nconst binaryToBlobUrl = (byteArray: Uint8Array, mimetype: string) => {\n    // console.log(\"barrya\", new Uint8Array(Object.values(byteArray)));\n    const blob = new Blob([new Uint8Array(Object.values(byteArray))], { type: mimetype });\n    return window.URL.createObjectURL(blob);\n};\n\n// const convertBlobsToLinks = (stn: Station<Uint8Array>): Station => {\n//     return {\n//         ...stn,\n//         questions: stn.questions.map(q => ({\n//             ...q,\n//             questionAudio: binaryToBlobUrl(q.questionAudio, \"audio/mpeg\"),\n//             exemplarAudio: binaryToBlobUrl(q.exemplarAudio, \"image/jpeg\"),\n//             img: binaryToBlobUrl(q.img, \"audio/mpeg\"),\n//             responseAudio: \"\",\n//         })),\n//     };\n// };\n\nexport const produceHeat = (n: number) => {\n    console.time(\"producing heat\");\n    let result = 0;\n    for (var i = Math.pow(n, 7); i >= 0; i--) {\n        result += Math.atan(i) * Math.tan(i);\n    }\n    console.timeEnd(\"producing heat\");\n};\n","/Users/albert/projects/med-bakery-react/client/src/MetaContext.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/SubscribePage.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/ExpiryLoginPage/ExpiryLoginPage.tsx",["250"],"import { Login, Logout } from \"../HomePage/LoginLogout\";\n\nconst ExpiryLoginPage = () => {\n    const successCallback = () => {\n        window.location.href = \"/\";\n    };\n\n    return (\n        <div style={{ textAlign: \"center\", marginTop: \"200px\" }}>\n            <h3>Please sign in again to refresh your session</h3>\n            <Login label=\"Login\" successCallback={successCallback} />\n        </div>\n    );\n};\n\nexport default ExpiryLoginPage;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx",["251","252","253","254","255"],"import { useContext, useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\nimport OSCESelector from \"./OSCESelector\";\nimport StationPage from \"./StationPage\";\nimport MetaContext from \"../../MetaContext\";\nimport { NullStation } from \"./DemoStations/NullStation\";\nimport axios from \"../../myaxios\";\nimport { AnsweredStationDetails, Question, StationSummary } from \"./types\";\nimport {\n    binaryToCode,\n    downloadAssets,\n    extractReponseAudio,\n    populateMarkScheme,\n    populateResponseAudios,\n    useStations,\n    useUserDetails,\n} from \"./hooks\";\nimport LoadingOverlay from \"./LoadingOverlay\";\nimport Navigator from \"../Navigator\";\nimport SubscribeModal from \"../SubscribePage/SubscribeModal\";\n\nconst OSCEPage = () => {\n    const { token, SERVER_URL } = useContext(MetaContext);\n    const [station, updateStation] = useState(NullStation);\n    const [reviewMode, updateReviewMode] = useState(false);\n    const [loading, updateLoading] = useState(false);\n    const [userDetailsOsce, userLoading] = useUserDetails(SERVER_URL, token);\n    const [stationSummarires, stationeSummariesLoading] = useStations(SERVER_URL, token);\n    const [subscribeModalOpen, updateSubscribeOpen] = useState(false);\n\n    const selectStation = async (id: string, options: { review: boolean; marks: (0 | 1)[] }) => {\n        updateLoading(true);\n        updateReviewMode(options.review);\n\n        try {\n            const axres = await axios.post(SERVER_URL + \"/osce/get_station\", { token, id });\n\n            if (!axres.data.success) {\n                throw \"selecteStation (OSCEPage): Station retrieval failed!\";\n            }\n\n            if (options.review) {\n                const matches = userDetailsOsce.answeredStations.filter(\n                    s => s.id === axres.data.station.id\n                );\n                const rawResponseAudios =\n                    matches.length === 0\n                        ? Array(axres.data.station.questions.length).fill(\"\")\n                        : matches[0].responseAudios;\n\n                const stationWithMarks = populateMarkScheme(axres.data.station, options.marks);\n                const stationWithResponses = populateResponseAudios(\n                    stationWithMarks,\n                    rawResponseAudios\n                );\n                const localContentStation = await downloadAssets(stationWithResponses, SERVER_URL);\n                updateStation(localContentStation);\n            } else {\n                const localContentStation = await downloadAssets(axres.data.station, SERVER_URL);\n                updateStation(localContentStation);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        updateLoading(false);\n    };\n\n    const handleExit = async (questions: Question[], tok: string) => {\n        updateLoading(true);\n\n        const points = questions\n            .map(q => q.markScheme.map(ms => ms.points.map(p => (p.selected ? 1 : 0))))\n            .flat(2);\n        const markCode = binaryToCode([1 as 1 | 0].concat(points));\n\n        if (!reviewMode) {\n            const responseAudios = await extractReponseAudio(questions);\n            await axios.post(SERVER_URL + \"/osce/update_stations\", {\n                token: tok,\n                markCode,\n                id: station.id,\n                responseAudios,\n            });\n        }\n\n        updateStation(NullStation);\n        window.location.href = \"/OSCE\";\n\n        updateLoading(false);\n    };\n\n    return (\n        <>\n            {subscribeModalOpen && <SubscribeModal close={() => updateSubscribeOpen(false)} />}\n            <Switch>\n                {loading && <LoadingOverlay />}\n\n                <Route exact path=\"/OSCE\">\n                    <Navigator selection={\"OSCE\"} />\n                    <OSCESelector\n                        openSubscribeModal={() => updateSubscribeOpen(true)}\n                        stationSummarires={stationSummarires}\n                        answeredStations={userDetailsOsce.answeredStations}\n                        selectStation={selectStation}\n                        station={station}\n                        purchasedOsce={userDetailsOsce.purchasedOsce}\n                        stationSummariesLoading={stationeSummariesLoading || userLoading}\n                    />\n                </Route>\n\n                <Route path=\"/OSCE/Station\">\n                    <StationPage\n                        handleExit={handleExit}\n                        station={station}\n                        updateStation={updateStation}\n                        answeredStations={userDetailsOsce.answeredStations}\n                        reviewMode={reviewMode}\n                    />\n                </Route>\n            </Switch>\n        </>\n    );\n};\n\nexport default OSCEPage;\n","/Users/albert/projects/med-bakery-react/client/src/components/UserPage/UserPage.tsx",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278"],"import axios from \"../../myaxios\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Navigator from \"../Navigator\";\nimport { NullStation, NullStationDetails } from \"../OSCEPage/DemoStations/NullStation\";\nimport ProgressPie from \"./ProgressPie\";\nimport { useContext, useEffect, useState } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport {\n    downloadAssets,\n    getBinaryDigits,\n    markPercentage,\n    populateMarkScheme,\n    populateResponseAudios,\n    useUserDetails,\n} from \"../OSCEPage/hooks\";\nimport { AnsweredStationDetails, Station, StationSummary } from \"../OSCEPage/types\";\nimport Analysis from \"./Analysis\";\nimport OSCEPage from \"../OSCEPage/OSCEPage\";\nimport OSCESelector from \"../OSCEPage/OSCESelector\";\nimport StationSummaryCard from \"../OSCEPage/StationSummaryCard\";\nimport Summary from \"../OSCEPage/Summary\";\nimport Header from '/Users/a/Documents/med-bakery-react/client/src/components/HomePage/Header.jsx'\nimport Header2 from '/Users/a/Documents/med-bakery-react/client/src/components/HomePage//Header2.jsx'\nimport Navbar from '/Users/a/Documents/med-bakery-react/client/src/components/HomePage//Navbar.jsx'\nimport WhatisGPT3 from '/Users/a/Documents/med-bakery-react/client/src/components/HomePage/whatisGPT3.jsx'\n\n\n\ntype UserPageProps = {};\n\nconst UserPage = (props: UserPageProps) => {\n    const { SERVER_URL, token } = useContext(MetaContext);\n    const [{ answeredStations, purchasedOsce }, userLoading] = useUserDetails(SERVER_URL, token);\n\n    const averagePercentage =\n        answeredStations.length === 0\n            ? 0\n            : answeredStations.map(as => markPercentage(as.markCode)).reduce((acc, a) => acc + a) /\n              answeredStations.length;\n\n    return (\n        <>\n            <Navigator selection={\"Dashboard\"} />\n\n            <Container>\n                <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n                    <div style={{ textAlign: \"center\" }}>\n                        <div style={{ fontSize: \"50px\" }}>Welcome Back</div>\n                        <br />\n                        <Panel>\n                            <Title>Average OSCE Score</Title>\n                            <ProgressPie percentage={averagePercentage} radius={75} />\n                            <Link to=\"/OSCE\">\n                            <Button>Practice</Button>\n                            </Link>\n                        </Panel>\n                        <Panel>\n                            <Title>Review Last Station</Title>\n                            <Link to=\"/OSCE\">\n                                <Button>Review</Button>\n                            </Link>\n                        </Panel>{\" \"}\n                    </div>\n                    {/*\n                    <div style={{ width: \"40%\", textAlign: \"center\" }}>\n                        <Panel>\n                            <Title>Breakdown</Title>\n                            <Analysis answeredOsceDetails={answeredStations} />\n                            <Button>Analysis</Button>\n                        </Panel>\n                    </div> */}\n                </div>\n            </Container>\n        </>\n    );\n};\n\nexport default UserPage;\n\nconst Container = styled.div`\n    background-color: #2f3237;\n    margin: 5%;\n    padding: 5%;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    border-radius: 10px;\n`;\n\nconst Panel = styled.div`\n    background-color: #1c2124;\n    margin-bottom: 10px;\n    padding: 10px;\n    text-align: center;\n    border-radius: 10px;\n`;\n\nconst Title = styled.div`\n    margin: 15px 0;\n    font-size: 25px;\n`;\n\nconst Button = styled.button`\n    background-color: #FAAD29;\n    margin-bottom: 10px;\n    padding: 5px;\n    border-style: none;\n    border-radius: 10px;\n    width: 150px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/DataInterpPage.tsx",["279","280","281","282","283"],"/Users/albert/projects/med-bakery-react/client/src/components/HomePage/HomePage.tsx",["284","285","286","287","288","289","290","291","292"],"import styled from \"styled-components\";\nimport Navigator from \"../Navigator\";\nimport { useContext } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport { markPercentage, useUserDetails } from \"../OSCEPage/hooks\";\nimport Header from \"./Header.jsx\";\nimport Header2 from \"./Header2.jsx\";\nimport WhatisGPT3 from \"./whatisGPT3.jsx\";\n\ntype UserPageProps = {};\n\nconst UserPage = (props: UserPageProps) => {\n    const { SERVER_URL, token } = useContext(MetaContext);\n    const [{ answeredStations, purchasedOsce }, userLoading] = useUserDetails(SERVER_URL, token);\n\n    const averagePercentage =\n        answeredStations.length === 0\n            ? 0\n            : answeredStations.map(as => markPercentage(as.markCode)).reduce((acc, a) => acc + a) /\n              answeredStations.length;\n\n    return (\n        <>\n            <Navigator selection={\"Home\"} />\n                <Header/>\n                {/* <WhatisGPT3/> */}\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n            \n        </>\n        \n    );\n};\n\nexport default UserPage;\n\nconst Container = styled.div`\n    \n    margin: 5%;\n    padding: 5%;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    border-radius: 10px;\n`;\n\nconst Panel = styled.div`\n    background-color: #1c2124;\n    margin-bottom: 10px;\n    padding: 10px;\n    text-align: center;\n    border-radius: 10px;\n`;\n\nconst Title = styled.div`\n    margin: 15px 0;\n    font-size: 25px;\n`;\n\nconst Button = styled.button`\n    background-color: #faad29;\n    margin-bottom: 10px;\n    padding: 5px;\n    border-style: none;\n    border-radius: 10px;\n    width: 150px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/HomePage/Header.jsx",["293","294","295","296"],"import React from \"react\";\nimport people from \"../../assets/people.png\";\nimport ai from \"../../assets/ai.png\";\nimport \"./header.css\";\nimport Brain from \"../../images/brainComputer.png\";\nimport Navigator from \"../Navigator\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => (\n    <div className=\"gpt3__header section__padding\" id=\"home\">\n        <div className=\"gpt3__header-content\">\n            <h1 className=\"gradient__text\">Master Medical Exams and Data Interpretation</h1>\n            <p>\n                {\" \"}\n                Get Ahead with Our Innovative OSCE Trainer and Guided Data Interpretation content,\n                including our unique ECG and Chest X-Ray interpretation skill trainers\n            </p>\n\n            <div className=\"gpt3__header-content__input\">\n                <Link to=\"/OSCE\">\n                    <LoginButton>\n                        <span>Get Started For Free</span>\n                    </LoginButton>\n                </Link>\n            </div>\n\n            <div className=\"gpt3__header-content__people\">\n                <img src={people} />\n                <p>Join the thousands of medical students who have already signed up</p>\n            </div>\n        </div>\n\n        <div className=\"gpt3__header-image\">\n            <img style={{ scale: \"125%\" }} src={Brain} />\n        </div>\n    </div>\n);\n\nexport default Header;\n\nconst LoginButton = styled.button`\n    padding: 10px 20px;\n    background-color: #fad000;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    span {\n        color: black;\n        font-weight: bold;\n    }\n`;\n","/Users/albert/projects/med-bakery-react/client/src/myaxios.ts",["297"],"import axios from \"axios\";\n\n// Add a response interceptor\naxios.interceptors.response.use(\n    res => {\n        if (res.data.error === \"-- email extraction failed --\") {\n            window.location.href = \"/ExpiryLogin\";\n            throw \"token expired, redirect to signout page\";\n        }\n        return res;\n    },\n    error => {\n        // Do something with response error\n        return Promise.reject(error);\n    }\n);\n\nconst myaxios = {\n    post: (url: string, data: any) => {\n        return axios({\n            method: \"POST\",\n            url,\n            data,\n            maxBodyLength: Infinity,\n            maxContentLength: Infinity,\n        });\n    },\n    get: (url: string) => {\n        return axios({ method: \"GET\", url, maxBodyLength: Infinity, maxContentLength: Infinity });\n    },\n};\n\nexport default myaxios;\n","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/Checkout.tsx",["298","299","300"],"import axios from \"axios\";\nimport { useContext, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport { Login } from \"../HomePage/LoginLogout\";\nimport { Box } from \"../OSCEPage/Common\";\nimport LoadingScreen from \"../OSCEPage/LoadingScreen\";\nimport heart from \"../OSCEPage/media/heart.png\";\n\ntype ChekoutProps = {};\n\nconst Chekout = (props: ChekoutProps) => {\n    const { SERVER_URL, CLIENT_URL, token } = useContext(MetaContext);\n    const history = useHistory();\n    const [handlingCheckout, updateHandlingCheckout] = useState(false);\n\n    const handleCheckout = async (t: string) => {\n        updateHandlingCheckout(true);\n        try {\n            const { purchasedOsce } = (\n                await axios.post(SERVER_URL + \"/user/osce_details\", { token: t })\n            ).data;\n\n            if (purchasedOsce) return history.push(\"/OSCE\");\n\n            const checkoutUrl = (\n                await axios.post(SERVER_URL + \"/pay/create-checkout-session\", {\n                    cancel_url: CLIENT_URL + \"/Subscribe/PaymentCanceled\",\n                    success_url: CLIENT_URL + \"/Subscribe/PaymentSuccess\",\n                    token: t,\n                })\n            ).data;\n\n            window.location.href = checkoutUrl;\n        } catch (err) {\n            console.log(err);\n        }\n        updateHandlingCheckout(false);\n    };\n\n    return handlingCheckout ? (\n        <LoadingScreen message=\"Please wait\" />\n    ) : (\n        <div style={{ background: \"#2f3237\", margin: \"5%\", padding: \"5%\", textAlign: \"center\" }}>\n            <div\n                style={{\n                    display: \"flex\",\n                    margin: \"20px auto\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                }}\n            >\n                <div style={{ margin: \"10px\" }}>\n                    <img src={heart} height={100} />\n                </div>\n                <div>\n                    <div style={{ fontSize: \"25px\" }}> Unlock Premium Stations </div>\n                    <div style={{ fontSize: \"15px\" }}> Only £45 per year </div>\n                </div>\n            </div>\n\n            {token ? (\n                <CheckoutButton\n                    color=\"#FAD000\"\n                    minWidth={300}\n                    onClick={() => handleCheckout(token)}\n                >\n                    Unlock the greatness\n                </CheckoutButton>\n            ) : (\n                <span onClick={() => updateHandlingCheckout(true)}>\n                    <Login label=\"Unlock the greatness\" successCallback={t => handleCheckout(t)} />\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default Chekout;\n\nconst CheckoutButton = styled.button<{ color: string; minWidth: number }>`\n    display: block;\n    margin: auto;\n    border-style: none;\n    border: 2px solid ${props => props.color};\n    background-color: transparent;\n    color: ${props => props.color};\n    border-radius: 5px;\n    padding: 5px;\n    min-width: ${props => props.minWidth}px;\n    &:hover {\n        background-color: ${props => props.color};\n        color: black;\n    }\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/PaymentAfterMath.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx",["301","302","303"],"import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./Question/QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReview/QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { AnsweredStationDetails, Question, Station } from \"./types\";\n\ntype StationPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    answeredStations: AnsweredStationDetails[];\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst StationPage = (props: StationPageProps) => {\n    const [questionIdx, updateQuestionIdx] = useState(0);\n\n    if (props.station.id === \"NullStation\") return <Redirect to=\"/OSCE\" />;\n\n    return (\n        <div\n            style={{\n                height: \"100vh\",\n                overflow: \"hidden\",\n            }}\n        >\n            <Switch>\n                <Route exact path=\"/OSCE/Station/Brief\">\n                    <Brief\n                        updateStation={props.updateStation}\n                        station={props.station}\n                        handleExit={props.handleExit}\n                        questionIdx={questionIdx}\n                    />\n                </Route>\n\n                <Route exact path={\"/OSCE/Station/Question\"}>\n                    <QuestionPage\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        questionIdx={questionIdx}\n                        updateQuestionIdx={updateQuestionIdx}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n\n                <Route exact path=\"/OSCE/Station/Summary\">\n                    <Summary\n                        updateStation={props.updateStation}\n                        updateIdx={updateQuestionIdx}\n                        station={props.station}\n                        questionIdx={questionIdx}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n\n                <Route exact path={\"/OSCE/Station/Review\"}>\n                    <QuestionReviewPage\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        questionIdx={questionIdx}\n                        updateIdx={updateQuestionIdx}\n                        reviewMode={props.reviewMode}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n\n                <Route exact path=\"/OSCE/Station/MarkReview\">\n                    <MarkReviewPage\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        reviewMode={props.reviewMode}\n                        handleExit={props.handleExit}\n                        updateIdx={updateQuestionIdx}\n                        questionIdx={questionIdx}\n                    />\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nexport default StationPage;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/LoadingOverlay.tsx",["304"],"import loadinggif from \"./media/loading.gif\";\n\nconst LoadingOverlay = () => (\n    <div\n        style={{\n            margin: \"auto\",\n            textAlign: \"center\",\n            padding: \"100px 0\",\n            backgroundColor: \"#131418\",\n            height: \"100vh\",\n        }}\n    >\n        <h1>Pre-heating the oven</h1>\n        <img src={loadinggif} style={{ width: \"50%\" }} />\n    </div>\n);\n\nexport default LoadingOverlay;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/hooks.tsx",["305","306","307","308","309"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { produceHeat } from \"../../functions\";\nimport {\n    MarkSchemeSection,\n    mimeTypes,\n    Question,\n    startAudioRecordingId,\n    Station,\n    StationSummary,\n    UserDetailsOsce,\n} from \"./types\";\n\nexport const useLoopTime = (upperLimit: number): number => {\n    const [time, setTime] = useState(upperLimit);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setTime(time => {\n                if (time === 0) {\n                    clearInterval(interval);\n                    return 0;\n                } else return time - 1;\n            });\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return time;\n};\n\nexport const playStartTone = () =>\n    (document.getElementById(startAudioRecordingId) as HTMLAudioElement)?.play();\n\nconst handleAudioSession = (\n    stream: MediaStream,\n    updateFunc: (audio: string) => void,\n    startFunc: () => void\n) => {\n    // cannot make media recorder if stream invalid\n    if (!stream) return;\n\n    const recorder = new MediaRecorder(stream);\n\n    recorder.ondataavailable = function (this, e) {\n        const blob = new Blob([e.data], { type: \"audio/ogg; codecs=opus\" });\n        updateFunc(window.URL.createObjectURL(blob));\n    };\n\n    recorder.onstart = startFunc;\n\n    recorder.onstop = () => {\n        stream.getTracks().forEach(track => track.stop());\n        playStartTone();\n    };\n\n    recorder.start();\n\n    return recorder;\n};\n\nexport const useRecorder = (\n    updateFunc: (audio: string) => void,\n    startFunc: () => void\n): [() => void, () => void] => {\n    const [recorder, updateRecorder] = useState<MediaRecorder>();\n\n    // attempt to retrieve a user input stream\n    const startRecorder = async () => {\n        try {\n            const sesh = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const recorder = handleAudioSession(sesh, updateFunc, startFunc);\n            updateRecorder(recorder);\n            produceHeat(11);\n        } catch (e) {\n            console.error(\"startRecorder (hooks.tsx): Failed to commence audio session\");\n        }\n    };\n\n    return [startRecorder, () => recorder?.stop()];\n};\n\nexport const generateWaveSurfer = (containerId: string, audioUrl: string) => {\n    const ws = WaveSurfer.create(waveSurferParams(containerId));\n    if (audioUrl) ws.load(audioUrl);\n    return ws;\n};\n\nexport const waveSurferParams = (containerId: string) => ({\n    container: \"#\" + containerId,\n    waveColor: \"white\",\n    progressColor: \"#FAD000\",\n    height: 20,\n    cursorWidth: 0,\n    hideScrollbar: true,\n});\n\nexport const toggleMarkPoint = (\n    station: Station,\n    questionIdx: number,\n    pointId: number\n): Station => ({\n    ...station,\n    questions: station.questions.map((q, i) =>\n        i === questionIdx\n            ? {\n                  ...q,\n                  markScheme: q.markScheme.map(ms => ({\n                      ...ms,\n                      points: ms.points.map(pt => ({\n                          ...pt,\n                          selected: pt.pointId === pointId ? !pt.selected : pt.selected,\n                      })),\n                  })),\n              }\n            : q\n    ),\n});\n\nexport const countPoints = (markScheme: MarkSchemeSection[]): [number, number] => {\n    return markScheme.reduce(\n        (acc, a) => {\n            return [\n                acc[0] + a.points.reduce((total, pt) => total + (pt.selected ? 1 : 0), 0),\n                acc[1] + a.points.length,\n            ];\n        },\n        [0, 0]\n    );\n};\n\nexport const binaryToCode = (points: (0 | 1)[]): number => {\n    const arr = points.reverse();\n    return arr.reduce((acc, n, i) => (acc += n * Math.pow(2, i)), 0 as number);\n};\n\nexport const getBinaryDigits = (n: number): (0 | 1)[] => {\n    let curr = n;\n    let arr: (0 | 1)[] = [];\n    while (curr > 0) {\n        arr.push(curr % 2 === 0 ? 0 : 1);\n        curr = Math.floor(curr / 2);\n    }\n    return arr.reverse();\n};\n\nexport const markPercentage = (markCode: number): number => {\n    const marks = getBinaryDigits(markCode).slice(1);\n    return marks.length > 0\n        ? Math.round((100 * marks.reduce((a, b) => a + b, 0 as number)) / marks.length)\n        : 0;\n};\n\nexport const populateMarkScheme = (station: Station, marks: (0 | 1)[]): Station => {\n    let idx = 0;\n    station.questions.forEach(q =>\n        q.markScheme.forEach(ms =>\n            ms.points.forEach(p => {\n                p.selected = marks[idx] === 1;\n                idx += 1;\n            })\n        )\n    );\n    return station;\n};\n\nexport const rawToUrl = (raw: string, type: string): string => {\n    const byteArray = new Uint8Array(raw.length);\n    for (let i = 0; i < raw.length; i++) {\n        byteArray[i] = raw.charCodeAt(i);\n    }\n    return window.URL.createObjectURL(new Blob([byteArray], { type }));\n};\n\nexport const populateResponseAudios = (station: Station, responseAudios: string[]): Station => {\n    station.questions.forEach((q, i) => {\n        q.responseAudio = rawToUrl(responseAudios[i], \"audio/mp3\");\n    });\n    return station;\n};\n\nexport const downloadAssets = async (station: Station, SERVER_URL: string): Promise<Station> => {\n    for (const question of station.questions) {\n        // get local copies of exemplar, question and img\n        question.exemplarAudio = await convertToLocal(question.exemplarAudio, SERVER_URL);\n        question.questionAudio = await convertToLocal(question.questionAudio, SERVER_URL);\n        question.img = await convertToLocal(question.img, SERVER_URL);\n    }\n    return new Promise((r, _) => r(station));\n};\n\nconst convertToLocal = async (remoteUrl: string, SERVER_URL: string): Promise<string> => {\n    const fres = await fetch(SERVER_URL + \"/media/osce/\" + remoteUrl);\n    return new Promise(async (r, _) => r(window.URL.createObjectURL(await fres.blob())));\n};\n\nexport const extractReponseAudio = async (questions: Question[]): Promise<string[]> => {\n    const arrays = questions.map(async question => {\n        if (question.responseAudio === \"\") return \"\";\n        const res = await fetch(question.responseAudio);\n        const buffer = await res.arrayBuffer(); // <== no audio upload on iphone bug\n        return Buffer.from(buffer).toString(\"binary\");\n    });\n    return Promise.all(arrays);\n};\n\nexport const convertToString = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const minuteString = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n    const seconds = time % 60;\n    const secondsString = seconds < 10 ? \"0\" + seconds : \"\" + seconds;\n    return minuteString + \":\" + secondsString;\n};\n\nexport const useUserDetails = (SERVER_URL: string, token: string): [UserDetailsOsce, boolean] => {\n    const [userLoading, updateUserLoading] = useState(false);\n    const [userDetailsOsce, updateUserDetailsOsce] = useState<UserDetailsOsce>({\n        answeredStations: [],\n        purchasedOsce: false,\n    });\n\n    const loadUserDetails = async () => {\n        updateUserLoading(true);\n\n        try {\n            const res = await axios.post(SERVER_URL + \"/user/osce_details\", { token });\n\n            if (!res.data.success) {\n                throw \"loadUserDetails (OSCEPage.tsx): user details retrieval failed\";\n            }\n\n            const { answeredStations, purchasedOsce } = res.data;\n            updateUserDetailsOsce({ answeredStations, purchasedOsce });\n        } catch (error) {\n            console.error(error);\n        }\n\n        updateUserLoading(false);\n    };\n\n    useEffect(() => {\n        if (token) {\n            loadUserDetails();\n        } else {\n            updateUserDetailsOsce({\n                answeredStations: [],\n                purchasedOsce: false,\n            });\n        }\n    }, [token]);\n\n    return [userDetailsOsce, userLoading];\n};\n\nexport const useStations = (\n    SERVER_URL: string,\n    token: string\n): [stations: StationSummary[], loading: boolean] => {\n    const [stationeSummariesLoading, updateSummariesLoading] = useState(false);\n    const [stationSummarires, updateStationSummaries] = useState<StationSummary[]>([]);\n\n    const loadSummaries = async () => {\n        updateSummariesLoading(true);\n\n        try {\n            const res = await axios.post(SERVER_URL + \"/osce/get_stations\", { token });\n\n            if (!res.data.success) {\n                throw \"loadSummaries (OSCEPage.tsx): station summary retrieval failed\";\n            }\n\n            updateStationSummaries(res.data.summaries);\n        } catch (error) {\n            console.error(error);\n        }\n        updateSummariesLoading(false);\n    };\n\n    // cant have asynchronous effect callback\n    useEffect(() => {\n        loadSummaries();\n    }, []);\n\n    return [stationSummarires, stationeSummariesLoading];\n};\n","/Users/albert/projects/med-bakery-react/client/src/components/SubscribePage/SubscribeModal.tsx",["310","311"],"import { props } from \"ramda\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport heart from \"../OSCEPage/media/heart.png\";\n\ntype SubcribeModalProps = {\n    close: () => void;\n};\n\nconst SubscribeModal = (props: SubcribeModalProps) => {\n    return (\n        <OverLay onClick={props.close}>\n            <Modal>\n                <div\n                    style={{\n                        display: \"flex\",\n                        margin: \"20px auto\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <div style={{ margin: \"10px\" }}>\n                        <img src={heart} height={100} />\n                    </div>\n                    <div>\n                        <div style={{ fontSize: \"25px\" }}> Unlock Premium Stations </div>\n                        <div style={{ fontSize: \"15px\" }}> Only £45 per year  </div>\n                    </div>\n                </div>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                    <Button style = {{backgroundColor: \"#1c2124\", color: \"#DCDCDC\",}} onClick={props.close}>Maybe Later</Button>\n                    <Link to=\"/Subscribe/Checkout\">\n                        <Button style = {{backgroundColor: \"#da9926\", color: \"#000000\",}}>Buy Now</Button>\n                    </Link>\n                </div>\n                <div\n                    style={{\n                        position: \"absolute\",\n                        top: 0,\n                        right: 0,\n                        margin: \"10px\",\n                        cursor: \"pointer\",\n                    }}\n                    onClick={props.close}\n                >\n                    <FaTimes size={20} />\n                </div>\n            </Modal>\n        </OverLay>\n    );\n};\n\nexport default SubscribeModal;\n\nconst OverLay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    height: 100vh;\n    width: 100vw;\n`;\n\nconst Modal = styled.div`\n    border-radius: 10px;\n    position: absolute;\n    top: 200px;\n    left: 12.5vw;\n    background-color: #1c2124;\n    height: 250px;\n    width: 75vw;\n`;\n\nconst Button = styled.button`\n    background-color: #fad000;\n    border-radius: 5px;\n    border-style: none;\n    height: 35px;\n    width: 100px;\n    margin: 10px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/UserPage/ProgressPie.tsx",["312","313","314","315"],"import Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport { useContext } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport styled from \"styled-components\";\n\ntype ProgressPieProps = {\n    radius: number;\n    percentage: number;\n};\n\nconst arcCoords = (r: number, a: number): { x: number; y: number } => ({\n    x: r + r * Math.sin(a),\n    y: r - r * Math.cos(a),\n});\n\nconst ProgressPie = (props: ProgressPieProps) => {\n    const r = props.radius;\n    const angle = ((44 / 7) * props.percentage) / 100;\n    const coords = arcCoords(r, angle);\n\n    const extraPath = props.percentage > 50 ? `A${r},${r} 1 0, 1, ${coords.x},${coords.y}` : \"\";\n\n    const { x, y } = props.percentage > 50 ? { x: r, y: 2 * r } : coords;\n    const path = `M${r},${r} L${r},0 A${r},${r} 1 0, 1, ${x},${y} ${extraPath} z`;\n\n    return (\n        <div style={{ margin: \"10px 0\" }}>\n            <svg style={{ height: `${2 * r}px`, width: `${2 * r}px` }}>\n                <Circle cx={r} cy={r} r={r} style={{ fill: \"#990000\" }}></Circle>\n                <path d={path} style={{ fill: \"green\" }}></path>\n                <Circle cx={r} cy={r} r={r * 0.95}></Circle>\n                <text\n                    x={r}\n                    y={r}\n                    fill=\"#FAD000\"\n                    dominantBaseline=\"middle\"\n                    textAnchor=\"middle\"\n                    fontSize={40}\n                >\n                    {Math.round(props.percentage)}%\n                </text>\n            </svg>\n        </div>\n    );\n};\n\nexport default ProgressPie;\n\nconst Circle = styled.circle`\n    fill: #1c2124;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/TaskPage.tsx",["316","317","318","319","320","321"],"/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/AnswerPage.tsx",["322","323","324","325","326","327"],"/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/exampleQuestions.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCESelector.tsx",["328","329","330","331","332","333","334"],"import { AnsweredStationDetails, StationSummary, Station } from \"./types\";\nimport StationSummaryCard from \"./StationSummaryCard\";\nimport Navigator from \"../Navigator\";\nimport styled, { keyframes } from \"styled-components\";\nimport { Dispatch, SetStateAction, useContext, useState } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport CategorySelector from \"./CategorySelector\";\nimport { FaSpinner } from \"react-icons/fa\";\nimport SubscribePanel from \"./SubscribePanel\";\nimport FilterSelector, { Filter } from \"./FilterSelector\";\nimport LoadingScreen from \"./LoadingScreen\";\n\ntype OSCESelectorProps = {\n    stationSummarires: StationSummary[];\n    selectStation: (id: string, options: { review: boolean; marks: (0 | 1)[] }) => void;\n    station: Station;\n    answeredStations: AnsweredStationDetails[];\n    purchasedOsce: boolean;\n    stationSummariesLoading: boolean;\n    openSubscribeModal: () => void;\n};\n\nconst OSCESelector = (props: OSCESelectorProps) => {\n    const { token, narrowWindow } = useContext(MetaContext);\n    const [category, updateCategory] = useState(\"All\");\n    const [filter, updateFilter] = useState<Filter>(\"No Filter\");\n\n    return (\n        <div>\n            {props.stationSummariesLoading ? (\n                <LoadingScreen message=\"Loading Stations\" />\n            ) : (\n                <div\n                    style={{\n                        background: \"#031B34\",\n                        margin: \"5%\",\n                        padding: \"5%\",\n                        display: narrowWindow ? \"block\" : \"flex\",\n                    }}\n                >\n\n                    <CategorySelector\n                        updateCategory={updateCategory}\n                        stationSummaries={props.stationSummarires}\n                        category={category}\n                    />\n                    \n                    <div>\n                        <FilterSelector\n                            stationSummaries={props.stationSummarires}\n                            updateFilter={updateFilter}\n                            filter={filter}\n                        />\n\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexWrap: \"wrap\",\n                            }}\n                        >\n                            {props.stationSummarires\n                                .filter(ss => ss.category === category || category === \"All\")\n                                .filter(ss => {\n                                    if (filter === \"Attempted\")\n                                        return props.answeredStations\n                                            .map(as => as.id)\n                                            .includes(ss.id);\n                                    if (filter === \"Free\") return ss.isDemoStation;\n                                    if (filter === \"Premium\") return !ss.isDemoStation;\n                                    return true; // filter === \"All\"\n                                })\n                                .map(ss => (\n                                    <StationSummaryCard\n                                        openSubscribeModal={props.openSubscribeModal}\n                                        selectStation={props.selectStation}\n                                        answeredStations={props.answeredStations}\n                                        summary={ss}\n                                        available={\n                                            (token !== \"\" && props.purchasedOsce) ||\n                                            ss.isDemoStation\n                                        }\n                                        key={ss.id}\n                                    />\n                                ))}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default OSCESelector;\n\nconst StartOrReview = styled.button`\n    text-align: center;\n    margin: 5px 10px 5px 0;\n    border-radius: 5px;\n    padding: 0 10px;\n    height: 30px;\n    border: 1px solid grey;\n    color: #fad000;\n    background-color: transparent;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/Navigator.tsx",["335","336","337","338"],"import { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../MetaContext\";\nimport { Logout, Login } from \"./HomePage/LoginLogout\";\nimport Navbar from \"./HomePage/Navbar\";\n\ntype NavigatorProps = {\n  selection: string;\n};\n\n\n\nconst options = [\n  { title: \"Home\", path: \"\", av: true },\n  { title: \"OSCE\", path: \"/OSCE\", av: true },\n  // { title: \"Data Interpretation\", path: \"/DataInterpretation\", av: true },\n  // { title: \"Dashboard\", path: \"/User\", av: true },\n  // { title: \"MedBook\", path: \"/User\", av: false },\n  // { title: \"QBank\", path: \"/User\", av: false },\n];\n\nconst Navigator = ({ selection }: NavigatorProps) => {\n  const { token, setToken } = useContext(MetaContext);\n\n  return (\n    <div> \n\n    <Container>\n      <OptionsContainer>\n        {options.map(({ title, path, av }, i) => (\n          <OptionLink key={i} to={av ? path : \"#\"}>\n            <Option av={av} selected={title === selection}>\n              {title}\n            </Option>\n          </OptionLink>\n        ))}\n      </OptionsContainer>\n      {token ? <Logout darkMode={true} setToken={setToken} /> : <Login label=\"Sign Up / Login\" />}\n    </Container>\n\n    </div>\n  );\n};\n\nconst Container = styled.div`\nmargin: 30px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 5%;\n\n  @media screen and (max-width: 1050px) {\n    .gpt3__navbar-links_container {\n        display: none;\n    }\n\n    .gpt3__navbar-menu {\n        display: flex;\n    }\n}\n\n@media screen and (max-width: 700px) {\n    .gpt3__navbar {\n        padding: 2rem 4rem;\n    }\n}\n\n@media screen and (max-width: 550px) {\n    .gpt3__navbar {\n        padding: 2rem;\n    }\n\n    .gpt3__navbar-sign {\n        display: none;\n    }\n\n    .gpt3__navbar-menu_container {\n        top: 20px;\n    }\n\n    .gpt3__navbar-menu_container-links-sign {\n        display: block;\n    }\n  \n`;\n\nconst LogoTitle = styled.div`\n  margin: 10px 0;\n  h1 {\n    font-family: \"Jakarta\";\n  }\n`;\n\nconst OptionsContainer = styled.div`\n  display: flex;\n  margin-left: ;\n  @media screen and (max-width: 700px) {\n    padding: 2rem 4rem;\n  }\n\n  @media screen and (max-width: 550px) {\n    padding: 2rem;\n  }\n  \n`;\n\nconst OptionLink = styled(Link)`\n  text-decoration: none;\n  margin: 0 0px;\n`;\n\nconst Option = styled.div<{ av: boolean; selected: boolean }>`\n  padding: 15px;\n  background-color: ${props => (props.selected ? \"#031B34\" : \"none\")};\n  text-decoration: ${props => (props.av ? \"none\" : \"line-through\")};\n  color: ${props => (props.selected ? \"#white\" : \"white\")};\n  border-radius: 5px;\n  box-shadow: 0px 0px 5px rgba(0,0, 0,0.2);\n  font-weight: 500;\n    font-size: 18px;\n    line-height: 25px;\n`;\n\nconst LoginButton = styled.button`\n  padding: 10px 20px;\n  background-color: #fad000;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  span {\n    color: black;\n    font-weight: bold;\n  }\n`;\n\nexport default Navigator;\n","/Users/albert/projects/med-bakery-react/client/src/components/HomePage/LoginLogout.tsx",["339","340","341"],"import {\n    GoogleLogin,\n    GoogleLoginResponse,\n    GoogleLoginResponseOffline,\n    GoogleLogout,\n} from \"react-google-login\";\nimport axios from \"../../myaxios\";\nimport styled from \"styled-components\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\nimport { useContext, useState } from \"react\";\nimport MetaContext from \"../../MetaContext\";\n\nconst clientID = \"439563851182-mo2cj9djg7f0u19ctnjp1864tdaredkc.apps.googleusercontent.com\";\n\ntype LoginProps = {\n    label: string;\n    successCallback?: (token: string) => void;\n};\n\nexport const Login = (props: LoginProps) => {\n    const { SERVER_URL, setToken } = useContext(MetaContext);\n\n    const onSuccess = (res: any) => {\n        axios.post(SERVER_URL + \"/user/googlelogin\", { token: res.tokenId }).then(axres => {\n            if (axres.data.success) {\n                setToken(res.tokenId);\n                if (props.successCallback) props.successCallback(res.tokenId);\n            }\n        });\n    };\n\n    const onFailure = (res: any) => {\n        console.log(\"err: \", res);\n    };\n\n    return (\n        <GoogleLogin\n            clientId={clientID}\n            buttonText=\"LOGIN\"\n            onSuccess={onSuccess}\n            onFailure={onFailure}\n            isSignedIn={true}\n            render={propss => (\n                <LoginButton onClick={propss.onClick} disabled={propss.disabled} id=\"loginboi\">\n                    <span>{props.label}</span>\n                </LoginButton>\n            )}\n        />\n    );\n};\n\nexport const LoginButton = styled.button`\npadding: 10px 20px;\nbackground-color: #fad000;\nborder: none;\nborder-radius: 5px;\ncursor: pointer;\nspan {\n  color: black;\n  font-weight: bold;\n}\n`;\n\nexport const Logout = (props: { setToken: (userToken: string) => void; darkMode: boolean }) => {\n    const { darkMode } = useContext(MetaContext);\n\n    const onSuccess = () => {\n        console.log(\"we logged out!\");\n        props.setToken(\"\");\n        window.analytics.track({\n            userId: clientID,\n            event: \"User Logged out\",\n        });\n    };\n\n    return (\n        <GoogleLogout\n            clientId={clientID}\n            buttonText=\"LOGOUT\"\n            onLogoutSuccess={onSuccess}\n            render={prps => (\n                <LogoutButton darkMode={darkMode} onClick={prps.onClick} disabled={prps.disabled}>\n                    <FaSignOutAlt /> &nbsp; Logout &nbsp;\n                </LogoutButton>\n            )}\n        />\n    );\n};\n\nconst LogoutButton = styled.button<{ darkMode: boolean }>`\npadding: 10px 20px;\nbackground-color: #fad000;\nborder: none;\nborder-radius: 5px;\ncursor: pointer;\nspan {\n  color: black;\n  font-weight: bold;\n}\n`;\n\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/DemoStations/NullStation.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/QuestionSelector.tsx",["342","343","344","345","346","347","348","349","350","351","352","353","354"],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/LoadingScreen.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Brief.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Summary.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/types.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/MarkReviewPage.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx",["355","356"],"import { Dispatch, SetStateAction, useState } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, startAudioRecordingId, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<number>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const questionCount = props.station.questions.length;\n    const history = useHistory();\n    const idx = props.questionIdx;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/Summary\")\n            : props.updateQuestionIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateQuestionIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container>\n            <Header\n                updateStation={props.updateStation}\n                station={props.station}\n                handleExit={props.handleExit}\n                title={\"Station\"}\n                percentage={10 + (100 * idx) / questionCount}\n                timer={true}\n                nextFunc={nextFunc}\n                prevFunc={prevFunc}\n            />\n\n            <Slider ref={setSliderRef} {...settings}>\n                {props.station.questions.map((question, questionIdx) => (\n                    <QuestionContent\n                        question={question}\n                        questionIdx={questionIdx}\n                        updateStation={props.updateStation}\n                        active={props.questionIdx === questionIdx}\n                        nextFunc={nextFunc}\n                        key={questionIdx}\n                    />\n                ))}\n            </Slider>\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewPage.tsx",["357"],"import { Dispatch, SetStateAction, useState } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionReviewContent from \"./QuestionReviewContent\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Slider from \"react-slick\";\n\ntype QuestionReviewPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateIdx: Dispatch<SetStateAction<number>>;\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionReviewPage = (props: QuestionReviewPageProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const history = useHistory();\n    const idx = props.questionIdx;\n    const questionCount = props.station.questions.length;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/MarkReview\")\n            : props.updateIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container style={{ textAlign: \"center\" }}>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                <Header\n                    updateStation={props.updateStation}\n                    station={props.station}\n                    handleExit={props.handleExit}\n                    title={\"Review\"}\n                    percentage={10 + (100 * idx) / questionCount}\n                    timer={false}\n                    nextFunc={nextFunc}\n                    prevFunc={prevFunc}\n                />\n\n                <Slider ref={setSliderRef} {...settings}>\n                    {props.station.questions.map((q, questionIdx) => (\n                        <QuestionReviewContent\n                            question={q}\n                            questionIdx={questionIdx}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                            active={questionIdx === props.questionIdx}\n                        />\n                    ))}\n                </Slider>\n            </div>\n        </Container>\n    );\n};\n\nexport default QuestionReviewPage;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/CategorySelector.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationSummaryCard.tsx",["358","359","360","361","362","363","364"],"import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { FaCheckCircle, FaMinusCircle, FaTimesCircle } from \"react-icons/fa\";\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport { getBinaryDigits, markPercentage } from \"./hooks\";\nimport { AnsweredStationDetails } from \"./types\";\n\ntype StationSummaryCardProps = {\n    summary: {\n        id: string;\n        thumbnail: string;\n        title: string;\n    };\n    selectStation: (id: string, options: { review: boolean; marks: (0 | 1)[] }) => void;\n    answeredStations: AnsweredStationDetails[];\n    available: boolean;\n    openSubscribeModal: () => void;\n};\n\nconst StationSummaryCard = (props: StationSummaryCardProps) => {\n    const history = useHistory();\n    const matches = props.answeredStations.filter(s => s.id === props.summary.id);\n    const percentage = matches.length === 0 ? 0 : markPercentage(matches[0].markCode);\n    const marks = matches.length === 0 ? [] : getBinaryDigits(matches[0].markCode).slice(1);\n\n    const handleClick = (review: boolean) => {\n        props.selectStation(props.summary.id, { review, marks });\n    };\n\n    let completnessSymbol = <FaMinusCircle color=\"#505050\" size={20} />;\n    if (!isNaN(percentage) && props.available) {\n        completnessSymbol =\n            percentage < 50 ? (\n                <FaTimesCircle color=\"red\" size={20} />\n            ) : (\n                <FaCheckCircle color=\"green\" size={20} />\n            );\n    }\n\n    return (\n        <StationPanel>\n            <div style={{ margin: \"20px 0 20px 20px\", display: \"flex\", alignItems: \"center\" }}>\n                <div>{completnessSymbol}</div> &nbsp;&nbsp;&nbsp;\n                <span style={{ fontSize: 15 }}>{props.summary.title}</span>\n            </div>\n            <div>\n                {props.available ? (\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <Percent color={percentage > 50 ? \"green\" : \"red\"}>\n                            {isNaN(percentage) ? \"--\" : percentage}%\n                        </Percent>\n\n                        <div>\n                            <Link to=\"/OSCE/Station/Brief\" style={{ display: \"block\" }}>\n                                <Button color=\"#FAD000\" onClick={() => handleClick(false)}>\n                                    Start\n                                </Button>\n                            </Link>\n                            {matches.length > 0 && (\n                                <Link to=\"/OSCE/Station/Summary\" style={{ display: \"block\" }}>\n                                    <Button color=\"grey\" onClick={() => handleClick(true)}>\n                                        Review\n                                    </Button>\n                                </Link>\n                            )}\n                        </div>\n                    </div>\n                ) : (\n                    <Premium\n                        color=\"#FAD000\"\n                        style={{ backgroundColor: \"#FAAD29\", color: \"#000000\" }}\n                        onClick={() => history.push(\"/Subscribe/Checkout\")}\n                    >\n                        Premium\n                    </Premium>\n                )}\n            </div>\n        </StationPanel>\n    );\n};\n\nexport default StationSummaryCard;\n\nconst StationPanel = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    background-color: #040C18;\n    color: #f7bd9d;\n    border-style: none;\n    border-radius: 10px;\n    width: 100%;\n    max-width: 400px;\n    margin: 0 20px 20px 0;\n`;\n\nconst Button = styled.button<{ color: string }>`\n    text-align: center;\n    margin: 5px 10px 5px 0;\n    border-radius: 8px;\n    padding: 0 10px;\n    height: 30px;\n    width: 75px;\n    border: 1px solid grey;\n    color: ${props => props.color};\n    background-color: transparent;\n`;\n\nconst Percent = styled.button<{ color: string }>`\n    text-align: center;\n    margin: 5px 10px 5px 0;\n    border-radius: 8px;\n    padding: 0 10px;\n    height: 30px;\n    border: 1px solid grey;\n    color: ${props => props.color};\n    background-color: transparent;\n`;\n\nconst Premium = styled.button`\n    text-align: center;\n    margin: 5px 10px 5px 0;\n    border-radius: 8px;\n    padding: 0 10px;\n    border: 1px solid grey;\n    color: #fad000;\n    background-color: #fad000;\n    width: 100px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/FilterSelector.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx",["365","366"],"import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Timer } from \"./Common\";\nimport { useLoopTime, convertToString } from \"./hooks\";\nimport { Station } from \"./types\";\n\ntype TimerApparatusProps = {\n    brief?: boolean;\n    startTime: number;\n    nextFunc: () => void;\n    updateStation: Dispatch<SetStateAction<Station>>;\n};\n\nconst TimerApparatus = (props: TimerApparatusProps) => {\n    const secondTicker = useLoopTime(props.startTime - 1);\n\n    // this here dohickey saves the current timer value when compnenets unmounts, we use\n    // the brief prop boolean flag to indicate different timings for brief vs section\n    useEffect(\n        () => () => {\n            props.updateStation(station => ({\n                ...station,\n                timePermitted: props.brief ? station.timePermitted : secondTicker,\n            }));\n        },\n        []\n    );\n\n    if (secondTicker <= 0) props.nextFunc();\n\n    return <Timer> {convertToString(secondTicker)}</Timer>;\n};\n\nexport default TimerApparatus;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/SaveModal.tsx",["367","368","369"],"import { props } from \"ramda\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport heart from \"../OSCEPage/media/heart.png\";\nimport { Login, LoginButton } from \"../HomePage/LoginLogout\";\nimport { Question, Station } from \"./types\";\n\ntype SaveModalProps = {\n    close: () => void;\n    handleExit: (questions: Question[], tok: string) => void;\n    station: Station;\n};\n\nconst SaveModal = (props: SaveModalProps) => {\n    return (\n        <OverLay onClick={props.close}>\n            <Modal>\n                <div style={{ margin: \"20px 10px\" }}>\n                    <img src={heart} height={100} />\n                </div>\n\n                <div style={{ textAlign: \"center\" }}>\n                    <Link to=\"/OSCE\">\n                        <LoginButton style = {{backgroundColor: \"#1c2124\", color: \"#DCDCDC\",}}>I don't want to save</LoginButton>\n                    </Link>\n                    <Login \n                        label={\"Save my progress!\"}\n                        successCallback={t => props.handleExit(props.station.questions, t)}\n                    />\n                </div>\n            </Modal>\n        </OverLay>\n    );\n};\n\nexport default SaveModal;\n\nconst OverLay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    height: 100vh;\n    width: 100vw;\n    z-index: 2000;\n`;\n\nconst Modal = styled.div`\n    border-radius: 10px;\n    position: absolute;\n    top: 200px;\n    left: 12.5vw;\n    background-color: #1c2124;\n    height: 250px;\n    width: 75vw;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Common.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Header.tsx",["370","371","372","373"],"import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport TimerBar from \"./TimerBar\";\nimport { Question, Station } from \"./types\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport AlphaTimer from \"./AlphaTimer\";\nimport { FaArrowLeft, FaArrowRight } from \"react-icons/fa\";\nimport SaveModal from \"./SaveModal\";\n\ntype HeaderProps = {\n    updateStation: Dispatch<SetStateAction<Station>>;\n    station: Station;\n    handleExit: (questions: Question[], tok: string) => void;\n    title: string;\n    percentage: number;\n    timer: boolean;\n    nextFunc: () => void;\n    prevFunc: () => void;\n};\n\nconst Header = (props: HeaderProps) => {\n    const { token } = useContext(MetaContext);\n    const [displayLoginOption, updateDisplayLoginOption] = useState(false);\n\n    return (\n        <HeaderContainer>\n            <h2>{props.title}</h2>\n            <TimerBar percentage={props.percentage} />\n\n            <br />\n\n            <div\n                style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    borderRadius: \"3px\",\n                }}\n            >\n                <ExitButton\n                    onClick={() =>\n                        token\n                            ? props.handleExit(props.station?.questions, token)\n                            : updateDisplayLoginOption(true)\n                    }\n                >\n                    Exit\n                </ExitButton>\n\n                {props.timer && (\n                    <AlphaTimer\n                        startTime={props.station.timePermitted}\n                        nextFunc={props.nextFunc}\n                        updateStation={props.updateStation}\n                    />\n                )}\n\n                <div style={{ display: \"flex\" }}>\n                    <Arrow onClick={props.prevFunc}>\n                        <FaArrowLeft />\n                    </Arrow>\n                    <Arrow onClick={props.nextFunc}>\n                        <FaArrowRight />\n                    </Arrow>\n                </div>\n            </div>\n\n            <br />\n\n            {displayLoginOption && (\n                <SaveModal\n                    handleExit={props.handleExit}\n                    station={props.station}\n                    close={() => updateDisplayLoginOption(false)}\n                />\n            )}\n        </HeaderContainer>\n    );\n};\n\nexport default Header;\n\nconst HeaderContainer = styled.div`\n    grid-row-start: 1;\n    grid-column-start: 1;\n    height: 20vh;\n    text-align: center;\n    width: 100%;\n    max-width: 800px;\n    margin: auto;\n    background-color: #;\n    padding-top: 20px;\n    opacity: 0.98;\n    z-index: 999;\n    border-radius: 5px;\n`;\n\nexport const Arrow = styled.button`\n    text-align: center;\n    border: 2px solid grey;\n    width: 40px;\n    color: #FFFF;\n    background-color: transparent;\n    border-radius: 2px;\n    height: max-content;\n    border-radius: 5px;\n`;\n\nexport const ExitButton = styled.div`\n    display: inline-block;\n    text-align: center;\n    border: 2px solid grey;\n    width: 80px;\n    color: #FFFF;\n    border-radius: 2px;\n    height: max-content;\n    border-radius: 5px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/SummaryPrompt.tsx",["374","375","376","377"],"import { FaVolumeUp } from \"react-icons/fa\"\nimport styled from \"styled-components\"\nimport { promptId, Question } from \"./types\"\nimport heart from \"./media/heart.png\"\nimport summaryAudioUrl from \"./media/SummaryAudio.mp3\"\nimport { useState } from \"react\"\n\ntype SummaryPromptProps = {\n}\n\nconst SummaryPrompt = (props: SummaryPromptProps) => {\n\n    const toggle = () => {\n        const audioElement = document.getElementById(\"summaryAudio\") as HTMLAudioElement;\n        if (!audioElement) return;\n        audioElement.paused ? audioElement.play() : audioElement.pause();\n    }\n\n    return (\n        <div>\n\n            <div style = {{ display: \"inline-block\", margin: \"20px 0\" }}><img src = { heart } width = \"100px\"/></div>\n\n            <Prompt onClick = { toggle }>\n\n                <FaVolumeUp /> &nbsp; &nbsp; You have completed the station, time to review!\n\n                <audio autoPlay = {true} src = { summaryAudioUrl } id = \"summaryAudio\"/>\n\n            </Prompt>\n\n        </div>\n    )\n}\n\nexport default SummaryPrompt\n\nconst Prompt = styled.div`\n    display: inline-block;\n    color: #FFFF;\n    border: 2px solid grey;\n    border-radius: 5px;\n    margin: 0 5%; \n    padding: 5px;\n    &:hover {\n        cursor: pointer;\n        border: 2px solid #FAD000;\n    }\n`","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx",["378"],"import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../../old-components/ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId, Question, Station } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\n\ntype QuestionContentProps = {\n    question: Question;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    active: boolean;\n    questionIdx: number;\n    nextFunc: () => void;\n};\n\nconst QuestionContent = (props: QuestionContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    const { startRecording, stopRecording, status } = useReactMediaRecorder({\n        audio: true,\n        onStop: (blobUrl, _) => {\n            console.log(\"recording stopped\");\n            props.updateStation(s => {\n                console.log(props.questionIdx);\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n\n            const endTone = new Audio(startToneUrl);\n            endTone.onended = props.nextFunc;\n            endTone.play();\n        },\n    });\n\n    const [responseWaveSurfer, updateResponseWaveSurfer] = useState<WaveSurfer | undefined>(\n        undefined\n    );\n\n    const getPromptAudio = () =>\n        document.getElementById(promptId + props.questionIdx) as HTMLAudioElement | null;\n\n    const stopEverything = () => {\n        getPromptAudio()?.pause();\n        responseWaveSurfer?.stop();\n        if (status === \"recording\") stopRecording();\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        if (id === promptId) getPromptAudio()?.play();\n        else responseWaveSurfer?.play();\n    };\n\n    useEffect(() => {\n        getPromptAudio()!.currentTime = 0;\n        props.active ? getPromptAudio()?.play() : stopEverything();\n    }, [props.active]);\n\n    return (\n        <div>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"60vh\",\n                    transition: `transform ${500}ms`,\n                }}\n            >\n                <QuestionPrompt\n                    question={props.question}\n                    toggle={() => {\n                        !getPromptAudio()?.paused ? stopEverything() : play(promptId);\n                    }}\n                    promptId={promptId + props.questionIdx}\n                />\n                <Box\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        height: \"49vh\",\n                    }}\n                >\n                    <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    <br />\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 4,\n                    gridColumnStart: 1,\n                    zIndex: 700,\n                    backgroundColor: \"#\",\n                    height: \"15vh\",\n                }}\n            >\n                <WaveSurfer\n                    playResponse={() => play(\"waveform\" + props.questionIdx)}\n                    stopEverything={stopEverything}\n                    responseAudio={props.question.responseAudio}\n                    questionIdx={props.questionIdx}\n                    updateResponseWaveSurfer={updateResponseWaveSurfer}\n                />\n\n                <RecordControl\n                    recording={status === \"recording\"}\n                    stopEverything={stopEverything}\n                    startRecording={startRecording}\n                    questionIdx={props.questionIdx}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    max-width: 100%;\n    max-height: 100%;\n    transition: width 0.2s;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewContent.tsx",["379","380"],"import { useContext, useState, useEffect, Dispatch, SetStateAction } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../../MetaContext\";\nimport { Box } from \"../Common\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport { Question, promptId, responseId, Station } from \"../types\";\nimport MarkScheme from \"./MarkScheme\";\nimport WaveSurferReview from \"./WaveSurferReview\";\n\ntype QuestionReviewContentProps = {\n    question: Question;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    reviewMode: boolean;\n    active: boolean;\n};\n\nconst QuestionReviewContent = (props: QuestionReviewContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n    const [waveSurfer, updateWaveSurfer] = useState<WaveSurfer | undefined>();\n    const [showMarkScheme, updateShowMarkScheme] = useState(true);\n\n    const getPromptAudio = () =>\n        document.getElementById(promptId + props.questionIdx) as HTMLAudioElement | null;\n\n    const stopEverything = () => {\n        getPromptAudio()?.pause();\n        waveSurfer?.stop();\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        if (id === promptId) getPromptAudio()?.play();\n        else waveSurfer?.play();\n    };\n\n    useEffect(() => {\n        getPromptAudio()!.currentTime = 0;\n        props.active ? getPromptAudio()?.play() : stopEverything();\n    }, [props.active]);\n\n    return (\n        <>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"60vh\",\n                    transition: `transform ${500}ms`,\n                }}\n            >\n                <QuestionPrompt\n                    question={props.question}\n                    toggle={() => {\n                        !getPromptAudio()?.paused ? stopEverything() : play(promptId);\n                    }}\n                    promptId={promptId + props.questionIdx}\n                />\n                <Box\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        height: \"49vh\",\n                    }}\n                >\n                    {showMarkScheme ? (\n                        <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    ) : (\n                        <MarkScheme\n                            markScheme={props.question.markScheme}\n                            questionIdx={props.questionIdx}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                        />\n                    )}\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 4,\n                    gridColumnStart: 1,\n                    zIndex: 700,\n                    backgroundColor: \"#\",\n                    height: \"15vh\",\n                }}\n            >\n                <SchemeToggle\n                    narrowWindow={narrowWindow}\n                    onClick={() => updateShowMarkScheme(!showMarkScheme)}\n                >\n                    {showMarkScheme ? \"Mark Scheme\" : \"Show Station\"}\n                </SchemeToggle>\n                <WaveSurferReview\n                    stopEverything={stopEverything}\n                    play={() => play(responseId)}\n                    exemplarAudio={props.question.exemplarAudio}\n                    responseAudio={props.question.responseAudio}\n                    updateWaveSurfer={updateWaveSurfer}\n                    questionIdx={props.questionIdx}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default QuestionReviewContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    max-width: 100%;\n    max-height: 100%;\n    transition: width 0.2s;\n`;\n\nconst SchemeToggle = styled.button<{ narrowWindow: boolean }>`\n    background-color: #031B34;\n    border-radius: 5px;\n    height: 30px;\n    align-content: center;\n    width: 100%;\n    margin-top: 10px;\n    border: 1px solid #414142;\n    color: #fad000;\n    font-size: ${props => (props.narrowWindow ? \"12px\" : \"15px\")};\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/TimerBar.tsx",["381","382"],"import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\ntype TimerBarProps = {\n    percentage: number;\n};\n\nconst TimerBar = (props: TimerBarProps) => {\n    return (\n        <OuterBar>\n            <InnerBar percentage={props.percentage} />\n        </OuterBar>\n    );\n};\n\nexport default TimerBar;\n\nconst OuterBar = styled.div`\n    height: 10px;\n    background-color: #4a4b52;\n`;\n\nconst InnerBar = styled.div<{ percentage: number }>`\n    background-color: #5dcc6f;\n    width: ${props => props.percentage}%;\n    height: 100%;\n    transition: width 1s linear;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPrompt.tsx",["383","384","385"],"import { FaVolumeUp } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { promptId, Question } from \"./types\";\nimport heart from \"./media/heart.png\";\nimport { useContext } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport { useWindowSize } from \"../../functions\";\n\ntype QuestionPromptProps = {\n    question: Question;\n    toggle: () => void;\n    promptId: string;\n};\n\nconst QuestionPrompt = (props: QuestionPromptProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    return (\n        <div\n            onClick={props.toggle}\n            style={{\n                backgroundColor: \"#031B34\",\n                padding: \"5px\",\n                borderRadius: \"10px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                margin: \"0 auto 10px auto\",\n                width: \"100%\",\n                height: \"10vh\",\n                cursor: \"pointer\",\n            }}\n        >\n            <div style={{ margin: \"5px\" }}>\n                <img src={heart} width={narrowWindow ? \"35px\" : \"75px\"} />\n            </div>\n            <div>\n                <Prompt>\n                    <FaVolumeUp />\n                    <span style={{ fontSize: narrowWindow ? \"16px\" : \"20px\" }}>\n                        &nbsp; &nbsp; {props.question.question}\n                    </span>\n                    <audio src={props.question.questionAudio} id={props.promptId} />\n                </Prompt>\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionPrompt;\n\nconst Prompt = styled.div`\n    display: flex;\n    align-items: center;\n    color: white;\n    padding: 5px;\n    &:hover {\n        cursor: pointer;\n    }\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/WaveSurfer.tsx",["386","387"],"import { Dispatch, MutableRefObject, SetStateAction, useEffect, useState } from \"react\";\nimport { FaPause, FaPlay } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { generateWaveSurfer } from \"../hooks\";\n\ntype TaskSectionProps = {\n    playResponse: () => void;\n    stopEverything: () => void;\n    responseAudio: string;\n    questionIdx: number;\n    updateResponseWaveSurfer: Dispatch<SetStateAction<WaveSurfer | undefined>>;\n};\n\nconst TaskSection = (props: TaskSectionProps) => {\n    const [responsePlaying, updateResponsePlaying] = useState(false);\n\n    useEffect(() => {\n        const container = document.getElementById(\"waveform\" + props.questionIdx);\n        if (container) container.innerHTML = \"\";\n\n        const ws = generateWaveSurfer(\"waveform\" + props.questionIdx, props.responseAudio);\n        ws.on(\"play\", () => updateResponsePlaying(true));\n        ws.on(\"finish\", () => updateResponsePlaying(false));\n        ws.on(\"pause\", () => updateResponsePlaying(false));\n\n        props.updateResponseWaveSurfer(ws);\n    }, [props.responseAudio]);\n\n    return (\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            {!props.responseAudio ? (\n                <>\n                    <Panel\n                        style={{ margin: \"10px 0\", width: \"10%\", backgroundColor: \"#031B34\" }}\n                    ></Panel>\n                    <Panel\n                        style={{\n                            margin: \"10px 0\",\n                            width: \"87%\",\n                            backgroundColor: \"#031B34\",\n                        }}\n                    >\n                        <div id={\"waveform\" + props.questionIdx}></div>\n                    </Panel>\n                </>\n            ) : (\n                <>\n                    <Panel\n                        onClick={responsePlaying ? props.stopEverything : props.playResponse}\n                        style={{ margin: \"10px 0\", width: \"10%\" }}\n                    >\n                        {responsePlaying ? <FaPause /> : <FaPlay />}\n                    </Panel>\n                    <Panel style={{ margin: \"10px 0\", width: \"87%\" }}>\n                        <div id={\"waveform\" + props.questionIdx}></div>\n                    </Panel>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default TaskSection;\n\nconst Panel = styled.div`\n    background-color: #303237;\n    padding: 0 10px;\n    border-radius: 10px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/RecordControl.tsx",["388"],"import { useContext, useState } from \"react\";\nimport { FaMicrophone } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\n\ntype RecordControlProps = {\n    recording: boolean;\n    stopEverything: () => void;\n    startRecording: () => void;\n    questionIdx: number;\n};\n\nconst RecordControl = (props: RecordControlProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    const record = () => {\n        props.stopEverything();\n        const startTone = new Audio(startToneUrl);\n        startTone.onended = props.startRecording;\n        startTone.play();\n    };\n    return (\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Control\n                onClick={props.recording ? props.stopEverything : record}\n                narrowWindow={narrowWindow}\n                recording={props.recording}\n            >\n                <div style={{paddingBottom:\"10%\"}}> \n                <span> \n                <FaMicrophone /> &nbsp;\n                {props.recording && \"Done\"}\n                {!props.recording && \"Tap to answer\"}\n                </span>\n                </div>\n\n            </Control>\n        </div>\n    );\n};\n\nexport default RecordControl;\n\nconst Control = styled.button<{ narrowWindow: boolean; recording: boolean }>`\npadding: 10px 20px;\nbackground-color: #fad000;\nborder: none;\nborder-radius: 5px;\n    color: black;\n    font-weight: bold;\n\n    height: 35px;\n    align-content: center;\n    margin: auto;\n    width: 45%;\n    border: 1px solid ${props => (props.recording ? \"red\" : \"#414142\")};\n    color: ${props => (props.recording ? \"red\" : \"black\")};\n    font-size: ${props => (props.narrowWindow ? \"12px\" : \"15px\")};\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/MarkScheme.tsx",["389","390","391","392","393"],"import { Dispatch, SetStateAction, useState } from \"react\";\nimport { FaCaretDown, FaCaretRight, FaCheckCircle, FaCircle, FaTimesCircle } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport { toggleMarkPoint } from \"../hooks\";\nimport { MarkSchemeSection, Station } from \"../types\";\n\ntype MarkSchemeProps = {\n    updateStation: Dispatch<SetStateAction<Station>>;\n    markScheme: MarkSchemeSection[];\n    questionIdx: number;\n    reviewMode: boolean;\n};\n\nconst MarkScheme = (props: MarkSchemeProps) => {\n    const selectPoint = (pointId: number) => {\n        props.updateStation(oldStation => toggleMarkPoint(oldStation, props.questionIdx, pointId));\n    };\n\n    const renderSchemePoint = (schemePoint: {\n        point: string;\n        selected: boolean;\n        pointId: number;\n    }) => {\n        return (\n            <SchemePointContainer\n                onClick={() => (props.reviewMode ? {} : selectPoint(schemePoint.pointId))}\n            >\n                <SchemePoint>{schemePoint.point}</SchemePoint>\n                <div>\n                    {schemePoint.selected ? (\n                        <FaCheckCircle color=\"green\" />\n                    ) : (\n                        <FaCircle color=\"grey\" />\n                    )}\n                </div>\n            </SchemePointContainer>\n        );\n    };\n\n    return (\n        <div style={{ margin: \"5% auto\", padding: \"0 10%\" }}>\n            {props.markScheme.map(x => (\n                <>\n                    <h5>{x.title}</h5>\n                    {x.points.map(renderSchemePoint)}\n                    <br />\n                </>\n            ))}\n        </div>\n    );\n};\n\nexport default MarkScheme;\n\nconst Title = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #414142;\n    border-radius: 5px;\n    height: 35px;\n    align-content: center;\n    margin: auto;\n    width: 100%;\n    border-style: none;\n    color: white;\n`;\n\nconst SchemePoint = styled.div`\n    text-align: left;\n    color: #fad000;\n    font-size: 18px;\n    margin: 0 5px;\n`;\n\nconst SchemePointContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n`;\n","/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/WaveSurferReview.tsx",["394"],"import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { FaPause, FaPlay } from \"react-icons/fa\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../../MetaContext\";\nimport { Box } from \"../Common\";\nimport { generateWaveSurfer } from \"../hooks\";\n\ntype WaveSurferReviewProps = {\n    play: () => void;\n    stopEverything: () => void;\n    responseAudio: string;\n    exemplarAudio: string;\n    updateWaveSurfer: Dispatch<SetStateAction<WaveSurfer | undefined>>;\n    questionIdx: number;\n};\n\nconst WaveSurferReview = (props: WaveSurferReviewProps) => {\n    const [selection, updateSelection] = useState<\"response\" | \"exemplar\" | \"\">(\"\");\n    const { narrowWindow } = useContext(MetaContext);\n    const [playing, updatePlaying] = useState(false);\n\n    const handleClick = (sel: \"response\" | \"exemplar\"): void => {\n        // if already selected then just toggle\n        if (sel === selection) return playing ? props.stopEverything() : props.play();\n\n        // need to stopEverything while ws exists\n        props.stopEverything();\n\n        const container = document.getElementById(\"waveform\" + props.questionIdx);\n        if (container) container.innerHTML = \"\";\n\n        const audio = sel === \"response\" ? props.responseAudio : props.exemplarAudio;\n        const waveSurfer = generateWaveSurfer(\"waveform\" + props.questionIdx, audio);\n\n        // potential issue if ws already loaded, dunno if this still fires in that case\n        if (selection) waveSurfer.on(\"ready\", _ => waveSurfer.play()); // if (sel) ==> do not play on first load\n        waveSurfer.on(\"play\", _ => updatePlaying(true));\n        waveSurfer.on(\"finish\", _ => updatePlaying(false));\n        waveSurfer.on(\"pause\", _ => updatePlaying(false));\n\n        props.updateWaveSurfer(waveSurfer);\n\n        updateSelection(sel);\n    };\n\n    // load in the user's repsonse audio at first\n    useEffect(() => {\n        handleClick(\"response\");\n    }, []);\n\n    return (\n        <div\n            style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                marginTop: \"10px\",\n            }}\n        >\n            <AudioSelect\n                onClick={() => handleClick(\"response\")}\n                narrowWindow={narrowWindow}\n                selected={selection === \"response\"}\n            >\n                {selection === \"response\" && playing ? <FaPause /> : <FaPlay />}\n                &nbsp; You\n            </AudioSelect>\n\n            <AudioSelect\n                onClick={() => handleClick(\"exemplar\")}\n                narrowWindow={narrowWindow}\n                selected={selection === \"exemplar\"}\n            >\n                {selection === \"exemplar\" && playing ? <FaPause /> : <FaPlay />}\n                &nbsp; Exemplar\n            </AudioSelect>\n\n            <Box style={{ margin: \"0\", width: \"87%\", borderRadius: \"5px\", height: \"30px\" }}>\n                <div id={\"waveform\" + props.questionIdx}></div>\n            </Box>\n        </div>\n    );\n};\n\nexport default WaveSurferReview;\n\nconst AudioSelect = styled.button<{ selected: boolean; narrowWindow: boolean }>`\n    background-color: ${props => (props.selected ? \"#FAD000\" : \"#031B34\")};\n    border-radius: 5px;\n    margin-right: 5px;\n    height: 30px;\n    align-content: center;\n    width: 130px;\n    border: 1px solid #414142;\n    color: ${props => (props.selected ? \"#FFFFF\" : \"#FFFF\")};\n    font-size: ${props => (props.narrowWindow ? \"12px\" : \"15px\")};\n`;\n","/Users/albert/projects/med-bakery-react/client/src/old-components/ECGPage/Functions/utility.tsx",[],"/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/TopicsSelectorPage.tsx",["395","396","397","398","399","400","401","402","403","404","405"],{"ruleId":"406","severity":1,"message":"407","line":12,"column":8,"nodeType":"408","messageId":"409","endLine":12,"endColumn":12},{"ruleId":"406","severity":1,"message":"410","line":17,"column":22,"nodeType":"408","messageId":"409","endLine":17,"endColumn":33},{"ruleId":"406","severity":1,"message":"411","line":18,"column":15,"nodeType":"408","messageId":"409","endLine":18,"endColumn":16},{"ruleId":"406","severity":1,"message":"412","line":93,"column":7,"nodeType":"408","messageId":"409","endLine":93,"endColumn":17},{"ruleId":"406","severity":1,"message":"413","line":4,"column":10,"nodeType":"408","messageId":"409","endLine":4,"endColumn":17},{"ruleId":"406","severity":1,"message":"414","line":5,"column":10,"nodeType":"408","messageId":"409","endLine":5,"endColumn":29},{"ruleId":"406","severity":1,"message":"415","line":112,"column":7,"nodeType":"408","messageId":"409","endLine":112,"endColumn":22},{"ruleId":"406","severity":1,"message":"416","line":135,"column":9,"nodeType":"408","messageId":"409","endLine":135,"endColumn":15},{"ruleId":"406","severity":1,"message":"417","line":1,"column":17,"nodeType":"408","messageId":"409","endLine":1,"endColumn":23},{"ruleId":"406","severity":1,"message":"418","line":1,"column":22,"nodeType":"408","messageId":"409","endLine":1,"endColumn":31},{"ruleId":"406","severity":1,"message":"419","line":2,"column":25,"nodeType":"408","messageId":"409","endLine":2,"endColumn":36},{"ruleId":"406","severity":1,"message":"420","line":8,"column":10,"nodeType":"408","messageId":"409","endLine":8,"endColumn":32},{"ruleId":"406","severity":1,"message":"421","line":8,"column":44,"nodeType":"408","messageId":"409","endLine":8,"endColumn":58},{"ruleId":"422","severity":1,"message":"423","line":39,"column":17,"nodeType":"424","messageId":"425","endLine":39,"endColumn":78},{"ruleId":"406","severity":1,"message":"426","line":1,"column":8,"nodeType":"408","messageId":"409","endLine":1,"endColumn":13},{"ruleId":"406","severity":1,"message":"427","line":5,"column":10,"nodeType":"408","messageId":"409","endLine":5,"endColumn":21},{"ruleId":"406","severity":1,"message":"428","line":5,"column":23,"nodeType":"408","messageId":"409","endLine":5,"endColumn":41},{"ruleId":"406","severity":1,"message":"418","line":7,"column":22,"nodeType":"408","messageId":"409","endLine":7,"endColumn":31},{"ruleId":"406","severity":1,"message":"429","line":7,"column":33,"nodeType":"408","messageId":"409","endLine":7,"endColumn":41},{"ruleId":"406","severity":1,"message":"430","line":10,"column":5,"nodeType":"408","messageId":"409","endLine":10,"endColumn":19},{"ruleId":"406","severity":1,"message":"431","line":11,"column":5,"nodeType":"408","messageId":"409","endLine":11,"endColumn":20},{"ruleId":"406","severity":1,"message":"432","line":13,"column":5,"nodeType":"408","messageId":"409","endLine":13,"endColumn":23},{"ruleId":"406","severity":1,"message":"433","line":14,"column":5,"nodeType":"408","messageId":"409","endLine":14,"endColumn":27},{"ruleId":"406","severity":1,"message":"420","line":17,"column":10,"nodeType":"408","messageId":"409","endLine":17,"endColumn":32},{"ruleId":"406","severity":1,"message":"413","line":17,"column":34,"nodeType":"408","messageId":"409","endLine":17,"endColumn":41},{"ruleId":"406","severity":1,"message":"421","line":17,"column":43,"nodeType":"408","messageId":"409","endLine":17,"endColumn":57},{"ruleId":"406","severity":1,"message":"434","line":18,"column":8,"nodeType":"408","messageId":"409","endLine":18,"endColumn":16},{"ruleId":"406","severity":1,"message":"435","line":19,"column":8,"nodeType":"408","messageId":"409","endLine":19,"endColumn":16},{"ruleId":"406","severity":1,"message":"436","line":20,"column":8,"nodeType":"408","messageId":"409","endLine":20,"endColumn":20},{"ruleId":"406","severity":1,"message":"437","line":21,"column":8,"nodeType":"408","messageId":"409","endLine":21,"endColumn":26},{"ruleId":"406","severity":1,"message":"438","line":22,"column":8,"nodeType":"408","messageId":"409","endLine":22,"endColumn":15},{"ruleId":"406","severity":1,"message":"439","line":23,"column":8,"nodeType":"408","messageId":"409","endLine":23,"endColumn":14},{"ruleId":"406","severity":1,"message":"440","line":24,"column":8,"nodeType":"408","messageId":"409","endLine":24,"endColumn":15},{"ruleId":"406","severity":1,"message":"441","line":25,"column":8,"nodeType":"408","messageId":"409","endLine":25,"endColumn":14},{"ruleId":"406","severity":1,"message":"442","line":26,"column":8,"nodeType":"408","messageId":"409","endLine":26,"endColumn":18},{"ruleId":"406","severity":1,"message":"443","line":34,"column":32,"nodeType":"408","messageId":"409","endLine":34,"endColumn":45},{"ruleId":"406","severity":1,"message":"444","line":34,"column":49,"nodeType":"408","messageId":"409","endLine":34,"endColumn":60},{"ruleId":"406","severity":1,"message":"445","line":5,"column":10,"nodeType":"408","messageId":"409","endLine":5,"endColumn":24},{"ruleId":"406","severity":1,"message":"446","line":8,"column":8,"nodeType":"408","messageId":"409","endLine":8,"endColumn":26},{"ruleId":"406","severity":1,"message":"447","line":24,"column":13,"nodeType":"408","messageId":"409","endLine":24,"endColumn":16},{"ruleId":"448","severity":1,"message":"449","line":30,"column":8,"nodeType":"450","endLine":30,"endColumn":10,"suggestions":"451"},{"ruleId":"406","severity":1,"message":"452","line":43,"column":19,"nodeType":"408","messageId":"409","endLine":43,"endColumn":45},{"ruleId":"406","severity":1,"message":"440","line":7,"column":8,"nodeType":"408","messageId":"409","endLine":7,"endColumn":15},{"ruleId":"406","severity":1,"message":"442","line":8,"column":8,"nodeType":"408","messageId":"409","endLine":8,"endColumn":18},{"ruleId":"406","severity":1,"message":"443","line":14,"column":32,"nodeType":"408","messageId":"409","endLine":14,"endColumn":45},{"ruleId":"406","severity":1,"message":"444","line":14,"column":49,"nodeType":"408","messageId":"409","endLine":14,"endColumn":60},{"ruleId":"406","severity":1,"message":"453","line":16,"column":11,"nodeType":"408","messageId":"409","endLine":16,"endColumn":28},{"ruleId":"406","severity":1,"message":"454","line":55,"column":7,"nodeType":"408","messageId":"409","endLine":55,"endColumn":16},{"ruleId":"406","severity":1,"message":"455","line":65,"column":7,"nodeType":"408","messageId":"409","endLine":65,"endColumn":12},{"ruleId":"406","severity":1,"message":"456","line":73,"column":7,"nodeType":"408","messageId":"409","endLine":73,"endColumn":12},{"ruleId":"406","severity":1,"message":"457","line":78,"column":7,"nodeType":"408","messageId":"409","endLine":78,"endColumn":13},{"ruleId":"458","severity":1,"message":"459","line":3,"column":8,"nodeType":"408","messageId":"409","endLine":3,"endColumn":10},{"ruleId":"458","severity":1,"message":"460","line":6,"column":8,"nodeType":"408","messageId":"409","endLine":6,"endColumn":17},{"ruleId":"461","severity":1,"message":"462","line":29,"column":17,"nodeType":"463","endLine":29,"endColumn":37},{"ruleId":"461","severity":1,"message":"462","line":35,"column":13,"nodeType":"463","endLine":35,"endColumn":58},{"ruleId":"422","severity":1,"message":"423","line":8,"column":13,"nodeType":"424","messageId":"425","endLine":8,"endColumn":61},{"ruleId":"406","severity":1,"message":"464","line":3,"column":10,"nodeType":"408","messageId":"409","endLine":3,"endColumn":14},{"ruleId":"406","severity":1,"message":"465","line":7,"column":10,"nodeType":"408","messageId":"409","endLine":7,"endColumn":13},{"ruleId":"461","severity":1,"message":"462","line":55,"column":21,"nodeType":"463","endLine":55,"endColumn":53},{"ruleId":"406","severity":1,"message":"418","line":1,"column":36,"nodeType":"408","messageId":"409","endLine":1,"endColumn":45},{"ruleId":"406","severity":1,"message":"466","line":2,"column":10,"nodeType":"408","messageId":"409","endLine":2,"endColumn":23},{"ruleId":"406","severity":1,"message":"419","line":2,"column":50,"nodeType":"408","messageId":"409","endLine":2,"endColumn":61},{"ruleId":"461","severity":1,"message":"462","line":14,"column":9,"nodeType":"463","endLine":14,"endColumn":58},{"ruleId":"406","severity":1,"message":"467","line":7,"column":5,"nodeType":"408","messageId":"409","endLine":7,"endColumn":14},{"ruleId":"422","severity":1,"message":"423","line":231,"column":17,"nodeType":"424","messageId":"425","endLine":231,"endColumn":87},{"ruleId":"448","severity":1,"message":"468","line":252,"column":8,"nodeType":"450","endLine":252,"endColumn":15,"suggestions":"469"},{"ruleId":"422","severity":1,"message":"423","line":271,"column":17,"nodeType":"424","messageId":"425","endLine":271,"endColumn":88},{"ruleId":"448","severity":1,"message":"470","line":284,"column":8,"nodeType":"450","endLine":284,"endColumn":10,"suggestions":"471"},{"ruleId":"406","severity":1,"message":"472","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":15},{"ruleId":"461","severity":1,"message":"462","line":24,"column":25,"nodeType":"463","endLine":24,"endColumn":57},{"ruleId":"406","severity":1,"message":"473","line":1,"column":8,"nodeType":"408","messageId":"409","endLine":1,"endColumn":14},{"ruleId":"406","severity":1,"message":"474","line":2,"column":8,"nodeType":"408","messageId":"409","endLine":2,"endColumn":15},{"ruleId":"406","severity":1,"message":"475","line":3,"column":10,"nodeType":"408","messageId":"409","endLine":3,"endColumn":20},{"ruleId":"406","severity":1,"message":"476","line":4,"column":8,"nodeType":"408","messageId":"409","endLine":4,"endColumn":19},{"ruleId":"406","severity":1,"message":"477","line":3,"column":8,"nodeType":"408","messageId":"409","endLine":3,"endColumn":14},{"ruleId":"406","severity":1,"message":"478","line":6,"column":10,"nodeType":"408","messageId":"409","endLine":6,"endColumn":18},{"ruleId":"406","severity":1,"message":"445","line":6,"column":20,"nodeType":"408","messageId":"409","endLine":6,"endColumn":34},{"ruleId":"406","severity":1,"message":"418","line":6,"column":48,"nodeType":"408","messageId":"409","endLine":6,"endColumn":57},{"ruleId":"406","severity":1,"message":"429","line":6,"column":59,"nodeType":"408","messageId":"409","endLine":6,"endColumn":67},{"ruleId":"406","severity":1,"message":"479","line":16,"column":25,"nodeType":"408","messageId":"409","endLine":16,"endColumn":30},{"ruleId":"406","severity":1,"message":"477","line":3,"column":8,"nodeType":"408","messageId":"409","endLine":3,"endColumn":14},{"ruleId":"406","severity":1,"message":"478","line":5,"column":10,"nodeType":"408","messageId":"409","endLine":5,"endColumn":18},{"ruleId":"406","severity":1,"message":"445","line":5,"column":20,"nodeType":"408","messageId":"409","endLine":5,"endColumn":34},{"ruleId":"406","severity":1,"message":"418","line":5,"column":48,"nodeType":"408","messageId":"409","endLine":5,"endColumn":57},{"ruleId":"406","severity":1,"message":"479","line":19,"column":25,"nodeType":"408","messageId":"409","endLine":19,"endColumn":30},{"ruleId":"480","severity":1,"message":"481","line":37,"column":52,"nodeType":"482","messageId":"483","endLine":37,"endColumn":54},{"ruleId":"406","severity":1,"message":"460","line":3,"column":8,"nodeType":"408","messageId":"409","endLine":3,"endColumn":17},{"ruleId":"406","severity":1,"message":"484","line":4,"column":18,"nodeType":"408","messageId":"409","endLine":4,"endColumn":27},{"ruleId":"406","severity":1,"message":"478","line":5,"column":10,"nodeType":"408","messageId":"409","endLine":5,"endColumn":18},{"ruleId":"406","severity":1,"message":"445","line":5,"column":20,"nodeType":"408","messageId":"409","endLine":5,"endColumn":34},{"ruleId":"406","severity":1,"message":"485","line":8,"column":10,"nodeType":"408","messageId":"409","endLine":8,"endColumn":19},{"ruleId":"406","severity":1,"message":"486","line":9,"column":8,"nodeType":"408","messageId":"409","endLine":9,"endColumn":22},{"ruleId":"406","severity":1,"message":"487","line":95,"column":7,"nodeType":"408","messageId":"409","endLine":95,"endColumn":20},{"ruleId":"406","severity":1,"message":"429","line":1,"column":22,"nodeType":"408","messageId":"409","endLine":1,"endColumn":30},{"ruleId":"406","severity":1,"message":"441","line":6,"column":8,"nodeType":"408","messageId":"409","endLine":6,"endColumn":14},{"ruleId":"406","severity":1,"message":"488","line":88,"column":7,"nodeType":"408","messageId":"409","endLine":88,"endColumn":16},{"ruleId":"406","severity":1,"message":"489","line":125,"column":7,"nodeType":"408","messageId":"409","endLine":125,"endColumn":18},{"ruleId":"406","severity":1,"message":"414","line":3,"column":5,"nodeType":"408","messageId":"409","endLine":3,"endColumn":24},{"ruleId":"406","severity":1,"message":"490","line":4,"column":5,"nodeType":"408","messageId":"409","endLine":4,"endColumn":31},{"ruleId":"406","severity":1,"message":"429","line":10,"column":22,"nodeType":"408","messageId":"409","endLine":10,"endColumn":30},{"ruleId":"406","severity":1,"message":"477","line":5,"column":8,"nodeType":"408","messageId":"409","endLine":5,"endColumn":14},{"ruleId":"406","severity":1,"message":"446","line":9,"column":8,"nodeType":"408","messageId":"409","endLine":9,"endColumn":26},{"ruleId":"406","severity":1,"message":"491","line":11,"column":10,"nodeType":"408","messageId":"409","endLine":11,"endColumn":18},{"ruleId":"448","severity":1,"message":"449","line":77,"column":44,"nodeType":"450","endLine":77,"endColumn":46,"suggestions":"492"},{"ruleId":"406","severity":1,"message":"493","line":79,"column":11,"nodeType":"408","messageId":"409","endLine":79,"endColumn":21},{"ruleId":"406","severity":1,"message":"494","line":106,"column":11,"nodeType":"408","messageId":"409","endLine":106,"endColumn":33},{"ruleId":"406","severity":1,"message":"495","line":295,"column":7,"nodeType":"408","messageId":"409","endLine":295,"endColumn":23},{"ruleId":"406","severity":1,"message":"496","line":379,"column":7,"nodeType":"408","messageId":"409","endLine":379,"endColumn":22},{"ruleId":"406","severity":1,"message":"497","line":386,"column":7,"nodeType":"408","messageId":"409","endLine":386,"endColumn":15},{"ruleId":"406","severity":1,"message":"498","line":456,"column":7,"nodeType":"408","messageId":"409","endLine":456,"endColumn":13},{"ruleId":"406","severity":1,"message":"499","line":517,"column":7,"nodeType":"408","messageId":"409","endLine":517,"endColumn":18},{"ruleId":"406","severity":1,"message":"500","line":559,"column":7,"nodeType":"408","messageId":"409","endLine":559,"endColumn":20},{"ruleId":"406","severity":1,"message":"501","line":648,"column":7,"nodeType":"408","messageId":"409","endLine":648,"endColumn":18},{"ruleId":"406","severity":1,"message":"502","line":3,"column":20,"nodeType":"408","messageId":"409","endLine":3,"endColumn":41},{"ruleId":"406","severity":1,"message":"503","line":4,"column":10,"nodeType":"408","messageId":"409","endLine":4,"endColumn":20},{"ruleId":"406","severity":1,"message":"503","line":4,"column":10,"nodeType":"408","messageId":"409","endLine":4,"endColumn":20},{"ruleId":"406","severity":1,"message":"478","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":18},{"ruleId":"406","severity":1,"message":"445","line":1,"column":20,"nodeType":"408","messageId":"409","endLine":1,"endColumn":34},{"ruleId":"406","severity":1,"message":"475","line":1,"column":36,"nodeType":"408","messageId":"409","endLine":1,"endColumn":46},{"ruleId":"406","severity":1,"message":"418","line":1,"column":48,"nodeType":"408","messageId":"409","endLine":1,"endColumn":57},{"ruleId":"406","severity":1,"message":"429","line":1,"column":59,"nodeType":"408","messageId":"409","endLine":1,"endColumn":67},{"ruleId":"406","severity":1,"message":"504","line":3,"column":16,"nodeType":"408","messageId":"409","endLine":3,"endColumn":24},{"ruleId":"406","severity":1,"message":"476","line":5,"column":8,"nodeType":"408","messageId":"409","endLine":5,"endColumn":19},{"ruleId":"406","severity":1,"message":"504","line":2,"column":10,"nodeType":"408","messageId":"409","endLine":2,"endColumn":18},{"ruleId":"448","severity":1,"message":"505","line":26,"column":9,"nodeType":"450","endLine":26,"endColumn":11,"suggestions":"506"},{"ruleId":"406","severity":1,"message":"472","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":15},{"ruleId":"406","severity":1,"message":"507","line":2,"column":10,"nodeType":"408","messageId":"409","endLine":2,"endColumn":17},{"ruleId":"461","severity":1,"message":"462","line":20,"column":21,"nodeType":"463","endLine":20,"endColumn":53},{"ruleId":"406","severity":1,"message":"418","line":1,"column":48,"nodeType":"408","messageId":"409","endLine":1,"endColumn":57},{"ruleId":"406","severity":1,"message":"464","line":6,"column":10,"nodeType":"408","messageId":"409","endLine":6,"endColumn":14},{"ruleId":"406","severity":1,"message":"508","line":6,"column":16,"nodeType":"408","messageId":"409","endLine":6,"endColumn":26},{"ruleId":"406","severity":1,"message":"419","line":6,"column":28,"nodeType":"408","messageId":"409","endLine":6,"endColumn":39},{"ruleId":"406","severity":1,"message":"509","line":3,"column":10,"nodeType":"408","messageId":"409","endLine":3,"endColumn":18},{"ruleId":"406","severity":1,"message":"491","line":3,"column":20,"nodeType":"408","messageId":"409","endLine":3,"endColumn":28},{"ruleId":"406","severity":1,"message":"429","line":6,"column":10,"nodeType":"408","messageId":"409","endLine":6,"endColumn":18},{"ruleId":"461","severity":1,"message":"462","line":22,"column":74,"nodeType":"463","endLine":22,"endColumn":112},{"ruleId":"448","severity":1,"message":"510","line":62,"column":8,"nodeType":"450","endLine":62,"endColumn":22,"suggestions":"511"},{"ruleId":"406","severity":1,"message":"419","line":2,"column":10,"nodeType":"408","messageId":"409","endLine":2,"endColumn":21},{"ruleId":"448","severity":1,"message":"510","line":41,"column":8,"nodeType":"450","endLine":41,"endColumn":22,"suggestions":"512"},{"ruleId":"406","severity":1,"message":"418","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":19},{"ruleId":"406","severity":1,"message":"429","line":1,"column":21,"nodeType":"408","messageId":"409","endLine":1,"endColumn":29},{"ruleId":"406","severity":1,"message":"509","line":3,"column":10,"nodeType":"408","messageId":"409","endLine":3,"endColumn":18},{"ruleId":"406","severity":1,"message":"513","line":7,"column":10,"nodeType":"408","messageId":"409","endLine":7,"endColumn":23},{"ruleId":"461","severity":1,"message":"462","line":35,"column":17,"nodeType":"463","endLine":35,"endColumn":75},{"ruleId":"406","severity":1,"message":"514","line":1,"column":20,"nodeType":"408","messageId":"409","endLine":1,"endColumn":36},{"ruleId":"448","severity":1,"message":"515","line":27,"column":8,"nodeType":"450","endLine":27,"endColumn":29,"suggestions":"516"},{"ruleId":"406","severity":1,"message":"429","line":1,"column":22,"nodeType":"408","messageId":"409","endLine":1,"endColumn":30},{"ruleId":"406","severity":1,"message":"429","line":1,"column":36,"nodeType":"408","messageId":"409","endLine":1,"endColumn":44},{"ruleId":"406","severity":1,"message":"517","line":2,"column":10,"nodeType":"408","messageId":"409","endLine":2,"endColumn":21},{"ruleId":"406","severity":1,"message":"518","line":2,"column":23,"nodeType":"408","messageId":"409","endLine":2,"endColumn":35},{"ruleId":"406","severity":1,"message":"519","line":2,"column":62,"nodeType":"408","messageId":"409","endLine":2,"endColumn":75},{"ruleId":"406","severity":1,"message":"456","line":55,"column":7,"nodeType":"408","messageId":"409","endLine":55,"endColumn":12},{"ruleId":"448","severity":1,"message":"520","line":49,"column":8,"nodeType":"450","endLine":49,"endColumn":10,"suggestions":"521"},{"ruleId":"406","severity":1,"message":"477","line":5,"column":8,"nodeType":"408","messageId":"409","endLine":5,"endColumn":14},{"ruleId":"448","severity":1,"message":"449","line":61,"column":44,"nodeType":"450","endLine":61,"endColumn":46,"suggestions":"522"},{"ruleId":"406","severity":1,"message":"494","line":105,"column":11,"nodeType":"408","messageId":"409","endLine":105,"endColumn":33},{"ruleId":"406","severity":1,"message":"523","line":182,"column":7,"nodeType":"408","messageId":"409","endLine":182,"endColumn":20},{"ruleId":"406","severity":1,"message":"524","line":196,"column":7,"nodeType":"408","messageId":"409","endLine":196,"endColumn":20},{"ruleId":"406","severity":1,"message":"500","line":201,"column":7,"nodeType":"408","messageId":"409","endLine":201,"endColumn":20},{"ruleId":"406","severity":1,"message":"525","line":205,"column":7,"nodeType":"408","messageId":"409","endLine":205,"endColumn":22},{"ruleId":"406","severity":1,"message":"526","line":213,"column":7,"nodeType":"408","messageId":"409","endLine":213,"endColumn":10},{"ruleId":"406","severity":1,"message":"527","line":217,"column":7,"nodeType":"408","messageId":"409","endLine":217,"endColumn":15},{"ruleId":"406","severity":1,"message":"528","line":224,"column":7,"nodeType":"408","messageId":"409","endLine":224,"endColumn":14},{"ruleId":"406","severity":1,"message":"501","line":249,"column":7,"nodeType":"408","messageId":"409","endLine":249,"endColumn":18},"@typescript-eslint/no-unused-vars","'Data' is defined but never used.","Identifier","unusedVar","'setDarkMode' is assigned a value but never used.","'_' is assigned a value but never used.","'Background' is assigned a value but never used.","'Station' is defined but never used.","'GoogleLoginResponse' is defined but never used.","'binaryToBlobUrl' is assigned a value but never used.","'result' is assigned a value but never used.","'Logout' is defined but never used.","'useEffect' is defined but never used.","'useLocation' is defined but never used.","'AnsweredStationDetails' is defined but never used.","'StationSummary' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'axios' is defined but never used.","'NullStation' is defined but never used.","'NullStationDetails' is defined but never used.","'useState' is defined but never used.","'downloadAssets' is defined but never used.","'getBinaryDigits' is defined but never used.","'populateMarkScheme' is defined but never used.","'populateResponseAudios' is defined but never used.","'Analysis' is defined but never used.","'OSCEPage' is defined but never used.","'OSCESelector' is defined but never used.","'StationSummaryCard' is defined but never used.","'Summary' is defined but never used.","'Header' is defined but never used.","'Header2' is defined but never used.","'Navbar' is defined but never used.","'WhatisGPT3' is defined but never used.","'purchasedOsce' is assigned a value but never used.","'userLoading' is assigned a value but never used.","'SetStateAction' is defined but never used.","'TopicSelectionPage' is defined but never used.","'res' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadQuestions'. Either include it or remove the dependency array.","ArrayExpression",["529"],"'filteredQuestionsByFinding' is assigned a value but never used.","'averagePercentage' is assigned a value but never used.","'Container' is assigned a value but never used.","'Panel' is assigned a value but never used.","'Title' is assigned a value but never used.","'Button' is assigned a value but never used.","no-unused-vars","'ai' is defined but never used.","'Navigator' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'Box' is defined but never used.","'BrowserRouter' is defined but never used.","'mimeTypes' is defined but never used.","React Hook useEffect has a missing dependency: 'loadUserDetails'. Either include it or remove the dependency array.",["530"],"React Hook useEffect has a missing dependency: 'loadSummaries'. Either include it or remove the dependency array.",["531"],"'props' is defined but never used.","'Sketch' is defined but never used.","'p5Types' is defined but never used.","'useContext' is defined but never used.","'MetaContext' is defined but never used.","'pneumo' is defined but never used.","'Dispatch' is defined but never used.","'token' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'keyframes' is defined but never used.","'FaSpinner' is defined but never used.","'SubscribePanel' is defined but never used.","'StartOrReview' is assigned a value but never used.","'LogoTitle' is assigned a value but never used.","'LoginButton' is assigned a value but never used.","'GoogleLoginResponseOffline' is defined but never used.","'Question' is defined but never used.",["532"],"'categories' is assigned a value but never used.","'handleStartButtonClick' is assigned a value but never used.","'SubcategoryTitle' is assigned a value but never used.","'NavbarContainer' is assigned a value but never used.","'ListItem' is assigned a value but never used.","'Select' is assigned a value but never used.","'TitleButton' is assigned a value but never used.","'CategoryPanel' is assigned a value but never used.","'StartButton' is assigned a value but never used.","'startAudioRecordingId' is defined but never used.","'Transition' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has missing dependencies: 'props' and 'secondTicker'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["533"],"'FaTimes' is defined but never used.","'useHistory' is defined but never used.","'promptId' is defined but never used.","React Hook useEffect has missing dependencies: 'getPromptAudio' and 'stopEverything'. Either include them or remove the dependency array.",["534"],["535"],"'useWindowSize' is defined but never used.","'MutableRefObject' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["536"],"'FaCaretDown' is defined but never used.","'FaCaretRight' is defined but never used.","'FaTimesCircle' is defined but never used.","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["537"],["538"],"'FindingOption' is assigned a value but never used.","'CategoryTitle' is assigned a value but never used.","'QuestionSummary' is assigned a value but never used.","'Img' is assigned a value but never used.","'Features' is assigned a value but never used.","'Content' is assigned a value but never used.",{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"539","fix":"545"},{"desc":"546","fix":"547"},{"desc":"548","fix":"549"},{"desc":"548","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"539","fix":"555"},"Update the dependencies array to be: [loadQuestions]",{"range":"556","text":"557"},"Update the dependencies array to be: [loadUserDetails, token]",{"range":"558","text":"559"},"Update the dependencies array to be: [loadSummaries]",{"range":"560","text":"561"},{"range":"562","text":"557"},"Update the dependencies array to be: [props, secondTicker]",{"range":"563","text":"564"},"Update the dependencies array to be: [getPromptAudio, props.active, stopEverything]",{"range":"565","text":"566"},{"range":"567","text":"566"},"Update the dependencies array to be: [props, props.responseAudio]",{"range":"568","text":"569"},"Update the dependencies array to be: [handleClick]",{"range":"570","text":"571"},{"range":"572","text":"557"},[1143,1145],"[loadQuestions]",[7801,7808],"[loadUserDetails, token]",[8749,8751],"[loadSummaries]",[2813,2815],[911,913],"[props, secondTicker]",[2190,2204],"[getPromptAudio, props.active, stopEverything]",[1447,1461],[1051,1072],"[props, props.responseAudio]",[1961,1963],"[handleClick]",[2203,2205]]