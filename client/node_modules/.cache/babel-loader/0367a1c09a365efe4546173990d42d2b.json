{"ast":null,"code":"import _classCallCheck from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nexport var createMediaRecorderConstructor = function createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, eventTargetConstructor, nativeMediaRecorderConstructor) {\n  return /*#__PURE__*/function (_eventTargetConstruct) {\n    _inherits(MediaRecorder, _eventTargetConstruct);\n\n    var _super = _createSuper(MediaRecorder);\n\n    function MediaRecorder(stream) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, MediaRecorder);\n\n      var mimeType = options.mimeType;\n\n      if (nativeMediaRecorderConstructor !== null && ( // Bug #10: Safari does not yet implement the isTypeSupported() method.\n      mimeType === undefined || nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported(mimeType))) {\n        var internalMediaRecorder = createNativeMediaRecorder(nativeMediaRecorderConstructor, stream, options);\n        _this = _super.call(this, internalMediaRecorder);\n        _this._internalMediaRecorder = internalMediaRecorder;\n      } else if (mimeType !== undefined && encoderRegexes.some(function (regex) {\n        return regex.test(mimeType);\n      })) {\n        _this = _super.call(this); // Bug #10: Safari does not yet implement the isTypeSupported() method.\n\n        if (nativeMediaRecorderConstructor !== null && nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported('audio/webm;codecs=pcm')) {\n          _this._internalMediaRecorder = createWebmPcmMediaRecorder(_assertThisInitialized(_this), nativeMediaRecorderConstructor, stream, mimeType);\n        } else {\n          _this._internalMediaRecorder = createWebAudioMediaRecorder(_assertThisInitialized(_this), stream, mimeType);\n        }\n      } else {\n        // This is creating a native MediaRecorder just to provoke it to throw an error.\n        if (nativeMediaRecorderConstructor !== null) {\n          createNativeMediaRecorder(nativeMediaRecorderConstructor, stream, options);\n        }\n\n        throw createNotSupportedError();\n      }\n\n      _this._ondataavailable = null;\n      _this._onerror = null;\n      _this._onpause = null;\n      _this._onresume = null;\n      _this._onstart = null;\n      _this._onstop = null;\n      return _possibleConstructorReturn(_this);\n    }\n\n    _createClass(MediaRecorder, [{\n      key: \"mimeType\",\n      get: function get() {\n        return this._internalMediaRecorder.mimeType;\n      }\n    }, {\n      key: \"ondataavailable\",\n      get: function get() {\n        return this._ondataavailable === null ? this._ondataavailable : this._ondataavailable[0];\n      },\n      set: function set(value) {\n        if (this._ondataavailable !== null) {\n          this.removeEventListener('dataavailable', this._ondataavailable[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('dataavailable', boundListener);\n          this._ondataavailable = [value, boundListener];\n        } else {\n          this._ondataavailable = null;\n        }\n      }\n    }, {\n      key: \"onerror\",\n      get: function get() {\n        return this._onerror === null ? this._onerror : this._onerror[0];\n      },\n      set: function set(value) {\n        if (this._onerror !== null) {\n          this.removeEventListener('error', this._onerror[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('error', boundListener);\n          this._onerror = [value, boundListener];\n        } else {\n          this._onerror = null;\n        }\n      }\n    }, {\n      key: \"onpause\",\n      get: function get() {\n        return this._onpause === null ? this._onpause : this._onpause[0];\n      },\n      set: function set(value) {\n        if (this._onpause !== null) {\n          this.removeEventListener('pause', this._onpause[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('pause', boundListener);\n          this._onpause = [value, boundListener];\n        } else {\n          this._onpause = null;\n        }\n      }\n    }, {\n      key: \"onresume\",\n      get: function get() {\n        return this._onresume === null ? this._onresume : this._onresume[0];\n      },\n      set: function set(value) {\n        if (this._onresume !== null) {\n          this.removeEventListener('resume', this._onresume[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('resume', boundListener);\n          this._onresume = [value, boundListener];\n        } else {\n          this._onresume = null;\n        }\n      }\n    }, {\n      key: \"onstart\",\n      get: function get() {\n        return this._onstart === null ? this._onstart : this._onstart[0];\n      },\n      set: function set(value) {\n        if (this._onstart !== null) {\n          this.removeEventListener('start', this._onstart[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('start', boundListener);\n          this._onstart = [value, boundListener];\n        } else {\n          this._onstart = null;\n        }\n      }\n    }, {\n      key: \"onstop\",\n      get: function get() {\n        return this._onstop === null ? this._onstop : this._onstop[0];\n      },\n      set: function set(value) {\n        if (this._onstop !== null) {\n          this.removeEventListener('stop', this._onstop[1]);\n        }\n\n        if (typeof value === 'function') {\n          var boundListener = value.bind(this);\n          this.addEventListener('stop', boundListener);\n          this._onstop = [value, boundListener];\n        } else {\n          this._onstop = null;\n        }\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._internalMediaRecorder.state;\n      }\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        return this._internalMediaRecorder.pause();\n      }\n    }, {\n      key: \"resume\",\n      value: function resume() {\n        return this._internalMediaRecorder.resume();\n      }\n    }, {\n      key: \"start\",\n      value: function start(timeslice) {\n        return this._internalMediaRecorder.start(timeslice);\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        return this._internalMediaRecorder.stop();\n      }\n    }], [{\n      key: \"isTypeSupported\",\n      value: function isTypeSupported(mimeType) {\n        return nativeMediaRecorderConstructor !== null && // Bug #10: Safari does not yet implement the isTypeSupported() method.\n        nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported(mimeType) || encoderRegexes.some(function (regex) {\n          return regex.test(mimeType);\n        });\n      }\n    }]);\n\n    return MediaRecorder;\n  }(eventTargetConstructor);\n};","map":null,"metadata":{},"sourceType":"module"}