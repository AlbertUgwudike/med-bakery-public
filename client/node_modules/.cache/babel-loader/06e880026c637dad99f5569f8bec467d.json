{"ast":null,"code":"import axios from \"axios\"; // Add a response interceptor\n\naxios.interceptors.response.use(function (res) {\n  if (res.data.error === \"-- email extraction failed --\") {\n    window.location.href = \"/ExpiryLogin\";\n    throw \"token expired, redirect to signout page\";\n  }\n\n  return res;\n}, function (error) {\n  // Do something with response error\n  return Promise.reject(error);\n});\nvar myaxios = {\n  post: function post(url, data) {\n    return axios({\n      method: \"POST\",\n      url: url,\n      data: data,\n      maxBodyLength: Infinity,\n      maxContentLength: Infinity\n    });\n  },\n  get: function get(url) {\n    return axios({\n      method: \"GET\",\n      url: url,\n      maxBodyLength: Infinity,\n      maxContentLength: Infinity\n    });\n  }\n};\nexport default myaxios;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/myaxios.ts"],"names":["axios","interceptors","response","use","res","data","error","window","location","href","Promise","reject","myaxios","post","url","method","maxBodyLength","Infinity","maxContentLength","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACI,UAAAC,GAAG,EAAI;AACH,MAAIA,GAAG,CAACC,IAAJ,CAASC,KAAT,KAAmB,+BAAvB,EAAwD;AACpDC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,cAAvB;AACA,UAAM,yCAAN;AACH;;AACD,SAAOL,GAAP;AACH,CAPL,EAQI,UAAAE,KAAK,EAAI;AACL;AACA,SAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACH,CAXL;AAcA,IAAMM,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,cAACC,GAAD,EAAcT,IAAd,EAA4B;AAC9B,WAAOL,KAAK,CAAC;AACTe,MAAAA,MAAM,EAAE,MADC;AAETD,MAAAA,GAAG,EAAHA,GAFS;AAGTT,MAAAA,IAAI,EAAJA,IAHS;AAITW,MAAAA,aAAa,EAAEC,QAJN;AAKTC,MAAAA,gBAAgB,EAAED;AALT,KAAD,CAAZ;AAOH,GATW;AAUZE,EAAAA,GAAG,EAAE,aAACL,GAAD,EAAiB;AAClB,WAAOd,KAAK,CAAC;AAAEe,MAAAA,MAAM,EAAE,KAAV;AAAiBD,MAAAA,GAAG,EAAHA,GAAjB;AAAsBE,MAAAA,aAAa,EAAEC,QAArC;AAA+CC,MAAAA,gBAAgB,EAAED;AAAjE,KAAD,CAAZ;AACH;AAZW,CAAhB;AAeA,eAAeL,OAAf","sourcesContent":["import axios from \"axios\";\n\n// Add a response interceptor\naxios.interceptors.response.use(\n    res => {\n        if (res.data.error === \"-- email extraction failed --\") {\n            window.location.href = \"/ExpiryLogin\";\n            throw \"token expired, redirect to signout page\";\n        }\n        return res;\n    },\n    error => {\n        // Do something with response error\n        return Promise.reject(error);\n    }\n);\n\nconst myaxios = {\n    post: (url: string, data: any) => {\n        return axios({\n            method: \"POST\",\n            url,\n            data,\n            maxBodyLength: Infinity,\n            maxContentLength: Infinity,\n        });\n    },\n    get: (url: string) => {\n        return axios({ method: \"GET\", url, maxBodyLength: Infinity, maxContentLength: Infinity });\n    },\n};\n\nexport default myaxios;\n"]},"metadata":{},"sourceType":"module"}