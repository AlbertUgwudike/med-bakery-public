{"ast":null,"code":"export var createMidiInputs = function createMidiInputs(wrapSubscribeFunction) {\n  return function (midiAccess) {\n    return wrapSubscribeFunction(function (observer) {\n      var midiInputs = Array.from(midiAccess.inputs.values());\n\n      var emitMidiInputs = function emitMidiInputs() {\n        var midiAccessInputs = midiAccess.inputs;\n\n        if (midiInputs.length !== midiAccessInputs.size || midiInputs.some(function (_ref) {\n          var id = _ref.id;\n          return !midiAccessInputs.has(id);\n        })) {\n          midiInputs = Array.from(midiAccessInputs.values());\n          observer.next(midiInputs);\n        }\n      };\n\n      observer.next(midiInputs);\n      midiAccess.addEventListener('statechange', emitMidiInputs);\n      return function () {\n        return midiAccess.removeEventListener('statechange', emitMidiInputs);\n      };\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/midi-inputs.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,gBAAgB,GAAuB,SAAvC,gBAAuC,CAAC,qBAAD,EAA0B;AAC1E,SAAO,UAAC,UAAD;AAAA,WACH,qBAAqB,CAAC,UAAC,QAAD,EAAa;AAC/B,UAAI,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,UAAU,CAAC,MAAX,CAAkB,MAAlB,EAAX,CAAjB;;AAEA,UAAM,cAAc,GAAG,SAAjB,cAAiB,GAAK;AACxB,YAAM,gBAAgB,GAAG,UAAU,CAAC,MAApC;;AAEA,YAAI,UAAU,CAAC,MAAX,KAAsB,gBAAgB,CAAC,IAAvC,IAA+C,UAAU,CAAC,IAAX,CAAgB;AAAA,cAAG,EAAH,QAAG,EAAH;AAAA,iBAAY,CAAC,gBAAgB,CAAC,GAAjB,CAAqB,EAArB,CAAb;AAAA,SAAhB,CAAnD,EAA2G;AACvG,UAAA,UAAU,GAAG,KAAK,CAAC,IAAN,CAAW,gBAAgB,CAAC,MAAjB,EAAX,CAAb;AAEA,UAAA,QAAQ,CAAC,IAAT,CAAc,UAAd;AACH;AACJ,OARD;;AAUA,MAAA,QAAQ,CAAC,IAAT,CAAc,UAAd;AACA,MAAA,UAAU,CAAC,gBAAX,CAA4B,aAA5B,EAA2C,cAA3C;AAEA,aAAO;AAAA,eAAM,UAAU,CAAC,mBAAX,CAA+B,aAA/B,EAA8C,cAA9C,CAAN;AAAA,OAAP;AACH,KAjBoB,CADlB;AAAA,GAAP;AAmBH,CApBM","sourceRoot":"","sourcesContent":["export const createMidiInputs = (wrapSubscribeFunction) => {\n    return (midiAccess) => wrapSubscribeFunction((observer) => {\n        let midiInputs = Array.from(midiAccess.inputs.values());\n        const emitMidiInputs = () => {\n            const midiAccessInputs = midiAccess.inputs;\n            if (midiInputs.length !== midiAccessInputs.size || midiInputs.some(({ id }) => !midiAccessInputs.has(id))) {\n                midiInputs = Array.from(midiAccessInputs.values());\n                observer.next(midiInputs);\n            }\n        };\n        observer.next(midiInputs);\n        midiAccess.addEventListener('statechange', emitMidiInputs);\n        return () => midiAccess.removeEventListener('statechange', emitMidiInputs);\n    });\n};\n//# sourceMappingURL=midi-inputs.js.map"]},"metadata":{},"sourceType":"module"}