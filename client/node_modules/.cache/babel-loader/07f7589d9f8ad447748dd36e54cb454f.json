{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject,_templateObject2;import{useContext,useState,useEffect}from\"react\";import styled from\"styled-components\";import MetaContext from\"../../../MetaContext\";import{Box}from\"../Common\";import QuestionPrompt from\"../QuestionPrompt\";import{promptId,responseId}from\"../types\";import MarkScheme from\"./MarkScheme\";import WaveSurferReview from\"./WaveSurferReview\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var QuestionReviewContent=function QuestionReviewContent(props){var _useContext=useContext(MetaContext),narrowWindow=_useContext.narrowWindow;var _useState=useState(),_useState2=_slicedToArray(_useState,2),waveSurfer=_useState2[0],updateWaveSurfer=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),showMarkScheme=_useState4[0],updateShowMarkScheme=_useState4[1];var getPromptAudio=function getPromptAudio(){return document.getElementById(promptId+props.questionIdx);};var stopEverything=function stopEverything(){var _getPromptAudio;(_getPromptAudio=getPromptAudio())===null||_getPromptAudio===void 0?void 0:_getPromptAudio.pause();waveSurfer===null||waveSurfer===void 0?void 0:waveSurfer.stop();};var _play=function play(id){var _getPromptAudio2;stopEverything();if(id===promptId)(_getPromptAudio2=getPromptAudio())===null||_getPromptAudio2===void 0?void 0:_getPromptAudio2.play();else waveSurfer===null||waveSurfer===void 0?void 0:waveSurfer.play();};useEffect(function(){var _getPromptAudio3;getPromptAudio().currentTime=0;props.active?(_getPromptAudio3=getPromptAudio())===null||_getPromptAudio3===void 0?void 0:_getPromptAudio3.play():stopEverything();},[props.active]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{gridRowStart:2,gridColumnStart:1,height:\"60vh\",transition:\"transform \".concat(500,\"ms\")},children:[/*#__PURE__*/_jsx(QuestionPrompt,{question:props.question,toggle:function toggle(){var _getPromptAudio4;!((_getPromptAudio4=getPromptAudio())===null||_getPromptAudio4===void 0?void 0:_getPromptAudio4.paused)?stopEverything():_play(promptId);},promptId:promptId+props.questionIdx}),/*#__PURE__*/_jsx(Box,{style:{display:\"flex\",alignItems:\"center\",height:\"49vh\"},children:showMarkScheme?/*#__PURE__*/_jsx(Img,{src:props.question.img,narrowWindow:narrowWindow}):/*#__PURE__*/_jsx(MarkScheme,{markScheme:props.question.markScheme,questionIdx:props.questionIdx,updateStation:props.updateStation,reviewMode:props.reviewMode})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{gridRowStart:4,gridColumnStart:1,zIndex:700,backgroundColor:\"#\",height:\"15vh\"},children:[/*#__PURE__*/_jsx(SchemeToggle,{narrowWindow:narrowWindow,onClick:function onClick(){return updateShowMarkScheme(!showMarkScheme);},children:showMarkScheme?\"Mark Scheme\":\"Show Station\"}),/*#__PURE__*/_jsx(WaveSurferReview,{stopEverything:stopEverything,play:function play(){return _play(responseId);},exemplarAudio:props.question.exemplarAudio,responseAudio:props.question.responseAudio,updateWaveSurfer:updateWaveSurfer,questionIdx:props.questionIdx})]})]});};export default QuestionReviewContent;var Img=styled.img(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    max-width: 100%;\\n    max-height: 100%;\\n    transition: width 0.2s;\\n\"])));var SchemeToggle=styled.button(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    background-color: #031B34;\\n    border-radius: 5px;\\n    height: 30px;\\n    align-content: center;\\n    width: 100%;\\n    margin-top: 10px;\\n    border: 1px solid #414142;\\n    color: #fad000;\\n    font-size: \",\";\\n\"])),function(props){return props.narrowWindow?\"12px\":\"15px\";});","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewContent.tsx"],"names":["useContext","useState","useEffect","styled","MetaContext","Box","QuestionPrompt","promptId","responseId","MarkScheme","WaveSurferReview","QuestionReviewContent","props","narrowWindow","waveSurfer","updateWaveSurfer","showMarkScheme","updateShowMarkScheme","getPromptAudio","document","getElementById","questionIdx","stopEverything","pause","stop","play","id","currentTime","active","gridRowStart","gridColumnStart","height","transition","question","paused","display","alignItems","img","markScheme","updateStation","reviewMode","zIndex","backgroundColor","exemplarAudio","responseAudio","Img","SchemeToggle","button"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect, Dispatch, SetStateAction } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../../MetaContext\";\nimport { Box } from \"../Common\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport { Question, promptId, responseId, Station } from \"../types\";\nimport MarkScheme from \"./MarkScheme\";\nimport WaveSurferReview from \"./WaveSurferReview\";\n\ntype QuestionReviewContentProps = {\n    question: Question;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    reviewMode: boolean;\n    active: boolean;\n};\n\nconst QuestionReviewContent = (props: QuestionReviewContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n    const [waveSurfer, updateWaveSurfer] = useState<WaveSurfer | undefined>();\n    const [showMarkScheme, updateShowMarkScheme] = useState(true);\n\n    const getPromptAudio = () =>\n        document.getElementById(promptId + props.questionIdx) as HTMLAudioElement | null;\n\n    const stopEverything = () => {\n        getPromptAudio()?.pause();\n        waveSurfer?.stop();\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        if (id === promptId) getPromptAudio()?.play();\n        else waveSurfer?.play();\n    };\n\n    useEffect(() => {\n        getPromptAudio()!.currentTime = 0;\n        props.active ? getPromptAudio()?.play() : stopEverything();\n    }, [props.active]);\n\n    return (\n        <>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"60vh\",\n                    transition: `transform ${500}ms`,\n                }}\n            >\n                <QuestionPrompt\n                    question={props.question}\n                    toggle={() => {\n                        !getPromptAudio()?.paused ? stopEverything() : play(promptId);\n                    }}\n                    promptId={promptId + props.questionIdx}\n                />\n                <Box\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        height: \"49vh\",\n                    }}\n                >\n                    {showMarkScheme ? (\n                        <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    ) : (\n                        <MarkScheme\n                            markScheme={props.question.markScheme}\n                            questionIdx={props.questionIdx}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                        />\n                    )}\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 4,\n                    gridColumnStart: 1,\n                    zIndex: 700,\n                    backgroundColor: \"#\",\n                    height: \"15vh\",\n                }}\n            >\n                <SchemeToggle\n                    narrowWindow={narrowWindow}\n                    onClick={() => updateShowMarkScheme(!showMarkScheme)}\n                >\n                    {showMarkScheme ? \"Mark Scheme\" : \"Show Station\"}\n                </SchemeToggle>\n                <WaveSurferReview\n                    stopEverything={stopEverything}\n                    play={() => play(responseId)}\n                    exemplarAudio={props.question.exemplarAudio}\n                    responseAudio={props.question.responseAudio}\n                    updateWaveSurfer={updateWaveSurfer}\n                    questionIdx={props.questionIdx}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default QuestionReviewContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    max-width: 100%;\n    max-height: 100%;\n    transition: width 0.2s;\n`;\n\nconst SchemeToggle = styled.button<{ narrowWindow: boolean }>`\n    background-color: #031B34;\n    border-radius: 5px;\n    height: 30px;\n    align-content: center;\n    width: 100%;\n    margin-top: 10px;\n    border: 1px solid #414142;\n    color: #fad000;\n    font-size: ${props => (props.narrowWindow ? \"12px\" : \"15px\")};\n`;\n"]},"metadata":{},"sourceType":"module"}