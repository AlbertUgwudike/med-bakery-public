{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionProgress.tsx\",\n    _s = $RefreshSig$();\n\nimport ProgressPie from './ProgressPie';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa';\nimport { useWindowSize } from '../../functions';\nimport QuestionSectionSelector from './QuestionSectionSelector';\nimport { Panel } from '../General/Panel';\nimport { useContext } from 'react';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionProgress = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const [width, height] = useWindowSize();\n  const narrowWindow = width < 800;\n\n  const progress = () => props.updateQuestionIdx(i => props.canRetreatQuestion ? i - 1 : i);\n\n  const retreat = () => props.updateQuestionIdx(i => props.canProgressQuestion ? i + 1 : i);\n\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    darkMode: darkMode,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: narrowWindow ? \"block\" : \"inline-block\",\n        textAlign: narrowWindow ? \"center\" : \"left\",\n        position: 'relative',\n        top: narrowWindow ? \"0\" : \"75px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(QuestionSwitcher, {\n        onClick: progress,\n        children: [\" \", /*#__PURE__*/_jsxDEV(FaArrowLeft, {\n          color: darkMode ? \"white\" : \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 59\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), props.questionIdx + 1, \" / \", props.questionCount, /*#__PURE__*/_jsxDEV(QuestionSwitcher, {\n        onClick: retreat,\n        children: [\" \", /*#__PURE__*/_jsxDEV(FaArrowRight, {\n          color: darkMode ? \"white\" : \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 58\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: props.reviewMode ? \"/User/Finals/LastSession\" : \"/User/Finals\",\n        children: /*#__PURE__*/_jsxDEV(FinishButton, {\n          darkMode: darkMode,\n          onClick: props.finishSession,\n          children: \"Finish Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: narrowWindow ? {\n        display: \"block\",\n        textAlign: \"center\"\n      } : {\n        display: \"inlilne-block\",\n        position: \"relative\",\n        left: \"50%\",\n        width: \"max-content\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: narrowWindow ? \"auto\" : \"-72px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ProgressPie, {\n          sectionCount: props.sectionCount,\n          sectionIdx: props.sectionIdx,\n          pieRadius: 50,\n          darkMode: darkMode,\n          questionIdx: props.questionIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionSectionSelector, {\n      sectionIdx: props.sectionIdx,\n      updateSectionIdx: props.updateSectionIdx,\n      currentQuestion: props.currentQuestion,\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionProgress, \"PY28zSo3rhs4vc22NMTG/3hddkI=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = QuestionProgress;\nexport default QuestionProgress;\nconst QuestionSwitcher = styled.button`\n    color: white;\n    border: none;\n    background-color: transparent;\n    font: bold 20px sans-serif;\n`;\n_c2 = QuestionSwitcher;\nconst FinishButton = styled.button`\n    background-color: ${props => props.darkMode ? \"#0D163C\" : \"#FFF4F7\"};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    border: none;\n    border-radius: 5px;\n    margin-left: 20px;\n`;\n_c3 = FinishButton;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"QuestionProgress\");\n$RefreshReg$(_c2, \"QuestionSwitcher\");\n$RefreshReg$(_c3, \"FinishButton\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionProgress.tsx"],"names":["ProgressPie","Link","styled","FaArrowLeft","FaArrowRight","useWindowSize","QuestionSectionSelector","Panel","useContext","MetaContext","QuestionProgress","props","darkMode","width","height","narrowWindow","progress","updateQuestionIdx","i","canRetreatQuestion","retreat","canProgressQuestion","display","textAlign","position","top","questionIdx","questionCount","reviewMode","finishSession","left","marginLeft","sectionCount","sectionIdx","updateSectionIdx","currentQuestion","QuestionSwitcher","button","FinishButton"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;;AAgBA,MAAMC,gBAAgB,GAAIC,KAAD,IAAkC;AAAA;;AAEvD,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,UAAU,CAACC,WAAD,CAA/B;AACA,QAAM,CAACI,KAAD,EAAQC,MAAR,IAAkBT,aAAa,EAArC;AACA,QAAMU,YAAY,GAAGF,KAAK,GAAG,GAA7B;;AAEA,QAAMG,QAAQ,GAAG,MAAML,KAAK,CAACM,iBAAN,CAAwBC,CAAC,IAAIP,KAAK,CAACQ,kBAAN,GAA2BD,CAAC,GAAG,CAA/B,GAAmCA,CAAhE,CAAvB;;AACA,QAAME,OAAO,GAAG,MAAMT,KAAK,CAACM,iBAAN,CAAwBC,CAAC,IAAIP,KAAK,CAACU,mBAAN,GAA4BH,CAAC,GAAG,CAAhC,GAAoCA,CAAjE,CAAtB;;AAEA,sBACI,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAKN,QAApB;AAAA,4BAEI;AAAK,MAAA,KAAK,EAAI;AAAEU,QAAAA,OAAO,EAAEP,YAAY,GAAG,OAAH,GAAa,cAApC;AAAoDQ,QAAAA,SAAS,EAAER,YAAY,GAAG,QAAH,GAAc,MAAzF;AAAiGS,QAAAA,QAAQ,EAAE,UAA3G;AAAuHC,QAAAA,GAAG,EAAEV,YAAY,GAAG,GAAH,GAAS;AAAjJ,OAAd;AAAA,8BAEI,QAAC,gBAAD;AAAkB,QAAA,OAAO,EAAKC,QAA9B;AAAA,qCAA0C,QAAC,WAAD;AAAa,UAAA,KAAK,EAAKJ,QAAQ,GAAG,OAAH,GAAa;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGSD,KAAK,CAACe,WAAN,GAAoB,CAH7B,SAGoCf,KAAK,CAACgB,aAH1C,eAII,QAAC,gBAAD;AAAkB,QAAA,OAAO,EAAKP,OAA9B;AAAA,qCAAyC,QAAC,YAAD;AAAc,UAAA,KAAK,EAAKR,QAAQ,GAAG,OAAH,GAAa;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAKD,KAAK,CAACiB,UAAN,GAAmB,0BAAnB,GAAgD,cAA7D;AAAA,+BACI,QAAC,YAAD;AAAc,UAAA,QAAQ,EAAKhB,QAA3B;AAAsC,UAAA,OAAO,EAAKD,KAAK,CAACkB,aAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAgBI;AAAM,MAAA,KAAK,EACPd,YAAY,GACN;AAAEO,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,SAAS,EAAE;AAA/B,OADM,GAEN;AAAED,QAAAA,OAAO,EAAE,eAAX;AAA4BE,QAAAA,QAAQ,EAAE,UAAtC;AAAkDM,QAAAA,IAAI,EAAE,KAAxD;AAA+DjB,QAAAA,KAAK,EAAE;AAAtE,OAHV;AAAA,6BAMI;AAAK,QAAA,KAAK,EAAI;AAAEkB,UAAAA,UAAU,EAAEhB,YAAY,GAAG,MAAH,GAAY;AAAtC,SAAd;AAAA,+BACI,QAAC,WAAD;AACI,UAAA,YAAY,EAAKJ,KAAK,CAACqB,YAD3B;AAEI,UAAA,UAAU,EAAKrB,KAAK,CAACsB,UAFzB;AAGI,UAAA,SAAS,EAAK,EAHlB;AAII,UAAA,QAAQ,EAAIrB,QAJhB;AAKI,UAAA,WAAW,EAAKD,KAAK,CAACe;AAL1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAkCI,QAAC,uBAAD;AACI,MAAA,UAAU,EAAKf,KAAK,CAACsB,UADzB;AAEI,MAAA,gBAAgB,EAAKtB,KAAK,CAACuB,gBAF/B;AAGI,MAAA,eAAe,EAAKvB,KAAK,CAACwB,eAH9B;AAII,MAAA,QAAQ,EAAKvB;AAJjB;AAAA;AAAA;AAAA;AAAA,YAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA6CH,CAtDD;;GAAMF,gB;UAGsBL,a;;;KAHtBK,gB;AAwDN,eAAeA,gBAAf;AAEA,MAAM0B,gBAAgB,GAAGlC,MAAM,CAACmC,MAAO;AACvC;AACA;AACA;AACA;AACA,CALA;MAAMD,gB;AAON,MAAME,YAAY,GAAGpC,MAAM,CAACmC,MAA8B;AAC1D,wBAAyB1B,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,SAAjB,GAA6B,SAAW;AAC1E,aAAcD,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,OAAjB,GAA2B,OAAS;AAC3D;AACA;AACA;AACA,CANA;MAAM0B,Y","sourcesContent":["import ProgressPie from './ProgressPie';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { FaArrowLeft, FaArrowRight } from 'react-icons/fa';\nimport { useWindowSize } from '../../functions';\nimport QuestionSectionSelector from './QuestionSectionSelector';\nimport { FinalsQuestion } from '../../types';\nimport { Panel } from '../General/Panel';\nimport { useContext } from 'react';\nimport MetaContext from '../../MetaContext';\n\ntype QuestionProgressProps = {\n    questionIdx: number;\n    questionCount: number;\n    sectionIdx: number;\n    sectionCount: number;\n    updateQuestionIdx: React.Dispatch<React.SetStateAction<number>>;\n    updateSectionIdx: React.Dispatch<React.SetStateAction<number>>; \n    canProgressQuestion: boolean;\n    canRetreatQuestion: boolean;\n    currentQuestion: FinalsQuestion;\n    finishSession: () => void;\n    reviewMode: boolean;\n}\n\nconst QuestionProgress = (props: QuestionProgressProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n    const [width, height] = useWindowSize();\n    const narrowWindow = width < 800;\n\n    const progress = () => props.updateQuestionIdx(i => props.canRetreatQuestion ? i - 1 : i);\n    const retreat = () => props.updateQuestionIdx(i => props.canProgressQuestion ? i + 1 : i);\n\n    return (\n        <Panel darkMode = { darkMode }>\n\n            <div style = {{ display: narrowWindow ? \"block\" : \"inline-block\", textAlign: narrowWindow ? \"center\" : \"left\", position: 'relative', top: narrowWindow ? \"0\" : \"75px\" }}>\n\n                <QuestionSwitcher onClick = { progress }> <FaArrowLeft color = { darkMode ? \"white\" : \"black\" } /> </QuestionSwitcher>\n                    {props.questionIdx + 1} / { props.questionCount }\n                <QuestionSwitcher onClick = { retreat }> <FaArrowRight color = { darkMode ? \"white\" : \"black\" } /> </QuestionSwitcher>\n\n                <Link to = { props.reviewMode ? \"/User/Finals/LastSession\" : \"/User/Finals\"} >\n                    <FinishButton darkMode = { darkMode } onClick = { props.finishSession }>\n                        Finish Session\n                    </FinishButton>\n                </Link>\n\n            </div>\n\n            <div  style = { \n                narrowWindow\n                    ? { display: \"block\", textAlign: \"center\"  }\n                    : { display: \"inlilne-block\", position: \"relative\", left: \"50%\", width: \"max-content\"}\n            }>\n\n                <div style = {{ marginLeft: narrowWindow ? \"auto\" : \"-72px\"}}>\n                    <ProgressPie \n                        sectionCount = { props.sectionCount } \n                        sectionIdx = { props.sectionIdx } \n                        pieRadius = { 50 }\n                        darkMode ={ darkMode }\n                        questionIdx = { props.questionIdx }\n                    /> \n                </div>\n\n            </div>\n\n            <QuestionSectionSelector \n                sectionIdx = { props.sectionIdx } \n                updateSectionIdx = { props.updateSectionIdx } \n                currentQuestion = { props.currentQuestion }\n                darkMode = { darkMode }\n            />\n\n            \n        </Panel>\n    );\n}\n\nexport default QuestionProgress;\n\nconst QuestionSwitcher = styled.button`\n    color: white;\n    border: none;\n    background-color: transparent;\n    font: bold 20px sans-serif;\n`;\n\nconst FinishButton = styled.button<{ darkMode: boolean }>`\n    background-color: ${ props => props.darkMode ? \"#0D163C\" : \"#FFF4F7\" };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    border: none;\n    border-radius: 5px;\n    margin-left: 20px;\n`;"]},"metadata":{},"sourceType":"module"}