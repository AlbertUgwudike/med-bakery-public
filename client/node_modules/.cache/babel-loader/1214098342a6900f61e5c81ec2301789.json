{"ast":null,"code":"const sampleCount = 5000;\nconst [quaterSC, halfSC, threeQuaterSC] = [0.25, 0.5, 0.75].map(f => Math.floor(sampleCount * f));\nconst canvasHeight = 350;\nconst canvasWidth = 1000;\nconst isoelectrics = [50, 125, 200, 275];\nconst labelX = [10, 260, 510, 760];\nconst labelY = isoelectrics.map(iso => iso - 15); // This takes ages if you try to do it with every render\n\nconst determineNoise = (arr, _, idx) => {\n  if (idx === 0) return [[0, false]];\n  const prevNoise = arr[idx - 1][0];\n  const nextNoise = prevNoise + 0.4 * (Math.random() - 0.5) - (Math.random() * 0.0099 + 0.001) * prevNoise;\n  return arr.concat([[nextNoise, false]]);\n};\n\nconst noisySignal = Array(sampleCount).fill(0).reduce(determineNoise, []);\nexport const constants = {\n  sampleCount: sampleCount,\n  canvasHeight: canvasHeight,\n  canvasWidth: canvasWidth,\n  scaleFactor: canvasWidth / sampleCount,\n  isoelectrics: isoelectrics,\n  noisySignal: noisySignal,\n  leadConstants: [{\n    lead: \"I\",\n    startIdx: 0,\n    sampleCount: quaterSC,\n    row: 0,\n    phase: 0,\n    labelPos: {\n      x: labelX[0],\n      y: labelY[0]\n    }\n  }, {\n    lead: \"II\",\n    startIdx: 0,\n    sampleCount: quaterSC,\n    row: 1,\n    phase: 60,\n    labelPos: {\n      x: labelX[0],\n      y: labelY[1]\n    }\n  }, {\n    lead: \"III\",\n    startIdx: 0,\n    sampleCount: quaterSC,\n    row: 2,\n    phase: 120,\n    labelPos: {\n      x: labelX[0],\n      y: labelY[2]\n    }\n  }, {\n    lead: \"aVR\",\n    startIdx: quaterSC,\n    sampleCount: quaterSC,\n    row: 0,\n    phase: -150,\n    labelPos: {\n      x: labelX[1],\n      y: labelY[0]\n    }\n  }, {\n    lead: \"aVL\",\n    startIdx: quaterSC,\n    sampleCount: quaterSC,\n    row: 1,\n    phase: -30,\n    labelPos: {\n      x: labelX[1],\n      y: labelY[1]\n    }\n  }, {\n    lead: \"aVF\",\n    startIdx: quaterSC,\n    sampleCount: quaterSC,\n    row: 2,\n    phase: 90,\n    labelPos: {\n      x: labelX[1],\n      y: labelY[2]\n    }\n  }, {\n    lead: \"V1\",\n    startIdx: halfSC,\n    sampleCount: quaterSC,\n    row: 0,\n    phase: 0,\n    labelPos: {\n      x: labelX[2],\n      y: labelY[0]\n    }\n  }, {\n    lead: \"V2\",\n    startIdx: halfSC,\n    sampleCount: quaterSC,\n    row: 1,\n    phase: 24,\n    labelPos: {\n      x: labelX[2],\n      y: labelY[1]\n    }\n  }, {\n    lead: \"V3\",\n    startIdx: halfSC,\n    sampleCount: quaterSC,\n    row: 2,\n    phase: 48,\n    labelPos: {\n      x: labelX[2],\n      y: labelY[2]\n    }\n  }, {\n    lead: \"V4\",\n    startIdx: threeQuaterSC,\n    sampleCount: quaterSC,\n    row: 0,\n    phase: 72,\n    labelPos: {\n      x: labelX[3],\n      y: labelY[0]\n    }\n  }, {\n    lead: \"V5\",\n    startIdx: threeQuaterSC,\n    sampleCount: quaterSC,\n    row: 1,\n    phase: 96,\n    labelPos: {\n      x: labelX[3],\n      y: labelY[1]\n    }\n  }, {\n    lead: \"V6\",\n    startIdx: threeQuaterSC,\n    sampleCount: quaterSC,\n    row: 2,\n    phase: 120,\n    labelPos: {\n      x: labelX[3],\n      y: labelY[2]\n    }\n  }, {\n    lead: \"Rhythm\",\n    startIdx: 0,\n    sampleCount: sampleCount,\n    row: 3,\n    phase: 60,\n    labelPos: {\n      x: labelX[0],\n      y: labelY[3]\n    }\n  }],\n  rhythmOptions: [\"Regular\", \"Irregular\"],\n  rateOptions: [\"Tachycardic\", \"Bradycardic\", \"Normal\"],\n  axisOptions: [\"Left Axis Deviation\", \"Right Axis Deviation\", \"Normal\"],\n  diagnosisOptions: [\"Inferior STEMI\", \"Anterior STEMI\", \"Lateral STEMI\", \"Septal STEMI\", \"Ventricular Fibrillation\", \"Ventricular Tachycardia\", \"Atrial Flutter\", \"Atrial Fibrillation\", \"Moibtz I Second Degree Heart Block\", \"Sinus Bradycardia\", \"Sinus Tachycardia\"],\n  signalStructure: [[\"I\", \"aVR\", \"V1\", \"V4\"], [\"II\", \"aVL\", \"V2\", \"V5\"], [\"III\", \"aVF\", \"V3\", \"V6\"], [\"Rhythm\"]]\n};\n;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/Generator/ECGTypes.tsx"],"names":["sampleCount","quaterSC","halfSC","threeQuaterSC","map","f","Math","floor","canvasHeight","canvasWidth","isoelectrics","labelX","labelY","iso","determineNoise","arr","_","idx","prevNoise","nextNoise","random","concat","noisySignal","Array","fill","reduce","constants","scaleFactor","leadConstants","lead","startIdx","row","phase","labelPos","x","y","rhythmOptions","rateOptions","axisOptions","diagnosisOptions","signalStructure"],"mappings":"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","sourcesContent":["const sampleCount = 5000;\nconst [quaterSC, halfSC, threeQuaterSC] = [0.25, 0.5, 0.75].map(f => Math.floor(sampleCount * f))\nconst canvasHeight = 350;\nconst canvasWidth = 1000;\nconst isoelectrics = [50, 125, 200, 275];\nconst labelX = [10, 260, 510, 760];\nconst labelY = isoelectrics.map(iso => iso - 15);\n\n// This takes ages if you try to do it with every render\nconst determineNoise = (arr: Signal, _: number, idx: number): Signal => {\n    if (idx === 0) return [[0, false]];\n    const prevNoise = arr[idx - 1][0];\n    const nextNoise = prevNoise + 0.4 * (Math.random() - 0.5) - (Math.random() * 0.0099 + 0.001) * prevNoise;\n    return arr.concat([[nextNoise, false]]);\n}\n\nconst noisySignal = Array(sampleCount).fill(0).reduce(determineNoise, []) as Signal;\n\ninterface Constants {\n    sampleCount: number;\n    canvasHeight: number;\n    canvasWidth: number;\n    scaleFactor: number;\n    isoelectrics: number[]\n    leadConstants: LeadConstant[];\n    rhythmOptions: RhythmOption[];\n    rateOptions: RateOption[];\n    axisOptions: AxisOption[];\n    diagnosisOptions: DiagnosisOption[];\n    signalStructure: Lead[][];\n    noisySignal: Signal;\n}\n\nexport const constants: Constants = {\n    sampleCount: sampleCount,\n    canvasHeight: canvasHeight,\n    canvasWidth: canvasWidth,\n    scaleFactor: canvasWidth / sampleCount,\n    isoelectrics: isoelectrics,\n    noisySignal: noisySignal,\n    leadConstants: [\n        { lead: \"I\",      startIdx: 0,             sampleCount: quaterSC, row: 0, phase: 0,    labelPos: { x: labelX[0], y: labelY[0] } },\n        { lead: \"II\",     startIdx: 0,             sampleCount: quaterSC, row: 1, phase: 60,   labelPos: { x: labelX[0], y: labelY[1] } },\n        { lead: \"III\",    startIdx: 0,             sampleCount: quaterSC, row: 2, phase: 120,  labelPos: { x: labelX[0], y: labelY[2] } },\n        { lead: \"aVR\",    startIdx: quaterSC,      sampleCount: quaterSC, row: 0, phase: -150, labelPos: { x: labelX[1], y: labelY[0] } },\n        { lead: \"aVL\",    startIdx: quaterSC,      sampleCount: quaterSC, row: 1, phase: -30,  labelPos: { x: labelX[1], y: labelY[1] } },\n        { lead: \"aVF\",    startIdx: quaterSC,      sampleCount: quaterSC, row: 2, phase: 90,   labelPos: { x: labelX[1], y: labelY[2] } },\n        { lead: \"V1\",     startIdx: halfSC,        sampleCount: quaterSC, row: 0, phase: 0,    labelPos: { x: labelX[2], y: labelY[0] } },\n        { lead: \"V2\",     startIdx: halfSC,        sampleCount: quaterSC, row: 1, phase: 24,   labelPos: { x: labelX[2], y: labelY[1] } },\n        { lead: \"V3\",     startIdx: halfSC,        sampleCount: quaterSC, row: 2, phase: 48,   labelPos: { x: labelX[2], y: labelY[2] } },\n        { lead: \"V4\",     startIdx: threeQuaterSC, sampleCount: quaterSC, row: 0, phase: 72,   labelPos: { x: labelX[3], y: labelY[0] } },\n        { lead: \"V5\",     startIdx: threeQuaterSC, sampleCount: quaterSC, row: 1, phase: 96,   labelPos: { x: labelX[3], y: labelY[1] } },\n        { lead: \"V6\",     startIdx: threeQuaterSC, sampleCount: quaterSC, row: 2, phase: 120,  labelPos: { x: labelX[3], y: labelY[2] } },\n        { lead: \"Rhythm\", startIdx: 0,             sampleCount: sampleCount, row: 3, phase: 60,labelPos: { x: labelX[0], y: labelY[3] } },\n    ],\n\n    rhythmOptions: [\"Regular\", \"Irregular\"],\n    rateOptions: [\"Tachycardic\", \"Bradycardic\", \"Normal\"],\n    axisOptions: [\"Left Axis Deviation\", \"Right Axis Deviation\", \"Normal\"],\n    diagnosisOptions: [\n        \"Inferior STEMI\", \"Anterior STEMI\", \"Lateral STEMI\", \"Septal STEMI\", \n        \"Ventricular Fibrillation\", \"Ventricular Tachycardia\", \"Atrial Flutter\",\n        \"Atrial Fibrillation\", \"Moibtz I Second Degree Heart Block\",\n        \"Sinus Bradycardia\", \"Sinus Tachycardia\"\n    ],\n\n    signalStructure: [\n        [ \"I\",   \"aVR\", \"V1\", \"V4\" ],\n        [ \"II\",  \"aVL\", \"V2\", \"V5\" ],\n        [ \"III\", \"aVF\", \"V3\", \"V6\" ],\n        [        \"Rhythm\"          ]\n    ]\n}\n\n\ntype TopicName = \"ACS\" | \"Arrhythmias\" | \"Rate\"\n\nexport type EcgTopic = {\n    \"name\": TopicName;\n    \"selected\": boolean;\n    \"attempts\": number;\n    \"correct\": number;\n}\n\nexport interface FirmDiagnosis extends Diagnosis {\n    rate: number;\n    axis: number;\n}\n\nexport type Diagnosis = {\n    topics: TopicName[];\n    diagnosis: DiagnosisOption;\n    explanation: string;\n    \n    rate: \"default\" | number; //determines numer of events\n    axis: \"default\" | number; // to be applied at the end maybe?\n    rhythm: \"Irregular\" | \"Regular\";\n\n    // to be applied \"globally\"\n    changes: Change[]\n}\n\nexport type Change = {\n    information: {\n        waveName: WaveName;\n        description: string;\n    }[];\n    predicates: Predicate[];\n    parameters: {\n        start: number; \n        waves: WaveParameters;\n    };\n}\n\nexport type EcgEvent = {\n    information: { description: string, waveName: WaveName }[]\n    parameters: {\n        start: number; \n        waves: WaveParameters;\n    };\n}\n\nexport type Lead = \"I\" | \"II\" | \"III\" | \"aVF\" | \"aVL\" | \"aVR\" | \"V1\" | \"V2\" | \"V3\" | \"V4\" | \"V5\" | \"V6\" | \"Rhythm\";\n\nexport type StartRepeat = { kind: \"startRepeat\", start: number, repeat: number };\nexport type Predicate = StartRepeat | { kind: \"lead\", leads: Lead[] } | { kind: \"all\" } | { kind: \"index\", index: number };\n\nexport type SettingName = \"mag\" | \"radius\" | \"kurtosis\" | \"upstroke\"\nexport type WaveSettings = { [Property in SettingName]: number }\nexport type WaveSettingsEntry = [SettingName, number];\n\nexport type WaveName = \"p\" | \"pr\" | \"r\" | \"t\"\nexport type WaveParameters = { [Property in WaveName]: WaveSettings };\nexport type WaveParameterEntry = [WaveName, WaveSettings];\n\nexport type LeadConstant = { lead: Lead, startIdx: number, sampleCount: number, row: number, phase: number, labelPos: { x: number, y: number } };\nexport interface LeadDetail extends LeadConstant { events: EcgEvent[], axisFactor: number };\n\nexport type PointOfInterest = { infoPos: { x: number, y: number }, description: string }\n\ntype RhythmOption = \"Regular\" | \"Irregular\";\ntype RateOption = \"Tachycardic\" | \"Bradycardic\" | \"Normal\";\ntype AxisOption = \"Left Axis Deviation\" | \"Right Axis Deviation\" | \"Normal\";\ntype DiagnosisOption = (\n    \"Inferior STEMI\" | \"Anterior STEMI\" | \"Lateral STEMI\" | \"Septal STEMI\" | \n    \"Ventricular Fibrillation\" | \"Ventricular Tachycardia\" | \"Atrial Flutter\" |\n    \"Atrial Fibrillation\" | \"Moibtz I Second Degree Heart Block\" |\n    \"Sinus Bradycardia\" | \"Sinus Tachycardia\"\n)\n\nexport type Signal = [number, boolean][];\nexport type FourSignal = Signal[];\n\nexport type EcgQuestion = {\n    signal: FourSignal;\n    pointsOfInterest: PointOfInterest[];\n    answered: boolean;\n    explanation: string;\n    sections: EcgQuestionSections\n}\n\nexport type EcgQuestionSections = [\n    { label: \"Rate\", correct: RateOption, selected: RateOption | \"\", options: RateOption[] },\n    { label: \"Rhythm\", correct: RhythmOption, selected: RhythmOption | \"\", options: RhythmOption[] },\n    { label: \"Axis\", correct: AxisOption, selected: AxisOption | \"\", options: AxisOption[] },\n    { label: \"Diagnosis\", correct: DiagnosisOption, selected: DiagnosisOption | \"\", options: DiagnosisOption[] }\n]"]},"metadata":{},"sourceType":"module"}