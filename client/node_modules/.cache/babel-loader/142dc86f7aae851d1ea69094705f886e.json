{"ast":null,"code":"export var createUnhandledRejection = function createUnhandledRejection(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (coolingOffPeriod) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var possiblyUnhandledRejections = new Map();\n      var intervalId = null;\n\n      var deletePossiblyUnhandledRejection = function deletePossiblyUnhandledRejection(_ref) {\n        var promise = _ref.promise;\n        return possiblyUnhandledRejections.delete(promise);\n      };\n\n      var emitUnhandledRejection = function emitUnhandledRejection() {\n        var latestTimestampToEmit = Date.now() - coolingOffPeriod;\n        possiblyUnhandledRejections.forEach(function (_ref2, promise) {\n          var reason = _ref2.reason,\n              timestamp = _ref2.timestamp;\n\n          if (timestamp > latestTimestampToEmit) {\n            return;\n          }\n\n          possiblyUnhandledRejections.delete(promise);\n          observer.next(reason);\n        });\n\n        if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n          window.clearInterval(intervalId);\n          intervalId = null;\n        }\n      };\n\n      var registerPossiblyUnhandledRejection = function registerPossiblyUnhandledRejection(event) {\n        event.preventDefault();\n        possiblyUnhandledRejections.set(event.promise, {\n          reason: event.reason,\n          timestamp: Date.now()\n        });\n\n        if (intervalId === null) {\n          intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n        }\n      };\n\n      window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n      window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      return function () {\n        if (intervalId !== null) {\n          window.clearInterval(intervalId);\n        }\n\n        window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n        window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      };\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}