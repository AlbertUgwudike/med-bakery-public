{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/FinalsPage/FinalsRouter.tsx\",\n    _s = $RefreshSig$();\n\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport LearningPointsPage from './LearningPointsPage';\nimport TextBook from '../TextBookPage/TextBookPage';\nimport LastSessionRouter from './LastSessionRouter';\nimport { useContext, useState } from 'react';\nimport axios from 'axios';\nimport CategoryPage from './CategoryPage';\nimport QuestionPage from '../QuestionPage/QuestionPage';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FinalsRouter = props => {\n  _s();\n\n  const {\n    SERVER_URL,\n    token\n  } = useContext(MetaContext);\n  const [availableQuestions, updateAvailableQuestions] = useState([]);\n  const [sessionType, updateSessionType] = useState(\"Filter\");\n\n  const handleSessionTypeChange = e => {\n    updateSessionType(e.target.value);\n  };\n\n  const finishSession = () => {\n    const answeredQuestions = availableQuestions.filter(q => q.answered); // if all the fetched available questions are unanswered we must be reviewing questions, do not submit\n    // we might need a mmore robust flag for this function\n\n    if (answeredQuestions.length > 0) {\n      window.analytics.track({\n        userId: \"\",\n        event: \"Question session Finished\"\n      });\n      axios.post(SERVER_URL + \"/users/finishsession\", {\n        token,\n        questions: answeredQuestions\n      }).catch(console.log);\n    }\n  };\n\n  const retriveQuestions = paths => {\n    window.analytics.track({\n      userId: \"\",\n      event: \"questions started\"\n    });\n    axios.post(SERVER_URL + \"/questions/newquestion\", {\n      token,\n      paths: paths,\n      repeatQuestions: sessionType === \"All Questions\"\n    }).then(res => {\n      // console.log(\"we got em\", res.data)\n      updateAvailableQuestions(res.data);\n    }).catch(console.log);\n  };\n\n  if (!token) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/User/Finals\",\n        children: /*#__PURE__*/_jsxDEV(CategoryPage, {\n          retriveQuestions: retriveQuestions,\n          handleSessionTypeChange: handleSessionTypeChange,\n          sessionType: sessionType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/User/Finals/Session\",\n        children: /*#__PURE__*/_jsxDEV(QuestionPage, {\n          availableQuestions: availableQuestions,\n          updateAvailableQuestions: updateAvailableQuestions,\n          finishSession: finishSession,\n          reviewMode: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/User/Finals/LastSession\",\n        children: /*#__PURE__*/_jsxDEV(LastSessionRouter, {\n          reviewMode: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/User/Finals/LearningPoints\",\n        children: /*#__PURE__*/_jsxDEV(LearningPointsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/User/Finals/TextBook\",\n        children: /*#__PURE__*/_jsxDEV(TextBook, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FinalsRouter, \"GR+1X57nBFILNKv6PIsmDJxC0o4=\");\n\n_c = FinalsRouter;\nexport default FinalsRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"FinalsRouter\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/FinalsPage/FinalsRouter.tsx"],"names":["Switch","Route","Redirect","LearningPointsPage","TextBook","LastSessionRouter","useContext","useState","axios","CategoryPage","QuestionPage","MetaContext","FinalsRouter","props","SERVER_URL","token","availableQuestions","updateAvailableQuestions","sessionType","updateSessionType","handleSessionTypeChange","e","target","value","finishSession","answeredQuestions","filter","q","answered","length","window","analytics","track","userId","event","post","questions","catch","console","log","retriveQuestions","paths","repeatQuestions","then","res","data"],"mappings":"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","sourcesContent":["import { Switch, Route, Redirect, useLocation } from 'react-router-dom';\nimport LearningPointsPage from './LearningPointsPage';\nimport TextBook from '../TextBookPage/TextBookPage';\nimport FinalsSelector from './FinalsSelector';\nimport LastSessionRouter from './LastSessionRouter';\nimport { Container } from '../General/Container';\nimport BackButton from '../General/BackButton';\nimport { useContext, useState } from 'react';\nimport { FinalsQuestion } from '../../types';\nimport axios from 'axios';\nimport CategoryPage from './CategoryPage';\nimport QuestionPage from '../QuestionPage/QuestionPage';\nimport MetaContext from '../../MetaContext';\n\ntype FinalsRouterProps = { }\n\nconst FinalsRouter = (props: FinalsRouterProps) => {\n\n    const { SERVER_URL, token } = useContext(MetaContext);\n    const [availableQuestions, updateAvailableQuestions] = useState([] as FinalsQuestion[]);\n    const [sessionType, updateSessionType] = useState(\"Filter\");\n\n    const handleSessionTypeChange: React.ChangeEventHandler<HTMLSelectElement> = e => {\n        updateSessionType(e.target.value);\n    }\n\n    const finishSession = () => {\n        const answeredQuestions = availableQuestions.filter(q => q.answered)\n\n        // if all the fetched available questions are unanswered we must be reviewing questions, do not submit\n        // we might need a mmore robust flag for this function\n        if (answeredQuestions.length > 0) {\n            window.analytics.track({\n                userId: \"\",\n                event: \"Question session Finished\"\n            })\n            axios.post(SERVER_URL + \"/users/finishsession\", { \n                token,\n                questions: answeredQuestions\n            }).catch(console.log);\n        }\n    }\n\n    const retriveQuestions = (paths: string[][]) => {\n        window.analytics.track({\n            userId: \"\",\n            event: \"questions started\"\n        })\n        axios.post(SERVER_URL + \"/questions/newquestion\", {\n            token,\n            paths: paths,\n            repeatQuestions: sessionType === \"All Questions\"\n        }).then(res => {\n            // console.log(\"we got em\", res.data)\n            updateAvailableQuestions(res.data)\n        }).catch(console.log);\n    }\n\n    if (!token) return <Redirect to = {\"/\"} />\n\n    return (\n        <div>\n\n            <Switch>\n\n                <Route exact path = \"/User/Finals\">\n                    <CategoryPage \n                        retriveQuestions = { retriveQuestions }\n                        handleSessionTypeChange = { handleSessionTypeChange }\n                        sessionType = { sessionType } \n                    />\n                </Route>\n                \n                <Route path = \"/User/Finals/Session\"> \n                    <QuestionPage \n                        availableQuestions = { availableQuestions }\n                        updateAvailableQuestions = { updateAvailableQuestions }\n                        finishSession = { finishSession }\n                        reviewMode = { false }\n                    />\n                </Route>\n\n                <Route path = \"/User/Finals/LastSession\"> \n                    <LastSessionRouter\n                        reviewMode = { false }\n                    />\n                </Route>\n\n                <Route path = \"/User/Finals/LearningPoints\"> \n                    <LearningPointsPage />\n                </Route>\n\n                <Route path = \"/User/Finals/TextBook\">\n                    <TextBook />\n                </Route>\n\n            </Switch>\n\n        </div>\n    );\n}\n\nexport default FinalsRouter;"]},"metadata":{},"sourceType":"module"}