{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx\",\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport { Container } from \"../Common\";\nimport { startAudioRecordingId } from \"../types\";\nimport recordingStartAudioUrl from \"../media/start.mp3\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { playStartTone } from \"../hooks\";\nimport { copy } from \"../../ECGPage/Functions/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar QuestionPage = function QuestionPage(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var questionCount = props.station.questions.length;\n  var history = useHistory();\n  var idx = props.questionIdx;\n\n  var nextFunc = function nextFunc() {\n    return idx.curr === questionCount - 1 ? history.push(\"/OSCE/Station/Summary\") : props.updateQuestionIdx({\n      prev: idx.curr,\n      curr: idx.curr + 1\n    });\n  };\n\n  var prevFunc = function prevFunc() {\n    return idx.curr === 0 ? {} : props.updateQuestionIdx({\n      prev: idx.curr,\n      curr: idx.curr - 1\n    });\n  };\n\n  var recorders = Array(props.station.questions.length).map(_s(function (_, idx) {\n    _s();\n\n    return useReactMediaRecorder({\n      audio: true,\n      onStop: function onStop(blobUrl, _) {\n        playStartTone();\n        props.updateStation(function (s) {\n          s.questions[idx].responseAudio = blobUrl ? blobUrl : \"\";\n          return copy(s); // because object is nested, react shallow compares\n        }); // advance question on recording completetion\n\n        props.updateQuestionIdx(function (qi) {\n          return {\n            prev: qi.curr,\n            curr: idx + 1\n          };\n        });\n      }\n    });\n  }, \"nRhgjCUzn+Ducq/dfE3avdJQHVQ=\", false, function () {\n    return [useReactMediaRecorder];\n  }));\n  var transitionStyles = idx.curr < idx.prev ? {\n    entering: {\n      transform: \"translateY(-150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(150%)\"\n    },\n    exited: {\n      transform: \"translateY(-150%)\"\n    }\n  } : {\n    entering: {\n      transform: \"translateY(150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(-150%)\"\n    },\n    exited: {\n      transform: \"translateY(150%)\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        updateStation: props.updateStation,\n        station: props.station,\n        handleExit: props.handleExit,\n        questionIdx: idx,\n        title: \"Station\",\n        percentage: 10 + 100 * idx.curr / questionCount,\n        timer: true,\n        nextFunc: nextFunc,\n        prevFunc: prevFunc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, _this), props.station.questions.map(function (question, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(Transition, {\n          in: questionIdx === idx.curr,\n          timeout: 500,\n          unmountOnExit: true,\n          mountOnEnter: true,\n          children: function children(state) {\n            return /*#__PURE__*/_jsxDEV(QuestionContent, {\n              question: question,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              updateQuestionIdx: props.updateQuestionIdx,\n              transitionStyle: transitionStyles[state]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: recordingStartAudioUrl,\n      id: startAudioRecordingId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, _this);\n};\n\n_s2(QuestionPage, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx"],"names":["Container","startAudioRecordingId","recordingStartAudioUrl","Transition","QuestionContent","Header","useHistory","useReactMediaRecorder","playStartTone","copy","QuestionPage","props","questionCount","station","questions","length","history","idx","questionIdx","nextFunc","curr","push","updateQuestionIdx","prev","prevFunc","recorders","Array","map","_","audio","onStop","blobUrl","updateStation","s","responseAudio","qi","transitionStyles","entering","transform","entered","exiting","exited","display","gridTemplateColumns","handleExit","question","state"],"mappings":";;;;AACA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAAmBC,qBAAnB,QAAyD,UAAzD;AACA,OAAOC,sBAAP,MAAmC,oBAAnC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,IAAT,QAAqB,iCAArB;;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA0B;AAAA;;AAAA;;AAC3C,MAAMC,aAAa,GAAGD,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAwBC,MAA9C;AACA,MAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,MAAMW,GAAG,GAAGN,KAAK,CAACO,WAAlB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WACbF,GAAG,CAACG,IAAJ,KAAaR,aAAa,GAAG,CAA7B,GACMI,OAAO,CAACK,IAAR,CAAa,uBAAb,CADN,GAEMV,KAAK,CAACW,iBAAN,CAAwB;AACpBC,MAAAA,IAAI,EAAEN,GAAG,CAACG,IADU;AAEpBA,MAAAA,IAAI,EAAEH,GAAG,CAACG,IAAJ,GAAW;AAFG,KAAxB,CAHO;AAAA,GAAjB;;AAQA,MAAMI,QAAQ,GAAG,SAAXA,QAAW;AAAA,WACbP,GAAG,CAACG,IAAJ,KAAa,CAAb,GACM,EADN,GAEMT,KAAK,CAACW,iBAAN,CAAwB;AACpBC,MAAAA,IAAI,EAAEN,GAAG,CAACG,IADU;AAEpBA,MAAAA,IAAI,EAAEH,GAAG,CAACG,IAAJ,GAAW;AAFG,KAAxB,CAHO;AAAA,GAAjB;;AAQA,MAAMK,SAAS,GAAGC,KAAK,CAACf,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAwBC,MAAzB,CAAL,CAAsCY,GAAtC,IAA0C,UAACC,CAAD,EAAIX,GAAJ,EAAY;AAAA;;AACpE,WAAOV,qBAAqB,CAAC;AACzBsB,MAAAA,KAAK,EAAE,IADkB;AAEzBC,MAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUH,CAAV,EAAgB;AACpBpB,QAAAA,aAAa;AACbG,QAAAA,KAAK,CAACqB,aAAN,CAAoB,UAAAC,CAAC,EAAI;AACrBA,UAAAA,CAAC,CAACnB,SAAF,CAAYG,GAAZ,EAAiBiB,aAAjB,GAAiCH,OAAO,GAAGA,OAAH,GAAa,EAArD;AACA,iBAAOtB,IAAI,CAACwB,CAAD,CAAX,CAFqB,CAEL;AACnB,SAHD,EAFoB,CAOpB;;AACAtB,QAAAA,KAAK,CAACW,iBAAN,CAAwB,UAAAa,EAAE;AAAA,iBAAK;AAC3BZ,YAAAA,IAAI,EAAEY,EAAE,CAACf,IADkB;AAE3BA,YAAAA,IAAI,EAAEH,GAAG,GAAG;AAFe,WAAL;AAAA,SAA1B;AAIH;AAdwB,KAAD,CAA5B;AAgBH,GAjBiB;AAAA,YACPV,qBADO;AAAA,KAAlB;AAmBA,MAAM6B,gBAAwC,GAC1CnB,GAAG,CAACG,IAAJ,GAAWH,GAAG,CAACM,IAAf,GACM;AACIc,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADd;AAEIC,IAAAA,OAAO,EAAE;AAAED,MAAAA,SAAS,EAAE;AAAb,KAFb;AAGIE,IAAAA,OAAO,EAAE;AAAEF,MAAAA,SAAS,EAAE;AAAb,KAHb;AAIIG,IAAAA,MAAM,EAAE;AAAEH,MAAAA,SAAS,EAAE;AAAb;AAJZ,GADN,GAOM;AACID,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KADd;AAEIC,IAAAA,OAAO,EAAE;AAAED,MAAAA,SAAS,EAAE;AAAb,KAFb;AAGIE,IAAAA,OAAO,EAAE;AAAEF,MAAAA,SAAS,EAAE;AAAb,KAHb;AAIIG,IAAAA,MAAM,EAAE;AAAEH,MAAAA,SAAS,EAAE;AAAb;AAJZ,GARV;AAeA,sBACI,QAAC,SAAD;AAAA,4BACI;AACI,MAAA,KAAK,EAAE;AACHI,QAAAA,OAAO,EAAE,MADN;AAEHC,QAAAA,mBAAmB,EAAE;AAFlB,OADX;AAAA,8BAMI,QAAC,MAAD;AACI,QAAA,aAAa,EAAEhC,KAAK,CAACqB,aADzB;AAEI,QAAA,OAAO,EAAErB,KAAK,CAACE,OAFnB;AAGI,QAAA,UAAU,EAAEF,KAAK,CAACiC,UAHtB;AAII,QAAA,WAAW,EAAE3B,GAJjB;AAKI,QAAA,KAAK,EAAE,SALX;AAMI,QAAA,UAAU,EAAE,KAAM,MAAMA,GAAG,CAACG,IAAX,GAAmBR,aANxC;AAOI,QAAA,KAAK,EAAE,IAPX;AAQI,QAAA,QAAQ,EAAEO,QARd;AASI,QAAA,QAAQ,EAAEK;AATd;AAAA;AAAA;AAAA;AAAA,eANJ,EAkBKb,KAAK,CAACE,OAAN,CAAcC,SAAd,CAAwBa,GAAxB,CAA4B,UAACkB,QAAD,EAAW3B,WAAX;AAAA,4BACzB,QAAC,UAAD;AACI,UAAA,EAAE,EAAEA,WAAW,KAAKD,GAAG,CAACG,IAD5B;AAEI,UAAA,OAAO,EAAE,GAFb;AAGI,UAAA,aAAa,MAHjB;AAII,UAAA,YAAY,MAJhB;AAAA,oBAMK,kBAAA0B,KAAK;AAAA,gCACF,QAAC,eAAD;AACI,cAAA,QAAQ,EAAED,QADd;AAEI,cAAA,aAAa,EAAElC,KAAK,CAACqB,aAFzB;AAGI,cAAA,WAAW,EAAEd,WAHjB;AAII,cAAA,iBAAiB,EAAEP,KAAK,CAACW,iBAJ7B;AAKI,cAAA,eAAe,EAAEc,gBAAgB,CAACU,KAAD;AALrC;AAAA;AAAA;AAAA;AAAA,qBADE;AAAA;AANV;AAAA;AAAA;AAAA;AAAA,iBADyB;AAAA,OAA5B,CAlBL;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAuCI;AAAO,MAAA,GAAG,EAAE5C,sBAAZ;AAAoC,MAAA,EAAE,EAAED;AAAxC;AAAA;AAAA;AAAA;AAAA,aAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AA2CH,CAlGD;;IAAMS,Y;UAEcJ,U;;;KAFdI,Y;AAoGN,eAAeA,YAAf","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, startAudioRecordingId, Station } from \"../types\";\nimport recordingStartAudioUrl from \"../media/start.mp3\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { playStartTone } from \"../hooks\";\nimport { copy } from \"../../ECGPage/Functions/utility\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: { prev: number; curr: number };\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<{ curr: number; prev: number }>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const questionCount = props.station.questions.length;\n    const history = useHistory();\n    const idx = props.questionIdx;\n\n    const nextFunc = () =>\n        idx.curr === questionCount - 1\n            ? history.push(\"/OSCE/Station/Summary\")\n            : props.updateQuestionIdx({\n                  prev: idx.curr,\n                  curr: idx.curr + 1,\n              });\n\n    const prevFunc = () =>\n        idx.curr === 0\n            ? {}\n            : props.updateQuestionIdx({\n                  prev: idx.curr,\n                  curr: idx.curr - 1,\n              });\n\n    const recorders = Array(props.station.questions.length).map((_, idx) => {\n        return useReactMediaRecorder({\n            audio: true,\n            onStop: (blobUrl, _) => {\n                playStartTone();\n                props.updateStation(s => {\n                    s.questions[idx].responseAudio = blobUrl ? blobUrl : \"\";\n                    return copy(s); // because object is nested, react shallow compares\n                });\n\n                // advance question on recording completetion\n                props.updateQuestionIdx(qi => ({\n                    prev: qi.curr,\n                    curr: idx + 1,\n                }));\n            },\n        });\n    });\n\n    const transitionStyles: { [key: string]: any } =\n        idx.curr < idx.prev\n            ? {\n                  entering: { transform: \"translateY(-150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(150%)\" },\n                  exited: { transform: \"translateY(-150%)\" },\n              }\n            : {\n                  entering: { transform: \"translateY(150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(-150%)\" },\n                  exited: { transform: \"translateY(150%)\" },\n              };\n\n    return (\n        <Container>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                <Header\n                    updateStation={props.updateStation}\n                    station={props.station}\n                    handleExit={props.handleExit}\n                    questionIdx={idx}\n                    title={\"Station\"}\n                    percentage={10 + (100 * idx.curr) / questionCount}\n                    timer={true}\n                    nextFunc={nextFunc}\n                    prevFunc={prevFunc}\n                />\n\n                {props.station.questions.map((question, questionIdx) => (\n                    <Transition\n                        in={questionIdx === idx.curr}\n                        timeout={500}\n                        unmountOnExit\n                        mountOnEnter\n                    >\n                        {state => (\n                            <QuestionContent\n                                question={question}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                updateQuestionIdx={props.updateQuestionIdx}\n                                transitionStyle={transitionStyles[state]}\n                            />\n                        )}\n                    </Transition>\n                ))}\n            </div>\n\n            <audio src={recordingStartAudioUrl} id={startAudioRecordingId} />\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}