{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/toConsumableArray'), require('dashify'), require('indefinite-article')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/toConsumableArray', 'dashify', 'indefinite-article'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.compilerr = {}, global._toConsumableArray, global.dashify, global.indefiniteArticle));\n})(this, function (exports, _toConsumableArray, dashify, indefiniteArticle) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\n\n  var dashify__default = /*#__PURE__*/_interopDefaultLegacy(dashify);\n\n  var indefiniteArticle__default = /*#__PURE__*/_interopDefaultLegacy(indefiniteArticle);\n\n  var applyModifiers = function applyModifiers(name, modifiers) {\n    if (modifiers === undefined) {\n      return name;\n    }\n\n    return modifiers.reduce(function (modifiedName, modifier) {\n      if (modifier === 'capitalize') {\n        var head = modifiedName.charAt(0).toUpperCase();\n        var tail = modifiedName.slice(1);\n        return \"\".concat(head).concat(tail);\n      }\n\n      if (modifier === 'dashify') {\n        return dashify__default[\"default\"](modifiedName);\n      }\n\n      if (modifier === 'prependIndefiniteArticle') {\n        return \"\".concat(indefiniteArticle__default[\"default\"](modifiedName), \" \").concat(modifiedName);\n      }\n\n      return modifiedName;\n    }, name);\n  };\n\n  var buildRegex = function buildRegex(variable) {\n    var expression = variable.name + variable.modifiers.map(function (modifier) {\n      return \"\\\\.\".concat(modifier, \"\\\\(\\\\)\");\n    }).join('');\n    return new RegExp(\"\\\\$\\\\{\".concat(expression, \"}\"), 'g');\n  };\n\n  var preRenderString = function preRenderString(string, parameters) {\n    var expressionRegex = /\\${([^.}]+)((\\.[^(]+\\(\\))*)}/g;\n    var variables = [];\n    var expressionResult = expressionRegex.exec(string);\n\n    while (expressionResult !== null) {\n      var variable = {\n        modifiers: [],\n        name: expressionResult[1]\n      };\n\n      if (expressionResult[3] !== undefined) {\n        var modifiersRegex = /\\.[^(]+\\(\\)/g;\n        var modifiersRegexResult = modifiersRegex.exec(expressionResult[2]);\n\n        while (modifiersRegexResult !== null) {\n          variable.modifiers.push(modifiersRegexResult[0].slice(1, -2));\n          modifiersRegexResult = modifiersRegex.exec(expressionResult[2]);\n        }\n      }\n\n      variables.push(variable);\n      expressionResult = expressionRegex.exec(string);\n    }\n\n    var preRenderedParts = variables.reduce(function (parts, variable) {\n      return parts.map(function (part) {\n        if (typeof part === 'string') {\n          return part.split(buildRegex(variable)).reduce(function (prts, prt, index) {\n            if (index === 0) {\n              return [prt];\n            }\n\n            if (variable.name in parameters) {\n              return [].concat(_toConsumableArray__default[\"default\"](prts), [applyModifiers(parameters[variable.name], variable.modifiers), prt]);\n            }\n\n            return [].concat(_toConsumableArray__default[\"default\"](prts), [function (prmtrs) {\n              return applyModifiers(prmtrs[variable.name], variable.modifiers);\n            }, prt]);\n          }, []);\n        }\n\n        return [part];\n      }).reduce(function (prts, part) {\n        return [].concat(_toConsumableArray__default[\"default\"](prts), _toConsumableArray__default[\"default\"](part));\n      }, []);\n    }, [string]);\n    return function (missingParameters) {\n      return preRenderedParts.reduce(function (renderedParts, preRenderedPart) {\n        if (typeof preRenderedPart === 'string') {\n          return [].concat(_toConsumableArray__default[\"default\"](renderedParts), [preRenderedPart]);\n        }\n\n        return [].concat(_toConsumableArray__default[\"default\"](renderedParts), [preRenderedPart(missingParameters)]);\n      }, []).join('');\n    };\n  };\n\n  var compile = function compile(template) {\n    var knownParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var renderCode = template.code === undefined ? undefined : preRenderString(template.code, knownParameters);\n    var renderMessage = template.message === undefined ? undefined : preRenderString(template.message, knownParameters);\n\n    function render() {\n      var causeOrMissingParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var optionalCause = arguments.length > 1 ? arguments[1] : undefined;\n      var hasNoOptionalCause = optionalCause === undefined && (causeOrMissingParameters instanceof Error || causeOrMissingParameters.code !== undefined && causeOrMissingParameters.code.slice(-9) === 'Exception');\n\n      var _ref = hasNoOptionalCause ? {\n        cause: causeOrMissingParameters,\n        missingParameters: {}\n      } : {\n        cause: optionalCause,\n        missingParameters: causeOrMissingParameters\n      },\n          cause = _ref.cause,\n          missingParameters = _ref.missingParameters;\n\n      var err = renderMessage === undefined ? new Error() : new Error(renderMessage(missingParameters));\n\n      if (cause !== null) {\n        err.cause = cause;\n      }\n\n      if (renderCode !== undefined) {\n        err.code = renderCode(missingParameters);\n      }\n\n      if (template.status !== undefined) {\n        err.status = template.status;\n      }\n\n      return err;\n    }\n\n    return render;\n  };\n\n  exports.compile = compile;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}