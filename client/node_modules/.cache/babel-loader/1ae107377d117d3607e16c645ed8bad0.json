{"ast":null,"code":"export var createWrapSubscribeFunction = function createWrapSubscribeFunction(patch, toObserver) {\n  var emptyFunction = function emptyFunction() {}; // tslint:disable-line:no-empty\n\n\n  var isNextFunction = function isNextFunction(args) {\n    return typeof args[0] === 'function';\n  };\n\n  return function (innerSubscribe) {\n    var _subscribe = function subscribe() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({\n        next: args[0]\n      }) : toObserver.apply(void 0, args));\n\n      if (unsubscribe !== undefined) {\n        return unsubscribe;\n      }\n\n      return emptyFunction;\n    };\n\n    _subscribe[Symbol.observable] = function () {\n      return {\n        subscribe: function subscribe() {\n          return {\n            unsubscribe: _subscribe.apply(void 0, arguments)\n          };\n        }\n      };\n    };\n\n    return patch(_subscribe);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/wrap-subscribe-function.ts"],"names":[],"mappings":"AAGA,OAAO,IAAM,2BAA2B,GAAkC,SAA7D,2BAA6D,CAAC,KAAD,EAAQ,UAAR,EAAsB;AAC5F,MAAM,aAAa,GAAG,SAAhB,aAAgB,GAAK,CAAG,CAA9B,CAD4F,CAC5D;;;AAChC,MAAM,cAAc,GAAG,SAAjB,cAAiB,CAAI,IAAJ;AAAA,WAAoE,OAAO,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAvF;AAAA,GAAvB;;AAEA,SAAO,UAAI,cAAJ,EAA6C;AAChD,QAAM,UAAS,GAA2B,SAApC,SAAoC,GAAoC;AAAA,wCAAhC,IAAgC;AAAhC,QAAA,IAAgC;AAAA;;AAC1E,UAAM,WAAW,GAAG,cAAc,CAAC,cAAc,CAAC,IAAD,CAAd,GAAuB,UAAU,CAAC;AAAE,QAAA,IAAI,EAAE,IAAI,CAAC,CAAD;AAAZ,OAAD,CAAjC,GAAuD,UAAU,MAAV,SAAc,IAAd,CAAxD,CAAlC;;AAEA,UAAI,WAAW,KAAK,SAApB,EAA+B;AAC3B,eAAO,WAAP;AACH;;AAED,aAAO,aAAP;AACH,KARD;;AAUA,IAAA,UAAS,CAAC,MAAM,CAAC,UAAR,CAAT,GAA+B;AAAA,aAAO;AAClC,QAAA,SAAS,EAAE;AAAA,iBAAwD;AAAE,YAAA,WAAW,EAAE,UAAS,MAAT;AAAf,WAAxD;AAAA;AADuB,OAAP;AAAA,KAA/B;;AAIA,WAAO,KAAK,CAAC,UAAD,CAAZ;AACH,GAhBD;AAiBH,CArBM","sourceRoot":"","sourcesContent":["export const createWrapSubscribeFunction = (patch, toObserver) => {\n    const emptyFunction = () => { }; // tslint:disable-line:no-empty\n    const isNextFunction = (args) => typeof args[0] === 'function';\n    return (innerSubscribe) => {\n        const subscribe = ((...args) => {\n            const unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({ next: args[0] }) : toObserver(...args));\n            if (unsubscribe !== undefined) {\n                return unsubscribe;\n            }\n            return emptyFunction;\n        });\n        subscribe[Symbol.observable] = () => ({\n            subscribe: (...args) => ({ unsubscribe: subscribe(...args) })\n        });\n        return patch(subscribe);\n    };\n};\n//# sourceMappingURL=wrap-subscribe-function.js.map"]},"metadata":{},"sourceType":"module"}