{"ast":null,"code":"export var createDecodeWebMChunk = function createDecodeWebMChunk(readElementContent, readElementType) {\n  return function (dataView, elementType, channelCount) {\n    var contents = [];\n    var currentElementType = elementType;\n    var offset = 0;\n\n    while (offset < dataView.byteLength) {\n      if (currentElementType === null) {\n        var lengthAndType = readElementType(dataView, offset);\n\n        if (lengthAndType === null) {\n          break;\n        }\n\n        var length = lengthAndType.length,\n            type = lengthAndType.type;\n        currentElementType = type;\n        offset += length;\n      } else {\n        var contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n\n        if (contentAndLength === null) {\n          break;\n        }\n\n        var content = contentAndLength.content,\n            _length = contentAndLength.length;\n        currentElementType = null;\n        offset += _length;\n\n        if (content !== null) {\n          contents.push(content);\n        }\n      }\n    }\n\n    return {\n      contents: contents,\n      currentElementType: currentElementType,\n      offset: offset\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/decode-web-m-chunk.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,qBAAqB,GAA4B,SAAjD,qBAAiD,CAAC,kBAAD,EAAqB,eAArB,EAAwC;AAClG,SAAO,UAAC,QAAD,EAAW,WAAX,EAAwB,YAAxB,EAAwC;AAC3C,QAAM,QAAQ,GAAgC,EAA9C;AAEA,QAAI,kBAAkB,GAAG,WAAzB;AACA,QAAI,MAAM,GAAG,CAAb;;AAEA,WAAO,MAAM,GAAG,QAAQ,CAAC,UAAzB,EAAqC;AACjC,UAAI,kBAAkB,KAAK,IAA3B,EAAiC;AAC7B,YAAM,aAAa,GAAG,eAAe,CAAC,QAAD,EAAW,MAAX,CAArC;;AAEA,YAAI,aAAa,KAAK,IAAtB,EAA4B;AACxB;AACH;;AAED,YAAQ,MAAR,GAAyB,aAAzB,CAAQ,MAAR;AAAA,YAAgB,IAAhB,GAAyB,aAAzB,CAAgB,IAAhB;AAEA,QAAA,kBAAkB,GAAG,IAArB;AACA,QAAA,MAAM,IAAI,MAAV;AACH,OAXD,MAWO;AACH,YAAM,gBAAgB,GAAG,kBAAkB,CAAC,QAAD,EAAW,MAAX,EAAmB,kBAAnB,EAAuC,YAAvC,CAA3C;;AAEA,YAAI,gBAAgB,KAAK,IAAzB,EAA+B;AAC3B;AACH;;AAED,YAAQ,OAAR,GAA4B,gBAA5B,CAAQ,OAAR;AAAA,YAAiB,OAAjB,GAA4B,gBAA5B,CAAiB,MAAjB;AAEA,QAAA,kBAAkB,GAAG,IAArB;AACA,QAAA,MAAM,IAAI,OAAV;;AAEA,YAAI,OAAO,KAAK,IAAhB,EAAsB;AAClB,UAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACH;AACJ;AACJ;;AAED,WAAO;AAAE,MAAA,QAAQ,EAAR,QAAF;AAAY,MAAA,kBAAkB,EAAlB,kBAAZ;AAAgC,MAAA,MAAM,EAAN;AAAhC,KAAP;AACH,GArCD;AAsCH,CAvCM","sourceRoot":"","sourcesContent":["export const createDecodeWebMChunk = (readElementContent, readElementType) => {\n    return (dataView, elementType, channelCount) => {\n        const contents = [];\n        let currentElementType = elementType;\n        let offset = 0;\n        while (offset < dataView.byteLength) {\n            if (currentElementType === null) {\n                const lengthAndType = readElementType(dataView, offset);\n                if (lengthAndType === null) {\n                    break;\n                }\n                const { length, type } = lengthAndType;\n                currentElementType = type;\n                offset += length;\n            }\n            else {\n                const contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n                if (contentAndLength === null) {\n                    break;\n                }\n                const { content, length } = contentAndLength;\n                currentElementType = null;\n                offset += length;\n                if (content !== null) {\n                    contents.push(content);\n                }\n            }\n        }\n        return { contents, currentElementType, offset };\n    };\n};\n//# sourceMappingURL=decode-web-m-chunk.js.map"]},"metadata":{},"sourceType":"module"}