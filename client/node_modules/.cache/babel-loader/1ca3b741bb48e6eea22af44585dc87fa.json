{"ast":null,"code":"export var randomVal=function randomVal(min,max){return Math.floor(min+Math.random()*(max-min));};export var copy=function copy(obj){return JSON.parse(JSON.stringify(obj));};// Wooooaaaah\nexport var reduceObj=function reduceObj(func,initial,obj){var entries=Object.entries(obj);return entries.reduce(func,initial);};export var qualifyHR=function qualifyHR(hr){if(hr<60)return\"Bradycardic\";if(hr>100)return\"Tachycardic\";else return\"Normal\";};export var qualifyAxis=function qualifyAxis(axis){if(axis<-30)return\"Left Axis Deviation\";if(axis>90)return\"Right Axis Deviation\";else return\"Normal\";};","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/old-components/ECGPage/Functions/utility.tsx"],"names":["randomVal","min","max","Math","floor","random","copy","obj","JSON","parse","stringify","reduceObj","func","initial","entries","Object","reduce","qualifyHR","hr","qualifyAxis","axis"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,GAAD,CAAcC,GAAd,QAA+BC,CAAAA,IAAI,CAACC,KAAL,CAAWH,GAAG,CAAGE,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAvB,CAAjB,CAA/B,EAAlB,CAEP,MAAO,IAAMK,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,GAAD,QAAcC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAd,EAAb,CAEP;AACA,MAAO,IAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAyBC,IAAzB,CAAyDC,OAAzD,CAAqEN,GAArE,CAAwG,CAC7H,GAAMO,CAAAA,OAAO,CAAGC,MAAM,CAACD,OAAP,CAAeP,GAAf,CAAhB,CACA,MAAOO,CAAAA,OAAO,CAACE,MAAR,CAAeJ,IAAf,CAAqBC,OAArB,CAAP,CACH,CAHM,CAKP,MAAO,IAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,CAAgB,CACrC,GAAIA,EAAE,CAAG,EAAT,CAAa,MAAO,aAAP,CACb,GAAIA,EAAE,CAAG,GAAT,CAAc,MAAO,aAAP,CAAd,IACK,OAAO,QAAP,CACR,CAJM,CAMP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAkB,CACzC,GAAIA,IAAI,CAAG,CAAC,EAAZ,CAAgB,MAAO,qBAAP,CAChB,GAAIA,IAAI,CAAG,EAAX,CAAe,MAAO,sBAAP,CAAf,IACK,OAAO,QAAP,CACR,CAJM","sourcesContent":["export const randomVal = (min: number, max: number) =>  Math.floor(min + Math.random() * (max - min));\n\nexport const copy = (obj: any) => JSON.parse(JSON.stringify(obj));\n\n// Wooooaaaah\nexport const reduceObj = <K extends string, V, R>(func: (acc: R, a: [K, V]) => R, initial: R, obj: {[Property in K]? : V}): R => {\n    const entries = Object.entries(obj) as [K, V][];\n    return entries.reduce(func, initial)\n}\n\nexport const qualifyHR = (hr: number) => {\n    if (hr < 60) return \"Bradycardic\";\n    if (hr > 100) return \"Tachycardic\";\n    else return \"Normal\";\n}\n\nexport const qualifyAxis = (axis: number) => {\n    if (axis < -30) return \"Left Axis Deviation\";\n    if (axis > 90) return \"Right Axis Deviation\";\n    else return \"Normal\";\n}"]},"metadata":{},"sourceType":"module"}