{"ast":null,"code":"export var createReadElementContent = function createReadElementContent(readVariableSizeInteger) {\n  return function (dataView, offset, type) {\n    var channelCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    var lengthAndValue = readVariableSizeInteger(dataView, offset);\n\n    if (lengthAndValue === null) {\n      return lengthAndValue;\n    }\n\n    var length = lengthAndValue.length,\n        value = lengthAndValue.value;\n\n    if (type === 'master') {\n      return {\n        content: null,\n        length: length\n      };\n    }\n\n    if (offset + length + value > dataView.byteLength) {\n      return null;\n    }\n\n    if (type === 'binary') {\n      var numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n      var content = Array.from({\n        length: channelCount\n      }, function () {\n        return new Float32Array(numberOfSamples);\n      });\n\n      for (var i = 0; i < numberOfSamples; i += 1) {\n        var elementOffset = i * channelCount + 1;\n\n        for (var j = 0; j < channelCount; j += 1) {\n          content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n        }\n      }\n\n      return {\n        content: content,\n        length: length + value\n      };\n    }\n\n    return {\n      content: null,\n      length: length + value\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module"}