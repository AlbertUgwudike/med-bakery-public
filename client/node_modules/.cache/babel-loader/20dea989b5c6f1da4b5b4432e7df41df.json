{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Notes.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport styled from \"styled-components\";\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notes = props => {\n  _s();\n\n  const {\n    darkMode,\n    SERVER_URL,\n    token\n  } = useContext(MetaContext);\n  const [notes, updateNotes] = useState(\"\");\n  const [editMode, updateEditMode] = useState(false);\n  useEffect(() => {\n    // incase we're on the default question\n    if (props.questionIdx !== -1) {\n      axios.post(SERVER_URL + \"/questions/getnotes\", {\n        token,\n        questionIdx: props.questionIdx\n      }).then(res => updateNotes(res.data));\n    }\n  }, [props.questionIdx]);\n\n  const handleEdit = e => {\n    updateNotes(e.target.value);\n  };\n\n  const submitNotes = () => {\n    axios.post(SERVER_URL + \"/questions/updatenotes\", {\n      token,\n      questionIdx: props.questionIdx,\n      notes: notes\n    });\n    updateEditMode(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    darkMode: darkMode,\n    style: {\n      height: \"max-content\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          font: \"30px Champion\"\n        },\n        children: \"Notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), editMode ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: submitNotes,\n        children: \" Save \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => updateEditMode(true),\n        children: \" Edit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), editMode ? /*#__PURE__*/_jsxDEV(TextArea, {\n      darkMode: darkMode,\n      value: notes,\n      onChange: handleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(TextArea, {\n      darkMode: darkMode,\n      value: notes,\n      readOnly: true,\n      onClick: () => updateEditMode(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Notes, \"Xi4FwBnWYkG37yE4YOKDpyKEyFE=\");\n\n_c = Notes;\nexport default Notes;\nconst Button = styled.button`\n    border-radius: 5px;\n    border-style: none;\n    background-color: #505050;\n    margin-left: 25px;\n    width: 100px;\n    height: 30px;\n    color: white;\n`;\n_c2 = Button;\nconst TextArea = styled.textarea`\n    width: 100%;\n    height: 100px;\n    padding: 20px;\n    border: 1px solid #80808033;\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n`;\n_c3 = TextArea;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Notes\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"TextArea\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Notes.tsx"],"names":["useState","useEffect","useContext","axios","styled","Panel","MetaContext","Notes","props","darkMode","SERVER_URL","token","notes","updateNotes","editMode","updateEditMode","questionIdx","post","then","res","data","handleEdit","e","target","value","submitNotes","height","display","alignItems","marginBottom","font","Button","button","TextArea","textarea"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport styled from \"styled-components\";\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\n\nconst Notes = (props: { questionIdx: number }) => {\n\n    const { darkMode, SERVER_URL, token } = useContext(MetaContext);\n    const [notes, updateNotes] = useState(\"\");\n    const [editMode, updateEditMode] = useState(false);\n\n    useEffect( () => {\n\n        // incase we're on the default question\n        if (props.questionIdx !== -1) {\n            axios.post(SERVER_URL + \"/questions/getnotes\", { token, questionIdx: props.questionIdx })\n             .then(res => updateNotes(res.data))\n        }\n\n    }, [props.questionIdx] )\n\n    const handleEdit: React.ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n        updateNotes(e.target.value);\n    }\n\n    const submitNotes = () => {\n        axios.post(SERVER_URL + \"/questions/updatenotes\", { token, questionIdx: props.questionIdx, notes: notes });\n        updateEditMode(false);\n    }\n\n    return (\n        <Panel darkMode = { darkMode } style = {{ height: \"max-content\" }}>\n\n            <div style = {{ display: \"flex\", alignItems: \"center\", marginBottom: \"20px\" }}>\n\n                <div style = {{ font: \"30px Champion\" }}>Notes</div>\n\n                {\n                    editMode \n                        ?   <Button onClick = { submitNotes } > Save </Button>\n                        :   <Button onClick = { () => updateEditMode(true)}> Edit </Button>\n                }\n\n            </div>\n\n            { \n                editMode \n                    ? <TextArea darkMode = { darkMode } value = { notes } onChange = { handleEdit } />\n                    : <TextArea darkMode = { darkMode } value = { notes } readOnly onClick = { () => updateEditMode(true) } />\n            }\n\n        </Panel>\n    );\n}\n\nexport default Notes;\n\nconst Button = styled.button`\n    border-radius: 5px;\n    border-style: none;\n    background-color: #505050;\n    margin-left: 25px;\n    width: 100px;\n    height: 30px;\n    color: white;\n`\n\nconst TextArea = styled.textarea<{ darkMode: boolean }>`\n    width: 100%;\n    height: 100px;\n    padding: 20px;\n    border: 1px solid #80808033;\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n`\n"]},"metadata":{},"sourceType":"module"}