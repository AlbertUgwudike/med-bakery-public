{"ast":null,"code":"import _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Container } from \"./Common\";\nimport { startAudioRecordingId } from \"./types\";\nimport { playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { Transition } from \"react-transition-group\";\nimport { copy } from \"../ECGPage/Functions/utility\";\nimport QuestionContent from \"./QuestionContent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: true,\n  responsePlaying: false,\n  recording: false\n};\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var _useState = useState(initialAudioState),\n      _useState2 = _slicedToArray(_useState, 2),\n      audioState = _useState2[0],\n      updateAudioState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingRecorder = _useState4[0],\n      updateLoadingRecorder = _useState4[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStart: function onStart() {\n      updateLoadingRecorder(false);\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          recording: true\n        });\n      });\n      playStartTone();\n    },\n    onStop: function onStop(blobUrl, _) {\n      playStartTone();\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx.curr].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n\n      if (props.questionIdx.curr !== props.station.questions.length - 1) {\n        props.updateQuestionIdx({\n          prev: props.questionIdx.curr,\n          curr: props.questionIdx.curr + 1\n        });\n      }\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording;\n\n  var question = props.station.questions[props.questionIdx.curr];\n\n  var stopEverything = function stopEverything() {\n    var _audioState$promptAud, _audioState$responseW;\n\n    console.log(\"stop everything\");\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  }; // cease playback when compnent unmounts <=== six hour bug :)\n\n\n  useEffect(function () {\n    return stopEverything;\n  }, [audioState.promptAudio, audioState.responseWaveSurfer]);\n  var transitionStyles = props.questionIdx.curr < props.questionIdx.prev ? {\n    entering: {\n      transform: \"translateY(-150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(150%)\"\n    },\n    exited: {\n      transform: \"translateY(-150%)\"\n    }\n  } : {\n    entering: {\n      transform: \"translateY(150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(-150%)\"\n    },\n    exited: {\n      transform: \"translateY(150%)\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\"\n      },\n      children: props.station.questions.map(function (question, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(Transition, {\n          in: questionIdx === props.questionIdx.curr,\n          timeout: 500,\n          unmountOnExit: true,\n          mountOnEnter: true,\n          children: function children(state) {\n            return /*#__PURE__*/_jsxDEV(QuestionContent, {\n              question: question,\n              lastQuestion: questionIdx === props.station.questions.length - 1,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              updateQuestionIdx: props.updateQuestionIdx,\n              transitionStyle: transitionStyles[state]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: recordingStartAudioUrl,\n      id: startAudioRecordingId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"fTvLE78j2Qwl31Dnr9bUNtS+xbw=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx"],"names":["useEffect","useState","Container","startAudioRecordingId","playStartTone","recordingStartAudioUrl","useReactMediaRecorder","Transition","copy","QuestionContent","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionPage","props","audioState","updateAudioState","loadingRecorder","updateLoadingRecorder","audio","onStart","as","onStop","blobUrl","_","updateStation","s","questions","questionIdx","curr","responseAudio","station","length","updateQuestionIdx","prev","startRecording","stopRecording","question","stopEverything","console","log","pause","stop","transitionStyles","entering","transform","entered","exiting","exited","display","gridTemplateColumns","map","state"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, Question, responseId, startAudioRecordingId, Station } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { Transition } from \"react-transition-group\";\nimport { copy } from \"../ECGPage/Functions/utility\";\nimport QuestionContent from \"./QuestionContent\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: { prev: number; curr: number };\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<{ curr: number; prev: number }>>;\n};\n\ntype AudioState = {\n    promptAudio: HTMLAudioElement | null;\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst initialAudioState: AudioState = {\n    promptAudio: null,\n    responseWaveSurfer: undefined,\n    promptPlaying: true,\n    responsePlaying: false,\n    recording: false,\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState);\n    const [loadingRecorder, updateLoadingRecorder] = useState(false);\n\n    const { startRecording, stopRecording } = useReactMediaRecorder({\n        audio: true,\n        onStart: () => {\n            updateLoadingRecorder(false);\n            updateAudioState(as => ({ ...as, recording: true }));\n            playStartTone();\n        },\n        onStop: (blobUrl, _) => {\n            playStartTone();\n            props.updateStation(s => {\n                s.questions[props.questionIdx.curr].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n            if (props.questionIdx.curr !== props.station.questions.length - 1) {\n                props.updateQuestionIdx({\n                    prev: props.questionIdx.curr,\n                    curr: props.questionIdx.curr + 1,\n                });\n            }\n        },\n    });\n\n    const question = props.station.questions[props.questionIdx.curr];\n\n    const stopEverything = () => {\n        console.log(\"stop everything\");\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    // cease playback when compnent unmounts <=== six hour bug :)\n    useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]);\n\n    const transitionStyles: { [key: string]: any } =\n        props.questionIdx.curr < props.questionIdx.prev\n            ? {\n                  entering: { transform: \"translateY(-150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(150%)\" },\n                  exited: { transform: \"translateY(-150%)\" },\n              }\n            : {\n                  entering: { transform: \"translateY(150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(-150%)\" },\n                  exited: { transform: \"translateY(150%)\" },\n              };\n\n    return (\n        <Container>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                {props.station.questions.map((question, questionIdx) => (\n                    <Transition\n                        in={questionIdx === props.questionIdx.curr}\n                        timeout={500}\n                        unmountOnExit\n                        mountOnEnter\n                    >\n                        {state => (\n                            <QuestionContent\n                                question={question}\n                                lastQuestion={questionIdx === props.station.questions.length - 1}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                updateQuestionIdx={props.updateQuestionIdx}\n                                transitionStyle={transitionStyles[state]}\n                            />\n                        )}\n                    </Transition>\n                ))}\n            </div>\n\n            <audio src={recordingStartAudioUrl} id={startAudioRecordingId} />\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}