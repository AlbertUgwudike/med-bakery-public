{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/UserPage/ProductsPage.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ContentCard from \"./ContentCard\";\nimport { products } from \"./products\";\nimport { getEmailFromToken } from \"../../functions\";\nimport { Title } from \"../General/Title\";\nimport { Subtitle } from \"../General/Subtitle\";\nimport MetaContext from \"../../MetaContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductsPage = props => {\n  _s();\n\n  const {\n    darkMode,\n    SERVER_URL,\n    token\n  } = useContext(MetaContext);\n  const [purchasedProducts, updatePurchasedProducts] = useState([]);\n  const [email, updateEmail] = useState(\"User\");\n  useEffect(() => {\n    // retrieve porducts that the user has purchased from the database\n    axios.post(SERVER_URL + \"/users/purchased\", {\n      token\n    }).then(res => updatePurchasedProducts(res.data)).catch(console.log); // retrieve email to determine default display name\n\n    getEmailFromToken(token).then(token => updateEmail(token));\n  }, []);\n\n  const renderProducts = product => {\n    return /*#__PURE__*/_jsxDEV(ContentCard, {\n      name: product.name,\n      available: purchasedProducts.includes(product.name) || product.name === \"Anatomy\"\n      /* Temp Addition for anatomy section */\n      ,\n      description: product.description,\n      path: product.path,\n      imgsrc: product.imgsrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      darkMode: darkMode,\n      children: \"MedBakery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n      darkMode: darkMode,\n      children: [\"Welcome back \", email.substring(0, email.indexOf('@')), \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"0px 5%\",\n        height: \"max-content\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-around\"\n      },\n      children: products.map(renderProducts)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProductsPage, \"TkYm2dmxVUk3wn7xLB0ns7NNbOU=\");\n\n_c = ProductsPage;\nexport default ProductsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/UserPage/ProductsPage.tsx"],"names":["axios","useContext","useEffect","useState","ContentCard","products","getEmailFromToken","Title","Subtitle","MetaContext","ProductsPage","props","darkMode","SERVER_URL","token","purchasedProducts","updatePurchasedProducts","email","updateEmail","post","then","res","data","catch","console","log","renderProducts","product","name","includes","description","path","imgsrc","substring","indexOf","padding","height","display","flexWrap","justifyContent","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;;;AAIA,MAAMC,YAAY,GAAIC,KAAD,IAA8B;AAAA;;AAE/C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAAkCb,UAAU,CAACQ,WAAD,CAAlD;AACA,QAAM,CAACM,iBAAD,EAAoBC,uBAApB,IAA+Cb,QAAQ,CAAC,EAAD,CAA7D;AACA,QAAM,CAACc,KAAD,EAAQC,WAAR,IAAwBf,QAAQ,CAAC,MAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAF,IAAAA,KAAK,CAACmB,IAAN,CAAWN,UAAU,GAAG,kBAAxB,EAA4C;AAAEC,MAAAA;AAAF,KAA5C,EACMM,IADN,CACWC,GAAG,IAAIL,uBAAuB,CAACK,GAAG,CAACC,IAAL,CADzC,EAEMC,KAFN,CAEYC,OAAO,CAACC,GAFpB,EAFY,CAMZ;;AACAnB,IAAAA,iBAAiB,CAACQ,KAAD,CAAjB,CACKM,IADL,CACUN,KAAK,IAAII,WAAW,CAACJ,KAAD,CAD9B;AAEH,GATQ,EASN,EATM,CAAT;;AAYA,QAAMY,cAAc,GAAIC,OAAD,IAAsB;AACzC,wBACI,QAAC,WAAD;AACI,MAAA,IAAI,EAAKA,OAAO,CAACC,IADrB;AAEI,MAAA,SAAS,EAAKb,iBAAiB,CAACc,QAAlB,CAA2BF,OAAO,CAACC,IAAnC,KAA4CD,OAAO,CAACC,IAAR,KAAiB;AAAU;AAFzF;AAGI,MAAA,WAAW,EAAKD,OAAO,CAACG,WAH5B;AAII,MAAA,IAAI,EAAKH,OAAO,CAACI,IAJrB;AAKI,MAAA,MAAM,EAAKJ,OAAO,CAACK;AALvB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVD;;AAYA,sBACI;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAKpB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAKA,QAAvB;AAAA,kCACmBK,KAAK,CAACgB,SAAN,CAAgB,CAAhB,EAAmBhB,KAAK,CAACiB,OAAN,CAAc,GAAd,CAAnB,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAUI;AAAK,MAAA,KAAK,EAAI;AAAEC,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,MAAM,EAAE,aAA7B;AAA4CC,QAAAA,OAAO,EAAE,MAArD;AAA6DC,QAAAA,QAAQ,EAAE,MAAvE;AAA+EC,QAAAA,cAAc,EAAE;AAA/F,OAAd;AAAA,gBAEMlC,QAAQ,CAACmC,GAAT,CAAad,cAAb;AAFN;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADJ;AAmBH,CAjDD;;GAAMhB,Y;;KAAAA,Y;AAmDN,eAAeA,YAAf","sourcesContent":["import axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Product } from \"../../types\";\nimport ContentCard from \"./ContentCard\";\nimport { products } from \"./products\";\nimport styled from 'styled-components';\nimport { getEmailFromToken } from \"../../functions\";\nimport { Title } from \"../General/Title\";\nimport { Subtitle } from \"../General/Subtitle\";\nimport MetaContext from \"../../MetaContext\";\n\ntype ProductsPageProps = {}\n\nconst ProductsPage = (props: ProductsPageProps) => {\n\n    const { darkMode, SERVER_URL, token } = useContext(MetaContext);\n    const [purchasedProducts, updatePurchasedProducts] = useState([] as string[]);\n    const [email, updateEmail]  = useState(\"User\");\n    \n    useEffect(() => {\n        // retrieve porducts that the user has purchased from the database\n        axios.post(SERVER_URL + \"/users/purchased\", { token })\n             .then(res => updatePurchasedProducts(res.data))\n             .catch(console.log);\n\n        // retrieve email to determine default display name\n        getEmailFromToken(token)\n            .then(token => updateEmail(token!))\n    }, [])\n\n\n    const renderProducts = (product: Product) => {\n        return (\n            <ContentCard \n                name = { product.name } \n                available = { purchasedProducts.includes(product.name) || product.name === \"Anatomy\" /* Temp Addition for anatomy section */ }\n                description = { product.description }\n                path = { product.path }\n                imgsrc = { product.imgsrc }\n            />\n        )\n    }\n\n    return (\n        <>\n\n            <Title darkMode = { darkMode }>\n                MedBakery\n            </Title>\n\n            <Subtitle darkMode = { darkMode }>\n                Welcome back { email.substring(0, email.indexOf('@')) }!\n            </Subtitle>\n\n            <div style = {{ padding: \"0px 5%\", height: \"max-content\", display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\" }}>\n\n                { products.map(renderProducts) }\n\n            </div>\n\n        </>\n    )\n}\n\nexport default ProductsPage;"]},"metadata":{},"sourceType":"module"}