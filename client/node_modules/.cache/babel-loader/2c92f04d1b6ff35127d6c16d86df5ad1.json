{"ast":null,"code":"export var readVariableSizeIntegerLength = function readVariableSizeIntegerLength(dataView, offset) {\n  if (offset >= dataView.byteLength) {\n    return null;\n  }\n\n  var byte = dataView.getUint8(offset);\n\n  if (byte > 127) {\n    return 1;\n  }\n\n  if (byte > 63) {\n    return 2;\n  }\n\n  if (byte > 31) {\n    return 3;\n  }\n\n  if (byte > 15) {\n    return 4;\n  }\n\n  if (byte > 7) {\n    return 5;\n  }\n\n  if (byte > 3) {\n    return 6;\n  }\n\n  if (byte > 1) {\n    return 7;\n  }\n\n  if (byte > 0) {\n    return 8;\n  }\n\n  var length = readVariableSizeIntegerLength(dataView, offset + 1);\n  return length === null ? null : length + 8;\n};","map":{"version":3,"sources":["../../../src/functions/read-variable-size-integer-length.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,6BAA6B,GAA2C,SAAxE,6BAAwE,CAAC,QAAD,EAAW,MAAX,EAAqB;AACtG,MAAI,MAAM,IAAI,QAAQ,CAAC,UAAvB,EAAmC;AAC/B,WAAO,IAAP;AACH;;AAED,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAT,CAAkB,MAAlB,CAAb;;AAEA,MAAI,IAAI,GAAG,GAAX,EAAgB;AACZ,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,EAAX,EAAe;AACX,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,EAAX,EAAe;AACX,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,EAAX,EAAe;AACX,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,CAAX,EAAc;AACV,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,CAAX,EAAc;AACV,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,CAAX,EAAc;AACV,WAAO,CAAP;AACH;;AAED,MAAI,IAAI,GAAG,CAAX,EAAc;AACV,WAAO,CAAP;AACH;;AAED,MAAM,MAAM,GAAG,6BAA6B,CAAC,QAAD,EAAW,MAAM,GAAG,CAApB,CAA5C;AAEA,SAAO,MAAM,KAAK,IAAX,GAAkB,IAAlB,GAAyB,MAAM,GAAG,CAAzC;AACH,CA1CM","sourceRoot":"","sourcesContent":["export const readVariableSizeIntegerLength = (dataView, offset) => {\n    if (offset >= dataView.byteLength) {\n        return null;\n    }\n    const byte = dataView.getUint8(offset);\n    if (byte > 127) {\n        return 1;\n    }\n    if (byte > 63) {\n        return 2;\n    }\n    if (byte > 31) {\n        return 3;\n    }\n    if (byte > 15) {\n        return 4;\n    }\n    if (byte > 7) {\n        return 5;\n    }\n    if (byte > 3) {\n        return 6;\n    }\n    if (byte > 1) {\n        return 7;\n    }\n    if (byte > 0) {\n        return 8;\n    }\n    const length = readVariableSizeIntegerLength(dataView, offset + 1);\n    return length === null ? null : length + 8;\n};\n//# sourceMappingURL=read-variable-size-integer-length.js.map"]},"metadata":{},"sourceType":"module"}