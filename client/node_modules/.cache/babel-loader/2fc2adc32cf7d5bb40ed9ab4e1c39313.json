{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nexport var headerDetailSwitch = function headerDetailSwitch(lastPath, questionCount, questionIdx, updateQuestionIdx) {\n  _s();\n\n  var history = useHistory();\n  if (lastPath === \"Brief\") return {\n    title: \"Brief\",\n    percentage: 5,\n    briefAndExit: false,\n    timer: false,\n    nextFunc: function nextFunc() {\n      return history.push(\"/OSCE/Station\");\n    },\n    prevFunc: function prevFunc() {\n      return history.push(\"/OSCE/Station\");\n    }\n  };else if (lastPath === \"Question\") {\n    return {\n      title: \"Station One\",\n      percentage: 10 + 100 * questionIdx / questionCount,\n      briefAndExit: true,\n      timer: true,\n      nextFunc: function nextFunc() {\n        return questionIdx === questionCount - 1 ? history.push(\"/OSCE/Station/Summary\") : updateQuestionIdx(questionIdx + 1);\n      },\n      prevFunc: function prevFunc() {\n        return questionIdx === 0 ? {} : updateQuestionIdx(questionIdx + 1);\n      }\n    };\n  } else if (lastPath === \"Summary\") return {\n    title: \"Finish\",\n    percentage: 100,\n    briefAndExit: true,\n    timer: false,\n    nextFunc: function nextFunc() {\n      updateQuestionIdx(0);\n      history.push(\"/OSCE/Station/Review\");\n    },\n    prevFunc: function prevFunc() {}\n  };else if (lastPath === \"Review\") {\n    return {\n      title: \"Review\",\n      percentage: 10 + 100 * questionIdx / questionCount,\n      briefAndExit: true,\n      timer: false,\n      nextFunc: function nextFunc() {\n        return questionIdx === questionCount - 1 ? history.push(\"/OSCE/Station/MarkReview\") : updateQuestionIdx(questionIdx + 1);\n      },\n      prevFunc: function prevFunc() {\n        return questionIdx === 0 ? {} : updateQuestionIdx(questionIdx + 1);\n      }\n    };\n  } else return {\n    title: \"Summary\",\n    percentage: 100,\n    briefAndExit: true,\n    timer: false,\n    nextFunc: function nextFunc() {},\n    prevFunc: function prevFunc() {}\n  };\n};\n\n_s(headerDetailSwitch, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/headerDetailsSwitch.ts"],"names":["useHistory","headerDetailSwitch","lastPath","questionCount","questionIdx","updateQuestionIdx","history","title","percentage","briefAndExit","timer","nextFunc","push","prevFunc"],"mappings":";;AACA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAC9BC,QAD8B,EAE9BC,aAF8B,EAG9BC,WAH8B,EAI9BC,iBAJ8B,EAKd;AAAA;;AAChB,MAAMC,OAAO,GAAGN,UAAU,EAA1B;AAEA,MAAIE,QAAQ,KAAK,OAAjB,EACI,OAAO;AACHK,IAAAA,KAAK,EAAE,OADJ;AAEHC,IAAAA,UAAU,EAAE,CAFT;AAGHC,IAAAA,YAAY,EAAE,KAHX;AAIHC,IAAAA,KAAK,EAAE,KAJJ;AAKHC,IAAAA,QAAQ,EAAE;AAAA,aAAML,OAAO,CAACM,IAAR,CAAa,eAAb,CAAN;AAAA,KALP;AAMHC,IAAAA,QAAQ,EAAE;AAAA,aAAMP,OAAO,CAACM,IAAR,CAAa,eAAb,CAAN;AAAA;AANP,GAAP,CADJ,KASK,IAAIV,QAAQ,KAAK,UAAjB,EAA6B;AAC9B,WAAO;AACHK,MAAAA,KAAK,EAAE,aADJ;AAEHC,MAAAA,UAAU,EAAE,KAAM,MAAMJ,WAAP,GAAsBD,aAFpC;AAGHM,MAAAA,YAAY,EAAE,IAHX;AAIHC,MAAAA,KAAK,EAAE,IAJJ;AAKHC,MAAAA,QAAQ,EAAE;AAAA,eACNP,WAAW,KAAKD,aAAa,GAAG,CAAhC,GACMG,OAAO,CAACM,IAAR,CAAa,uBAAb,CADN,GAEMP,iBAAiB,CAACD,WAAW,GAAG,CAAf,CAHjB;AAAA,OALP;AASHS,MAAAA,QAAQ,EAAE;AAAA,eAAOT,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBC,iBAAiB,CAACD,WAAW,GAAG,CAAf,CAAjD;AAAA;AATP,KAAP;AAWH,GAZI,MAYE,IAAIF,QAAQ,KAAK,SAAjB,EACH,OAAO;AACHK,IAAAA,KAAK,EAAE,QADJ;AAEHC,IAAAA,UAAU,EAAE,GAFT;AAGHC,IAAAA,YAAY,EAAE,IAHX;AAIHC,IAAAA,KAAK,EAAE,KAJJ;AAKHC,IAAAA,QAAQ,EAAE,oBAAM;AACZN,MAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACAC,MAAAA,OAAO,CAACM,IAAR,CAAa,sBAAb;AACH,KARE;AASHC,IAAAA,QAAQ,EAAE,oBAAM,CAAE;AATf,GAAP,CADG,KAYF,IAAIX,QAAQ,KAAK,QAAjB,EAA2B;AAC5B,WAAO;AACHK,MAAAA,KAAK,EAAE,QADJ;AAEHC,MAAAA,UAAU,EAAE,KAAM,MAAMJ,WAAP,GAAsBD,aAFpC;AAGHM,MAAAA,YAAY,EAAE,IAHX;AAIHC,MAAAA,KAAK,EAAE,KAJJ;AAKHC,MAAAA,QAAQ,EAAE;AAAA,eACNP,WAAW,KAAKD,aAAa,GAAG,CAAhC,GACMG,OAAO,CAACM,IAAR,CAAa,0BAAb,CADN,GAEMP,iBAAiB,CAACD,WAAW,GAAG,CAAf,CAHjB;AAAA,OALP;AASHS,MAAAA,QAAQ,EAAE;AAAA,eAAOT,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBC,iBAAiB,CAACD,WAAW,GAAG,CAAf,CAAjD;AAAA;AATP,KAAP;AAWH,GAZI,MAaD,OAAO;AACHG,IAAAA,KAAK,EAAE,SADJ;AAEHC,IAAAA,UAAU,EAAE,GAFT;AAGHC,IAAAA,YAAY,EAAE,IAHX;AAIHC,IAAAA,KAAK,EAAE,KAJJ;AAKHC,IAAAA,QAAQ,EAAE,oBAAM,CAAE,CALf;AAMHE,IAAAA,QAAQ,EAAE,oBAAM,CAAE;AANf,GAAP;AAQP,CA9DM;;GAAMZ,kB;UAMOD,U","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { HeaderDetails } from \"./types\";\n\nexport const headerDetailSwitch = (\n    lastPath: string,\n    questionCount: number,\n    questionIdx: number,\n    updateQuestionIdx: Dispatch<SetStateAction<number>>\n): HeaderDetails => {\n    const history = useHistory();\n\n    if (lastPath === \"Brief\")\n        return {\n            title: \"Brief\",\n            percentage: 5,\n            briefAndExit: false,\n            timer: false,\n            nextFunc: () => history.push(\"/OSCE/Station\"),\n            prevFunc: () => history.push(\"/OSCE/Station\"),\n        };\n    else if (lastPath === \"Question\") {\n        return {\n            title: \"Station One\",\n            percentage: 10 + (100 * questionIdx) / questionCount,\n            briefAndExit: true,\n            timer: true,\n            nextFunc: () =>\n                questionIdx === questionCount - 1\n                    ? history.push(\"/OSCE/Station/Summary\")\n                    : updateQuestionIdx(questionIdx + 1),\n            prevFunc: () => (questionIdx === 0 ? {} : updateQuestionIdx(questionIdx + 1)),\n        };\n    } else if (lastPath === \"Summary\")\n        return {\n            title: \"Finish\",\n            percentage: 100,\n            briefAndExit: true,\n            timer: false,\n            nextFunc: () => {\n                updateQuestionIdx(0);\n                history.push(\"/OSCE/Station/Review\");\n            },\n            prevFunc: () => {},\n        };\n    else if (lastPath === \"Review\") {\n        return {\n            title: \"Review\",\n            percentage: 10 + (100 * questionIdx) / questionCount,\n            briefAndExit: true,\n            timer: false,\n            nextFunc: () =>\n                questionIdx === questionCount - 1\n                    ? history.push(\"/OSCE/Station/MarkReview\")\n                    : updateQuestionIdx(questionIdx + 1),\n            prevFunc: () => (questionIdx === 0 ? {} : updateQuestionIdx(questionIdx + 1)),\n        };\n    } else\n        return {\n            title: \"Summary\",\n            percentage: 100,\n            briefAndExit: true,\n            timer: false,\n            nextFunc: () => {},\n            prevFunc: () => {},\n        };\n};\n"]},"metadata":{},"sourceType":"module"}