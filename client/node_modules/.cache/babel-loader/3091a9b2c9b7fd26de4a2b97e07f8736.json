{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionSectionSelector.tsx\",\n    _s = $RefreshSig$();\n\nimport { FaMinus, FaCheck, FaTimes } from \"react-icons/fa\";\nimport styled from 'styled-components';\nimport { useContext } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionSectionSelector = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const buttonWidthPercentage = 70 / props.currentQuestion.sections.length;\n  const buttonSeparation = 15 / props.currentQuestion.sections.length;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    darkMode: darkMode,\n    children: Array(props.currentQuestion.sections.length).fill(0).map((_, idx) => {\n      const allPriorSectionsAnswered = props.currentQuestion.sections.slice(0, idx).reduce((flag, section) => flag && section.selectedOption !== -1, true);\n      const buttonFunc = allPriorSectionsAnswered ? () => props.updateSectionIdx(idx) : () => {};\n      const buttonColor = idx === props.sectionIdx ? \"#FAD000\" : allPriorSectionsAnswered ? \"white\" : \"grey\";\n\n      let buttonContents = /*#__PURE__*/_jsxDEV(FaMinus, {\n        color: \"grey\"\n      }, \"next\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 42\n      }, this);\n\n      if (props.currentQuestion.sections[idx].selectedOption === props.currentQuestion.sections[idx].correctOption) buttonContents = /*#__PURE__*/_jsxDEV(FaCheck, {\n        color: \"#1C725C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 42\n      }, this);else if (props.currentQuestion.sections[idx].selectedOption !== -1) buttonContents = /*#__PURE__*/_jsxDEV(FaTimes, {\n        color: \"#A94D53\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 42\n      }, this);\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: buttonFunc,\n        buttonWidthPercentage: buttonWidthPercentage,\n        buttonSeparation: buttonSeparation,\n        buttonColor: buttonColor,\n        darkMode: darkMode,\n        children: buttonContents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionSectionSelector, \"PnQ/ys69gTWC7ND+ZGDKVPZ9Xno=\");\n\n_c = QuestionSectionSelector;\nexport default QuestionSectionSelector;\nconst Container = styled.div`\n    border-radius: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    background-color: ${props => props.darkMode ? \"transparent\" : \"#f6f5f0\"};\n`;\n_c2 = Container;\nconst Button = styled.button`\n    width: ${props => props.buttonWidthPercentage + \"%\"}; \n    margin: ${props => \"10px \" + props.buttonSeparation + \"% 10px \" + props.buttonSeparation + \"%\"}; \n    background-color: ${props => props.buttonColor};\n    font-size: 12px;\n    height: 25px;\n    border-radius: 15px;\n    padding: 0l;\n    border: 1px solid #3F2091;\n`;\n_c3 = Button;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"QuestionSectionSelector\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionSectionSelector.tsx"],"names":["FaMinus","FaCheck","FaTimes","styled","useContext","MetaContext","QuestionSectionSelector","props","darkMode","buttonWidthPercentage","currentQuestion","sections","length","buttonSeparation","Array","fill","map","_","idx","allPriorSectionsAnswered","slice","reduce","flag","section","selectedOption","buttonFunc","updateSectionIdx","buttonColor","sectionIdx","buttonContents","correctOption","Container","div","Button","button"],"mappings":"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","sourcesContent":["import { FinalsQuestion } from \"../../types\";\nimport { FaMinus, FaCheck, FaTimes } from \"react-icons/fa\";\nimport styled from 'styled-components';\nimport { useContext } from \"react\";\nimport MetaContext from \"../../MetaContext\";\n\ntype QuestionSecctionSelectorProps = {\n    currentQuestion: FinalsQuestion;\n    sectionIdx: number;\n    updateSectionIdx: React.Dispatch<React.SetStateAction<number>>;\n    darkMode: boolean;\n}\n\nconst QuestionSectionSelector = (props: QuestionSecctionSelectorProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n    const buttonWidthPercentage = 70 / props.currentQuestion.sections.length;\n    const buttonSeparation = 15 / (props.currentQuestion.sections.length);\n\n    return (\n        <Container darkMode = { darkMode }>\n\n            { \n                Array(props.currentQuestion.sections.length).fill(0).map((_, idx) => {\n                    const allPriorSectionsAnswered = props.currentQuestion.sections\n                                                          .slice(0, idx)\n                                                          .reduce((flag, section) => flag && section.selectedOption !== -1, true);\n                    const buttonFunc = allPriorSectionsAnswered ? () => props.updateSectionIdx(idx) : () => {};\n                    const buttonColor = idx === props.sectionIdx ? \"#FAD000\" : ( allPriorSectionsAnswered ? \"white\" : \"grey\" );\n                    \n                    let buttonContents = <FaMinus color = \"grey\" key=\"next\"/>;\n                    if (props.currentQuestion.sections[idx].selectedOption === props.currentQuestion.sections[idx].correctOption) \n                        buttonContents = <FaCheck color = \"#1C725C\"/>\n                    else if (props.currentQuestion.sections[idx].selectedOption !== -1)\n                        buttonContents = <FaTimes color = \"#A94D53\"/>\n\n                    return (\n                        <Button \n                            onClick = { buttonFunc } \n                            buttonWidthPercentage = { buttonWidthPercentage } \n                            buttonSeparation = { buttonSeparation } \n                            buttonColor = { buttonColor }\n                            darkMode = { darkMode }\n                        >\n                            {buttonContents} \n                        </Button>\n                    )\n                })\n            }\n        </Container>\n    )\n}\n\nexport default QuestionSectionSelector;\n\nconst Container = styled.div<{ darkMode: boolean }>`\n    border-radius: 20px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    background-color: ${ props => props.darkMode ? \"transparent\" : \"#f6f5f0\" };\n`\n\nconst Button = styled.button<{ darkMode: boolean, buttonWidthPercentage: number, buttonSeparation: number, buttonColor: string }>`\n    width: ${ props => props.buttonWidthPercentage + \"%\" }; \n    margin: ${ props => \"10px \" + props.buttonSeparation + \"% 10px \" + props.buttonSeparation + \"%\" }; \n    background-color: ${ props => props.buttonColor };\n    font-size: 12px;\n    height: 25px;\n    border-radius: 15px;\n    padding: 0l;\n    border: 1px solid #3F2091;\n`\n"]},"metadata":{},"sourceType":"module"}