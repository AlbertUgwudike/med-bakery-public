{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Box, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, responseId, startAudioRecordingId } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { Transition } from \"react-transition-group\";\nimport { copy } from \"../ECGPage/Functions/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: true,\n  responsePlaying: false,\n  recording: false\n};\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var _useState = useState(initialAudioState),\n      _useState2 = _slicedToArray(_useState, 2),\n      audioState = _useState2[0],\n      updateAudioState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingRecorder = _useState4[0],\n      updateLoadingRecorder = _useState4[1];\n\n  var _useState5 = useState(Array(props.station.questions.length).fill(false)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      promptPlaying = _useState6[0],\n      updatePromptPlaying = _useState6[1];\n\n  var _useState7 = useState(Array(props.station.questions.length).fill(false)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      responsePlaying = _useState8[0],\n      updateresponsePlaying = _useState8[1];\n\n  var _useState9 = useState(Array(props.station.questions.length).fill(false)),\n      _useState10 = _slicedToArray(_useState9, 2),\n      recording = _useState10[0],\n      updateRecording = _useState10[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStart: function onStart() {\n      updateLoadingRecorder(false);\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          recording: true\n        });\n      });\n      playStartTone();\n    },\n    onStop: function onStop(blobUrl, _) {\n      playStartTone();\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx.curr].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n\n      if (props.questionIdx.curr !== props.station.questions.length - 1) {\n        props.updateQuestionIdx({\n          prev: props.questionIdx.curr,\n          curr: props.questionIdx.curr + 1\n        });\n      }\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording;\n\n  var question = props.station.questions[props.questionIdx.curr];\n\n  var stopEverything = function stopEverything() {\n    var _audioState$promptAud, _audioState$responseW;\n\n    console.log(\"stop everything\");\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  };\n\n  var play = function play(id) {\n    var _audioState$promptAud2, _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: id === promptId,\n        responsePlaying: id === responseId\n      });\n    });\n    if (id === promptId) (_audioState$promptAud2 = audioState.promptAudio) === null || _audioState$promptAud2 === void 0 ? void 0 : _audioState$promptAud2.play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  var record = function record() {\n    stopEverything();\n    updateLoadingRecorder(true);\n    startRecording();\n  };\n\n  useEffect(function () {\n    var container = document.getElementById(\"waveform\");\n    if (container) container.innerHTML = \"\";\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        responseWaveSurfer: generateWaveSurfer(\"waveform\", question.responseAudio, stopEverything)\n      });\n    });\n  }, [question.responseAudio]); // play prompt whenever questionchanges\n\n  useEffect(function () {\n    console.log(\"rerender\");\n    var promptAudio = document.getElementById(promptId);\n    promptAudio.addEventListener(\"ended\", function (_) {\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          promptPlaying: false\n        });\n      });\n    });\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptAudio: promptAudio,\n        promptPlaying: true\n      });\n    });\n  }, [props.questionIdx]); // cease playback when compnent unmounts <=== six hour bug :)\n\n  useEffect(function () {\n    return stopEverything;\n  }, [audioState.promptAudio, audioState.responseWaveSurfer]);\n  var defaultStyle = {\n    gridRowStart: 1,\n    gridColumnStart: 1,\n    transition: \"transform \".concat(500, \"ms\")\n  };\n  var transitionStyles = props.questionIdx.curr < props.questionIdx.prev ? {\n    entering: {\n      transform: \"translateY(-150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(150%)\"\n    },\n    exited: {\n      transform: \"translateY(-150%)\"\n    }\n  } : {\n    entering: {\n      transform: \"translateY(150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(-150%)\"\n    },\n    exited: {\n      transform: \"translateY(150%)\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\"\n      },\n      children: [props.station.questions.map(function (q, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Transition, {\n            in: questionIdx === props.questionIdx.curr,\n            timeout: 500,\n            unmountOnExit: true,\n            children: function children(state) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: _objectSpread(_objectSpread({}, defaultStyle), transitionStyles[state]),\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  style: {\n                    textAlign: \"center\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n                    question: question,\n                    toggle: function toggle() {\n                      audioState.promptPlaying ? stopEverything() : play(promptId);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 41\n                  }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 41\n                  }, _this), /*#__PURE__*/_jsxDEV(Img, {\n                    src: question.img\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 192,\n                    columnNumber: 41\n                  }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 193,\n                    columnNumber: 41\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 37\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 33\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              gridRowStart: 2,\n              gridColumnStart: 1,\n              zIndex: 1000,\n              backgroundColor: \"#1c2124\",\n              height: \"100vh\"\n            },\n            children: /*#__PURE__*/_jsxDEV(TaskSection, {\n              recording: audioState.recording,\n              recordResponse: record,\n              playing: audioState.responsePlaying,\n              playResponse: function playResponse() {\n                return play(responseId);\n              },\n              stopEverything: stopEverything,\n              responseAvailable: question.responseAudio !== \"\",\n              loadingRecorder: loadingRecorder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true);\n      }), /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: recordingStartAudioUrl,\n        id: startAudioRecordingId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"yrccaT9+L3HcaKGT6UlnjFEwPP8=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    width: 60%;\\n    transition: width 0.2s;\\n\"])));\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPage\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx"],"names":["useEffect","useState","styled","Box","Container","TaskSection","promptId","responseId","startAudioRecordingId","QuestionPrompt","generateWaveSurfer","playStartTone","recordingStartAudioUrl","useReactMediaRecorder","Transition","copy","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionPage","props","audioState","updateAudioState","loadingRecorder","updateLoadingRecorder","Array","station","questions","length","fill","updatePromptPlaying","updateresponsePlaying","updateRecording","audio","onStart","as","onStop","blobUrl","_","updateStation","s","questionIdx","curr","responseAudio","updateQuestionIdx","prev","startRecording","stopRecording","question","stopEverything","console","log","pause","stop","play","id","record","container","document","getElementById","innerHTML","addEventListener","defaultStyle","gridRowStart","gridColumnStart","transition","transitionStyles","entering","transform","entered","exiting","exited","display","gridTemplateColumns","map","q","state","textAlign","img","zIndex","backgroundColor","height","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, Question, responseId, startAudioRecordingId, Station } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { Transition } from \"react-transition-group\";\nimport { copy } from \"../ECGPage/Functions/utility\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: { prev: number; curr: number };\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<{ curr: number; prev: number }>>;\n};\n\ntype AudioState = {\n    promptAudio: HTMLAudioElement | null;\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst initialAudioState: AudioState = {\n    promptAudio: null,\n    responseWaveSurfer: undefined,\n    promptPlaying: true,\n    responsePlaying: false,\n    recording: false,\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState);\n    const [loadingRecorder, updateLoadingRecorder] = useState(false);\n\n    const [promptPlaying, updatePromptPlaying] = useState(\n        Array(props.station.questions.length).fill(false)\n    );\n    const [responsePlaying, updateresponsePlaying] = useState(\n        Array(props.station.questions.length).fill(false)\n    );\n    const [recording, updateRecording] = useState(\n        Array(props.station.questions.length).fill(false)\n    );\n\n    const { startRecording, stopRecording } = useReactMediaRecorder({\n        audio: true,\n        onStart: () => {\n            updateLoadingRecorder(false);\n            updateAudioState(as => ({ ...as, recording: true }));\n            playStartTone();\n        },\n        onStop: (blobUrl, _) => {\n            playStartTone();\n            props.updateStation(s => {\n                s.questions[props.questionIdx.curr].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n            if (props.questionIdx.curr !== props.station.questions.length - 1) {\n                props.updateQuestionIdx({\n                    prev: props.questionIdx.curr,\n                    curr: props.questionIdx.curr + 1,\n                });\n            }\n        },\n    });\n\n    const question = props.station.questions[props.questionIdx.curr];\n\n    const stopEverything = () => {\n        console.log(\"stop everything\");\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId,\n        }));\n\n        if (id === promptId) audioState.promptAudio?.play();\n        else audioState.responseWaveSurfer?.play();\n    };\n\n    const record = () => {\n        stopEverything();\n        updateLoadingRecorder(true);\n        startRecording();\n    };\n\n    useEffect(() => {\n        const container = document.getElementById(\"waveform\");\n        if (container) container.innerHTML = \"\";\n\n        updateAudioState(as => ({\n            ...as,\n            responseWaveSurfer: generateWaveSurfer(\n                \"waveform\",\n                question.responseAudio,\n                stopEverything\n            ),\n        }));\n    }, [question.responseAudio]);\n\n    // play prompt whenever questionchanges\n    useEffect(() => {\n        console.log(\"rerender\");\n        const promptAudio = document.getElementById(promptId) as HTMLAudioElement;\n        promptAudio.addEventListener(\"ended\", _ => {\n            updateAudioState(as => ({ ...as, promptPlaying: false }));\n        });\n        updateAudioState(as => ({\n            ...as,\n            promptAudio,\n            promptPlaying: true,\n        }));\n    }, [props.questionIdx]);\n\n    // cease playback when compnent unmounts <=== six hour bug :)\n    useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]);\n\n    const defaultStyle = {\n        gridRowStart: 1,\n        gridColumnStart: 1,\n        transition: `transform ${500}ms`,\n    };\n\n    const transitionStyles: { [key: string]: any } =\n        props.questionIdx.curr < props.questionIdx.prev\n            ? {\n                  entering: { transform: \"translateY(-150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(150%)\" },\n                  exited: { transform: \"translateY(-150%)\" },\n              }\n            : {\n                  entering: { transform: \"translateY(150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(-150%)\" },\n                  exited: { transform: \"translateY(150%)\" },\n              };\n\n    return (\n        <Container>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                {props.station.questions.map((q, questionIdx) => (\n                    <>\n                        <Transition\n                            in={questionIdx === props.questionIdx.curr}\n                            timeout={500}\n                            unmountOnExit\n                        >\n                            {state => (\n                                <div\n                                    style={{\n                                        ...defaultStyle,\n                                        ...transitionStyles[state],\n                                    }}\n                                >\n                                    <Box style={{ textAlign: \"center\" }}>\n                                        <QuestionPrompt\n                                            question={question}\n                                            toggle={() => {\n                                                audioState.promptPlaying\n                                                    ? stopEverything()\n                                                    : play(promptId);\n                                            }}\n                                        />\n\n                                        <br></br>\n\n                                        <Img src={question.img}></Img>\n                                        <br />\n                                    </Box>\n                                </div>\n                            )}\n                        </Transition>\n                        <div\n                            style={{\n                                gridRowStart: 2,\n                                gridColumnStart: 1,\n                                zIndex: 1000,\n                                backgroundColor: \"#1c2124\",\n                                height: \"100vh\",\n                            }}\n                        >\n                            <TaskSection\n                                recording={audioState.recording}\n                                recordResponse={record}\n                                playing={audioState.responsePlaying}\n                                playResponse={() => play(responseId)}\n                                stopEverything={stopEverything}\n                                responseAvailable={question.responseAudio !== \"\"}\n                                loadingRecorder={loadingRecorder}\n                            />\n                        </div>\n                    </>\n                ))}\n\n                <audio src={recordingStartAudioUrl} id={startAudioRecordingId} />\n            </div>\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n\nconst Img = styled.img`\n    display: block;\n    margin: auto;\n    width: 60%;\n    transition: width 0.2s;\n`;\n"]},"metadata":{},"sourceType":"module"}