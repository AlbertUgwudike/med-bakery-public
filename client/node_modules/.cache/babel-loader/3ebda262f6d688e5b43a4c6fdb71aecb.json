{"ast":null,"code":"export var createWakeLock = function createWakeLock(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (type) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var releaseWakeLock = function releaseWakeLock(wakeLockSentinel) {\n        return wakeLockSentinel.release().catch(function () {// Ignore errors.\n        });\n      };\n\n      var removeReleaseEventListener = function removeReleaseEventListener(wakeLockSentinel) {\n        wakeLockSentinel.onrelease = null;\n      };\n\n      var isActive = true;\n\n      var unsubscribeWhileRequesting = function unsubscribeWhileRequesting() {\n        isActive = false;\n      };\n\n      var unsubscribe = unsubscribeWhileRequesting;\n\n      var requestWakeLock = function requestWakeLock() {\n        return window.navigator.wakeLock.request(type).then(function (wakeLockSentinel) {\n          if (isActive) {\n            observer.next(true);\n          }\n\n          if (isActive) {\n            wakeLockSentinel.onrelease = function () {\n              observer.next(false);\n              unsubscribe = unsubscribeWhileRequesting;\n              removeReleaseEventListener(wakeLockSentinel);\n              requestWakeLock();\n            };\n\n            unsubscribe = function unsubscribe() {\n              removeReleaseEventListener(wakeLockSentinel);\n              releaseWakeLock(wakeLockSentinel);\n            };\n          } else {\n            releaseWakeLock(wakeLockSentinel);\n          }\n        }, function (err) {\n          if (isActive) {\n            observer.error(err);\n          }\n        });\n      };\n\n      requestWakeLock();\n      return function () {\n        return unsubscribe();\n      };\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/wake-lock.ts"],"names":[],"mappings":"AAGA,OAAO,IAAM,cAAc,GAAqB,SAAnC,cAAmC,CAAC,qBAAD,EAAwB,MAAxB,EAAgC,qBAAhC,EAAyD;AACrG,SAAO,UAAC,IAAD;AAAA,WACH,qBAAqB,CAAC,UAAC,QAAD,EAAa;AAC/B,UAAI,MAAM,KAAK,IAAX,IAAmB,MAAM,CAAC,SAAP,KAAqB,SAAxC,IAAqD,MAAM,CAAC,SAAP,CAAiB,QAAjB,KAA8B,SAAvF,EAAkG;AAC9F,eAAO,qBAAqB,CAAC,QAAD,CAA5B;AACH;;AAED,UAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,gBAAD;AAAA,eACpB,gBAAgB,CAAC,OAAjB,GAA2B,KAA3B,CAAiC,YAAK,CAClC;AACH,SAFD,CADoB;AAAA,OAAxB;;AAIA,UAAM,0BAA0B,GAAG,SAA7B,0BAA6B,CAAC,gBAAD,EAAwC;AACvE,QAAA,gBAAgB,CAAC,SAAjB,GAA6B,IAA7B;AACH,OAFD;;AAIA,UAAI,QAAQ,GAAG,IAAf;;AAEA,UAAM,0BAA0B,GAAG,SAA7B,0BAA6B,GAAK;AACpC,QAAA,QAAQ,GAAG,KAAX;AACH,OAFD;;AAIA,UAAI,WAAW,GAAG,0BAAlB;;AAEA,UAAM,eAAe,GAAG,SAAlB,eAAkB;AAAA,eACpB,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,OAA1B,CAAkC,IAAlC,EAAwC,IAAxC,CACI,UAAC,gBAAD,EAAqB;AACjB,cAAI,QAAJ,EAAc;AACV,YAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACH;;AAED,cAAI,QAAJ,EAAc;AACV,YAAA,gBAAgB,CAAC,SAAjB,GAA6B,YAAK;AAC9B,cAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AAEA,cAAA,WAAW,GAAG,0BAAd;AAEA,cAAA,0BAA0B,CAAC,gBAAD,CAA1B;AACA,cAAA,eAAe;AAClB,aAPD;;AASA,YAAA,WAAW,GAAG,uBAAK;AACf,cAAA,0BAA0B,CAAC,gBAAD,CAA1B;AACA,cAAA,eAAe,CAAC,gBAAD,CAAf;AACH,aAHD;AAIH,WAdD,MAcO;AACH,YAAA,eAAe,CAAC,gBAAD,CAAf;AACH;AACJ,SAvBL,EAwBI,UAAC,GAAD,EAAQ;AACJ,cAAI,QAAJ,EAAc;AACV,YAAA,QAAQ,CAAC,KAAT,CAAe,GAAf;AACH;AACJ,SA5BL,CADoB;AAAA,OAAxB;;AAgCA,MAAA,eAAe;AAEf,aAAO;AAAA,eAAM,WAAW,EAAjB;AAAA,OAAP;AACH,KAxDoB,CADlB;AAAA,GAAP;AA0DH,CA3DM","sourceRoot":"","sourcesContent":["export const createWakeLock = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (type) => wrapSubscribeFunction((observer) => {\n        if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n            return emitNotSupportedError(observer);\n        }\n        const releaseWakeLock = (wakeLockSentinel) => wakeLockSentinel.release().catch(() => {\n            // Ignore errors.\n        });\n        const removeReleaseEventListener = (wakeLockSentinel) => {\n            wakeLockSentinel.onrelease = null;\n        };\n        let isActive = true;\n        const unsubscribeWhileRequesting = () => {\n            isActive = false;\n        };\n        let unsubscribe = unsubscribeWhileRequesting;\n        const requestWakeLock = () => window.navigator.wakeLock.request(type).then((wakeLockSentinel) => {\n            if (isActive) {\n                observer.next(true);\n            }\n            if (isActive) {\n                wakeLockSentinel.onrelease = () => {\n                    observer.next(false);\n                    unsubscribe = unsubscribeWhileRequesting;\n                    removeReleaseEventListener(wakeLockSentinel);\n                    requestWakeLock();\n                };\n                unsubscribe = () => {\n                    removeReleaseEventListener(wakeLockSentinel);\n                    releaseWakeLock(wakeLockSentinel);\n                };\n            }\n            else {\n                releaseWakeLock(wakeLockSentinel);\n            }\n        }, (err) => {\n            if (isActive) {\n                observer.error(err);\n            }\n        });\n        requestWakeLock();\n        return () => unsubscribe();\n    });\n};\n//# sourceMappingURL=wake-lock.js.map"]},"metadata":{},"sourceType":"module"}