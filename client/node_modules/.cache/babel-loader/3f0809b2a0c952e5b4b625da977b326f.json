{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nvar encoderIds = new Set();\nexport var wrap = createBroker({\n  encode: function encode(_ref) {\n    var call = _ref.call;\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(encoderId, timeslice) {\n        var arrayBuffers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return call('encode', {\n                  encoderId: encoderId,\n                  timeslice: timeslice\n                });\n\n              case 2:\n                arrayBuffers = _context.sent;\n                encoderIds.delete(encoderId);\n                return _context.abrupt(\"return\", arrayBuffers);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  },\n  instantiate: function instantiate(_ref3) {\n    var call = _ref3.call;\n    return /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mimeType, sampleRate) {\n        var encoderId, port;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                encoderId = addUniqueNumber(encoderIds);\n                _context2.next = 3;\n                return call('instantiate', {\n                  encoderId: encoderId,\n                  mimeType: mimeType,\n                  sampleRate: sampleRate\n                });\n\n              case 3:\n                port = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  encoderId: encoderId,\n                  port: port\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n  },\n  register: function register(_ref5) {\n    var call = _ref5.call;\n    return function (port) {\n      return call('register', {\n        port: port\n      }, [port]);\n    };\n  }\n});\nexport var load = function load(url) {\n  var worker = new Worker(url);\n  return wrap(worker);\n};","map":{"version":3,"sources":["../../src/module.ts"],"names":[],"mappings":";;AAAA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,eAAT,QAAgC,qBAAhC;AAKA;;;AAGG;;AACH,cAAc,oBAAd;AACA,cAAc,eAAd;AAEA,IAAM,UAAU,GAAgB,IAAI,GAAJ,EAAhC;AAEA,OAAO,IAAM,IAAI,GAAmC,YAAY,CAAuE;AACnI,EAAA,MAAM,EAAE,sBAAa;AAAA,QAAV,IAAU,QAAV,IAAU;AACjB;AAAA,2EAAO,iBAAO,SAAP,EAAkB,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwB,IAAI,CAAC,QAAD,EAAW;AAAE,kBAAA,SAAS,EAAT,SAAF;AAAa,kBAAA,SAAS,EAAT;AAAb,iBAAX,CAD5B;;AAAA;AACG,gBAAA,YADH;AAGH,gBAAA,UAAU,CAAC,MAAX,CAAkB,SAAlB;AAHG,iDAKI,YALJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAOH,GATkI;AAUnI,EAAA,WAAW,EAAE,4BAAa;AAAA,QAAV,IAAU,SAAV,IAAU;AACtB;AAAA,2EAAO,kBAAO,QAAP,EAAiB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,gBAAA,SADH,GACe,eAAe,CAAC,UAAD,CAD9B;AAAA;AAAA,uBAEgB,IAAI,CAAC,aAAD,EAAgB;AAAE,kBAAA,SAAS,EAAT,SAAF;AAAa,kBAAA,QAAQ,EAAR,QAAb;AAAuB,kBAAA,UAAU,EAAV;AAAvB,iBAAhB,CAFpB;;AAAA;AAEG,gBAAA,IAFH;AAAA,kDAII;AAAE,kBAAA,SAAS,EAAT,SAAF;AAAa,kBAAA,IAAI,EAAJ;AAAb,iBAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAMH,GAjBkI;AAkBnI,EAAA,QAAQ,EAAE,yBAAa;AAAA,QAAV,IAAU,SAAV,IAAU;AACnB,WAAO,UAAC,IAAD,EAAS;AACZ,aAAO,IAAI,CAAC,UAAD,EAAa;AAAE,QAAA,IAAI,EAAJ;AAAF,OAAb,EAAuB,CAAC,IAAD,CAAvB,CAAX;AACH,KAFD;AAGH;AAtBkI,CAAvE,CAAzD;AAyBP,OAAO,IAAM,IAAI,GAAkC,SAAtC,IAAsC,CAAC,GAAD,EAAgB;AAC/D,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,GAAX,CAAf;AAEA,SAAO,IAAI,CAAC,MAAD,CAAX;AACH,CAJM","sourceRoot":"","sourcesContent":["import { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderIds = new Set();\nexport const wrap = createBroker({\n    encode: ({ call }) => {\n        return async (encoderId, timeslice) => {\n            const arrayBuffers = await call('encode', { encoderId, timeslice });\n            encoderIds.delete(encoderId);\n            return arrayBuffers;\n        };\n    },\n    instantiate: ({ call }) => {\n        return async (mimeType, sampleRate) => {\n            const encoderId = addUniqueNumber(encoderIds);\n            const port = await call('instantiate', { encoderId, mimeType, sampleRate });\n            return { encoderId, port };\n        };\n    },\n    register: ({ call }) => {\n        return (port) => {\n            return call('register', { port }, [port]);\n        };\n    }\n});\nexport const load = (url) => {\n    const worker = new Worker(url);\n    return wrap(worker);\n};\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}