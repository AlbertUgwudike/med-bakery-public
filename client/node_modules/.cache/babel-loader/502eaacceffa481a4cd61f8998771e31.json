{"ast":null,"code":"import _objectSpread from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{Container}from\"../Common\";import QuestionReviewContent from\"./QuestionReviewContent\";import{useHistory}from\"react-router-dom\";import Header from\"../Header\";import Slider from\"react-slick\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var QuestionReviewPage=function QuestionReviewPage(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),sliderRef=_useState2[0],setSliderRef=_useState2[1];var history=useHistory();var idx=props.questionIdx;var questionCount=props.station.questions.length;var nextFunc=function nextFunc(){idx===questionCount-1?history.push(\"/OSCE/Station/MarkReview\"):props.updateIdx(idx+1);sliderRef===null||sliderRef===void 0?void 0:sliderRef.slickNext();};var prevFunc=function prevFunc(){if(idx>0)props.updateIdx(idx-1);sliderRef===null||sliderRef===void 0?void 0:sliderRef.slickPrev();};var settings={arrows:false,infinite:false,slidesToShow:1,slidesToScroll:1,vertical:true,initialSlide:props.questionIdx};return/*#__PURE__*/_jsx(Container,{style:{textAlign:\"center\"},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:\"grid\",gridTemplateColumns:\"1fr\"},children:[/*#__PURE__*/_jsx(Header,{updateStation:props.updateStation,station:props.station,handleExit:props.handleExit,title:\"Review\",percentage:10+100*idx/questionCount,timer:false,nextFunc:nextFunc,prevFunc:prevFunc}),/*#__PURE__*/_jsx(Slider,_objectSpread(_objectSpread({ref:setSliderRef},settings),{},{children:props.station.questions.map(function(q,questionIdx){return/*#__PURE__*/_jsx(QuestionReviewContent,{question:q,questionIdx:questionIdx,updateStation:props.updateStation,reviewMode:props.reviewMode,active:questionIdx===props.questionIdx});})}))]})});};export default QuestionReviewPage;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewPage.tsx"],"names":["useState","Container","QuestionReviewContent","useHistory","Header","Slider","QuestionReviewPage","props","sliderRef","setSliderRef","history","idx","questionIdx","questionCount","station","questions","length","nextFunc","push","updateIdx","slickNext","prevFunc","slickPrev","settings","arrows","infinite","slidesToShow","slidesToScroll","vertical","initialSlide","textAlign","display","gridTemplateColumns","updateStation","handleExit","map","q","reviewMode"],"mappings":"iQAAA,OAAmCA,QAAnC,KAAmD,OAAnD,CACA,OAASC,SAAT,KAA0B,WAA1B,CAGA,MAAOC,CAAAA,qBAAP,KAAkC,yBAAlC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,aAAnB,C,wFAWA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAoC,CAC3D,cAAkCP,QAAQ,CAAgB,IAAhB,CAA1C,wCAAOQ,SAAP,eAAkBC,YAAlB,eACA,GAAMC,CAAAA,OAAO,CAAGP,UAAU,EAA1B,CACA,GAAMQ,CAAAA,GAAG,CAAGJ,KAAK,CAACK,WAAlB,CACA,GAAMC,CAAAA,aAAa,CAAGN,KAAK,CAACO,OAAN,CAAcC,SAAd,CAAwBC,MAA9C,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnBN,GAAG,GAAKE,aAAa,CAAG,CAAxB,CACMH,OAAO,CAACQ,IAAR,CAAa,0BAAb,CADN,CAEMX,KAAK,CAACY,SAAN,CAAgBR,GAAG,CAAG,CAAtB,CAFN,CAGAH,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEY,SAAX,GACH,CALD,CAOA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAIV,GAAG,CAAG,CAAV,CAAaJ,KAAK,CAACY,SAAN,CAAgBR,GAAG,CAAG,CAAtB,EACbH,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEc,SAAX,GACH,CAHD,CAKA,GAAMC,CAAAA,QAAQ,CAAG,CACbC,MAAM,CAAE,KADK,CAEbC,QAAQ,CAAE,KAFG,CAGbC,YAAY,CAAE,CAHD,CAIbC,cAAc,CAAE,CAJH,CAKbC,QAAQ,CAAE,IALG,CAMbC,YAAY,CAAEtB,KAAK,CAACK,WANP,CAAjB,CASA,mBACI,KAAC,SAAD,EAAW,KAAK,CAAE,CAAEkB,SAAS,CAAE,QAAb,CAAlB,uBACI,aACI,KAAK,CAAE,CACHC,OAAO,CAAE,MADN,CAEHC,mBAAmB,CAAE,KAFlB,CADX,wBAMI,KAAC,MAAD,EACI,aAAa,CAAEzB,KAAK,CAAC0B,aADzB,CAEI,OAAO,CAAE1B,KAAK,CAACO,OAFnB,CAGI,UAAU,CAAEP,KAAK,CAAC2B,UAHtB,CAII,KAAK,CAAE,QAJX,CAKI,UAAU,CAAE,GAAM,IAAMvB,GAAP,CAAcE,aALnC,CAMI,KAAK,CAAE,KANX,CAOI,QAAQ,CAAEI,QAPd,CAQI,QAAQ,CAAEI,QARd,EANJ,cAiBI,KAAC,MAAD,8BAAQ,GAAG,CAAEZ,YAAb,EAA+Bc,QAA/B,eACKhB,KAAK,CAACO,OAAN,CAAcC,SAAd,CAAwBoB,GAAxB,CAA4B,SAACC,CAAD,CAAIxB,WAAJ,qBACzB,KAAC,qBAAD,EACI,QAAQ,CAAEwB,CADd,CAEI,WAAW,CAAExB,WAFjB,CAGI,aAAa,CAAEL,KAAK,CAAC0B,aAHzB,CAII,UAAU,CAAE1B,KAAK,CAAC8B,UAJtB,CAKI,MAAM,CAAEzB,WAAW,GAAKL,KAAK,CAACK,WALlC,EADyB,EAA5B,CADL,GAjBJ,GADJ,EADJ,CAiCH,CA5DD,CA8DA,cAAeN,CAAAA,kBAAf","sourcesContent":["import { Dispatch, SetStateAction, useState } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionReviewContent from \"./QuestionReviewContent\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Slider from \"react-slick\";\n\ntype QuestionReviewPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateIdx: Dispatch<SetStateAction<number>>;\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionReviewPage = (props: QuestionReviewPageProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const history = useHistory();\n    const idx = props.questionIdx;\n    const questionCount = props.station.questions.length;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/MarkReview\")\n            : props.updateIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container style={{ textAlign: \"center\" }}>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                <Header\n                    updateStation={props.updateStation}\n                    station={props.station}\n                    handleExit={props.handleExit}\n                    title={\"Review\"}\n                    percentage={10 + (100 * idx) / questionCount}\n                    timer={false}\n                    nextFunc={nextFunc}\n                    prevFunc={prevFunc}\n                />\n\n                <Slider ref={setSliderRef} {...settings}>\n                    {props.station.questions.map((q, questionIdx) => (\n                        <QuestionReviewContent\n                            question={q}\n                            questionIdx={questionIdx}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                            active={questionIdx === props.questionIdx}\n                        />\n                    ))}\n                </Slider>\n            </div>\n        </Container>\n    );\n};\n\nexport default QuestionReviewPage;\n"]},"metadata":{},"sourceType":"module"}