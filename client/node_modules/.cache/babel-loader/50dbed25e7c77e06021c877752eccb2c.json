{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React,{useContext}from\"react\";import styled from\"styled-components\";import MetaContext from\"../../MetaContext\";import{jsx as _jsx}from\"react/jsx-runtime\";var FilterSelector=function FilterSelector(props){var _useContext=useContext(MetaContext),narrowWindow=_useContext.narrowWindow;return narrowWindow?/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Select,{onChange:function onChange(e){return props.updateFilter(e.target.value);},children:[\"No Filter\",\"Attempted\",\"Free\",\"Premium\"].map(function(c,i){return/*#__PURE__*/_jsx(\"option\",{children:c},i);})})}):/*#__PURE__*/_jsx(FilterSelectorBar,{children:[\"No Filter\",\"Attempted\",\"Free\",\"Premium\"].map(function(f,i){return/*#__PURE__*/_jsx(Category,{selected:f===props.filter,onClick:function onClick(){return props.updateFilter(f===props.filter?\"No Filter\":f);},children:f},i);})});};export default FilterSelector;var Select=styled.select(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    margin-bottom: 20px;\\n    background-color: #042c54;\\n    border-radius: 5px;\\n    color: white;\\n    border-style: none;\\n    padding: 5px;\\n    text-align: center;\\n    width: 150px;\\n\"])));var Category=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    margin-left: 20px;\\n    background-color: \",\";\\n    border-radius: 5px;\\n    color: \",\";\\n    border-style: none;\\n    padding: 5px;\\n    cursor: pointer;\\n\"])),function(props){return props.selected?\"#042c54\":\"transparent\";},function(props){return props.selected?\"white\":\"#81AFDD\";});var FilterSelectorBar=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    display: flex;\\n    margin-bottom: 20px;\\n    margin-left: -20px;\\n    padding-bottom: 10px;\\n    border-radius: 0;\\n\"])));","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/FilterSelector.tsx"],"names":["React","useContext","styled","MetaContext","FilterSelector","props","narrowWindow","e","updateFilter","target","value","map","c","i","f","filter","Select","select","Category","div","selected","FilterSelectorBar"],"mappings":"uMAAA,MAAOA,CAAAA,KAAP,EAA0CC,UAA1C,KAA4D,OAA5D,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAOC,CAAAA,WAAP,KAAwB,mBAAxB,C,2CAWA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAgC,CACnD,gBAAyBJ,UAAU,CAACE,WAAD,CAAnC,CAAQG,YAAR,aAAQA,YAAR,CAEA,MAAOA,CAAAA,YAAY,cACf,kCACI,KAAC,MAAD,EAAQ,QAAQ,CAAE,kBAAAC,CAAC,QAAIF,CAAAA,KAAK,CAACG,YAAN,CAAmBD,CAAC,CAACE,MAAF,CAASC,KAA5B,CAAJ,EAAnB,UACK,CAAC,WAAD,CAAc,WAAd,CAA2B,MAA3B,CAAmC,SAAnC,EAA8CC,GAA9C,CAAkD,SAACC,CAAD,CAAIC,CAAJ,qBAC/C,wBAAiBD,CAAjB,EAAaC,CAAb,CAD+C,EAAlD,CADL,EADJ,EADe,cASf,KAAC,iBAAD,WACM,CAAC,WAAD,CAAc,WAAd,CAA2B,MAA3B,CAAmC,SAAnC,CAAD,CAA4DF,GAA5D,CAAgE,SAACG,CAAD,CAAID,CAAJ,qBAC7D,KAAC,QAAD,EACI,QAAQ,CAAEC,CAAC,GAAKT,KAAK,CAACU,MAD1B,CAEI,OAAO,CAAE,yBAAMV,CAAAA,KAAK,CAACG,YAAN,CAAmBM,CAAC,GAAKT,KAAK,CAACU,MAAZ,CAAqB,WAArB,CAAmCD,CAAtD,CAAN,EAFb,UAKKA,CALL,EAGSD,CAHT,CAD6D,EAAhE,CADL,EATJ,CAqBH,CAxBD,CA0BA,cAAeT,CAAAA,cAAf,CAEA,GAAMY,CAAAA,MAAM,CAAGd,MAAM,CAACe,MAAV,iQAAZ,CAWA,GAAMC,CAAAA,QAAQ,CAAGhB,MAAM,CAACiB,GAAV,qOAEU,SAAAd,KAAK,QAAKA,CAAAA,KAAK,CAACe,QAAN,CAAiB,SAAjB,CAA6B,aAAlC,EAFf,CAID,SAAAf,KAAK,QAAKA,CAAAA,KAAK,CAACe,QAAN,CAAiB,OAAjB,CAA2B,SAAhC,EAJJ,CAAd,CAUA,GAAMC,CAAAA,iBAAiB,CAAGnB,MAAM,CAACiB,GAAV,8LAAvB","sourcesContent":["import React, { Dispatch, SetStateAction, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport { StationSummary } from \"./types\";\n\ntype FilterSelectorProps = {\n    updateFilter: Dispatch<SetStateAction<Filter>>;\n    stationSummaries: StationSummary[];\n    filter: Filter;\n};\n\nexport type Filter = \"No Filter\" | \"Attempted\" | \"Free\" | \"Premium\";\n\nconst FilterSelector = (props: FilterSelectorProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    return narrowWindow ? (\n        <div>\n            <Select onChange={e => props.updateFilter(e.target.value as Filter)}>\n                {[\"No Filter\", \"Attempted\", \"Free\", \"Premium\"].map((c, i) => (\n                    <option key={i}>{c}</option>\n                ))}\n            </Select>\n        </div>\n    ) : (\n        <FilterSelectorBar>\n            {([\"No Filter\", \"Attempted\", \"Free\", \"Premium\"] as Filter[]).map((f, i) => (\n                <Category\n                    selected={f === props.filter}\n                    onClick={() => props.updateFilter(f === props.filter ? \"No Filter\" : f)}\n                    key={i}\n                >\n                    {f}\n                </Category>\n            ))}\n        </FilterSelectorBar>\n    );\n};\n\nexport default FilterSelector;\n\nconst Select = styled.select`\n    margin-bottom: 20px;\n    background-color: #042c54;\n    border-radius: 5px;\n    color: white;\n    border-style: none;\n    padding: 5px;\n    text-align: center;\n    width: 150px;\n`;\n\nconst Category = styled.div<{ selected: boolean }>`\n    margin-left: 20px;\n    background-color: ${props => (props.selected ? \"#042c54\" : \"transparent\")};\n    border-radius: 5px;\n    color: ${props => (props.selected ? \"white\" : \"#81AFDD\")};\n    border-style: none;\n    padding: 5px;\n    cursor: pointer;\n`;\n\nconst FilterSelectorBar = styled.div`\n    display: flex;\n    margin-bottom: 20px;\n    margin-left: -20px;\n    padding-bottom: 10px;\n    border-radius: 0;\n`;\n"]},"metadata":{},"sourceType":"module"}