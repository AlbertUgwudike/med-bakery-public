{"ast":null,"code":"export var createReadVariableSizeInteger = function createReadVariableSizeInteger(readVariableSizeIntegerLength) {\n  return function (dataView, offset) {\n    var length = readVariableSizeIntegerLength(dataView, offset);\n\n    if (length === null) {\n      return length;\n    }\n\n    var firstDataByteOffset = offset + Math.floor((length - 1) / 8);\n\n    if (firstDataByteOffset + length > dataView.byteLength) {\n      return null;\n    }\n\n    var firstDataByte = dataView.getUint8(firstDataByteOffset);\n    var value = firstDataByte & (1 << 8 - length % 8) - 1; // tslint:disable-line:no-bitwise\n\n    for (var i = 1; i < length; i += 1) {\n      value = (value << 8) + dataView.getUint8(firstDataByteOffset + i); // tslint:disable-line:no-bitwise\n    }\n\n    return {\n      length: length,\n      value: value\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/read-variable-size-integer.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,6BAA6B,GAAoC,SAAjE,6BAAiE,CAAC,6BAAD,EAAkC;AAC5G,SAAO,UAAC,QAAD,EAAW,MAAX,EAAqB;AACxB,QAAM,MAAM,GAAG,6BAA6B,CAAC,QAAD,EAAW,MAAX,CAA5C;;AAEA,QAAI,MAAM,KAAK,IAAf,EAAqB;AACjB,aAAO,MAAP;AACH;;AAED,QAAM,mBAAmB,GAAG,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,MAAM,GAAG,CAAV,IAAe,CAA1B,CAArC;;AAEA,QAAI,mBAAmB,GAAG,MAAtB,GAA+B,QAAQ,CAAC,UAA5C,EAAwD;AACpD,aAAO,IAAP;AACH;;AAED,QAAM,aAAa,GAAG,QAAQ,CAAC,QAAT,CAAkB,mBAAlB,CAAtB;AAEA,QAAI,KAAK,GAAG,aAAa,GAAI,CAAC,KAAM,IAAK,MAAM,GAAG,CAArB,IAA4B,CAAzD,CAfwB,CAeqC;;AAE7D,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,IAAI,CAAjC,EAAoC;AAChC,MAAA,KAAK,GAAG,CAAC,KAAK,IAAI,CAAV,IAAe,QAAQ,CAAC,QAAT,CAAkB,mBAAmB,GAAG,CAAxC,CAAvB,CADgC,CACmC;AACtE;;AAED,WAAO;AAAE,MAAA,MAAM,EAAN,MAAF;AAAU,MAAA,KAAK,EAAL;AAAV,KAAP;AACH,GAtBD;AAuBH,CAxBM","sourceRoot":"","sourcesContent":["export const createReadVariableSizeInteger = (readVariableSizeIntegerLength) => {\n    return (dataView, offset) => {\n        const length = readVariableSizeIntegerLength(dataView, offset);\n        if (length === null) {\n            return length;\n        }\n        const firstDataByteOffset = offset + Math.floor((length - 1) / 8);\n        if (firstDataByteOffset + length > dataView.byteLength) {\n            return null;\n        }\n        const firstDataByte = dataView.getUint8(firstDataByteOffset);\n        let value = firstDataByte & ((1 << (8 - (length % 8))) - 1); // tslint:disable-line:no-bitwise\n        for (let i = 1; i < length; i += 1) {\n            value = (value << 8) + dataView.getUint8(firstDataByteOffset + i); // tslint:disable-line:no-bitwise\n        }\n        return { length, value };\n    };\n};\n//# sourceMappingURL=read-variable-size-integer.js.map"]},"metadata":{},"sourceType":"module"}