{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../../old-components/ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// lets implement things as a SEQUENCE?!!!!\nvar QuestionContent = function QuestionContent(props) {\n  _s();\n\n  var _useContext = useContext(MetaContext),\n      narrowWindow = _useContext.narrowWindow;\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStop: function onStop(blobUrl, _) {\n      var startTone = new Audio(startToneUrl);\n\n      startTone.onended = function (_) {\n        // advance question on recording completetion\n        props.nextFunc();\n      };\n\n      startTone.play();\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording,\n      status = _useReactMediaRecorde.status;\n\n  var recording = status === \"recording\";\n  var promptAudio = document.getElementById(promptId + props.questionIdx);\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      responseWaveSurfer = _useState2[0],\n      updateResponseWaveSurfer = _useState2[1];\n\n  var responsePlaying = responseWaveSurfer ? responseWaveSurfer.isPlaying() : false;\n\n  var stopEverything = function stopEverything() {\n    promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.pause();\n    responseWaveSurfer === null || responseWaveSurfer === void 0 ? void 0 : responseWaveSurfer.stop();\n    if (recording) stopRecording();\n  };\n\n  var play = function play(id) {\n    stopEverything();\n    if (id === promptId) promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.play();else responseWaveSurfer === null || responseWaveSurfer === void 0 ? void 0 : responseWaveSurfer.play();\n  }; // stop wavesurfer when component unmounts ---------------------------------\n  // wavesurfers should stop automatically as station swipes due to (unmount on exit)\n  // this will also reset responseplaying\n\n\n  useEffect(function () {\n    return function () {\n      return responseWaveSurfer === null || responseWaveSurfer === void 0 ? void 0 : responseWaveSurfer.stop();\n    };\n  }); // -------------------------------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: _objectSpread({\n        gridRowStart: 2,\n        gridColumnStart: 1,\n        height: \"60vh\",\n        transition: \"transform \".concat(500, \"ms\")\n      }, props.transitionStyle),\n      children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n        question: props.question,\n        toggle: function toggle() {\n          !(promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.paused) ? stopEverything() : play(promptId);\n        },\n        promptId: promptId + props.questionIdx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          height: \"49vh\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: props.question.img,\n          narrowWindow: narrowWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowStart: 4,\n        gridColumnStart: 1,\n        zIndex: 700,\n        backgroundColor: \"#1c2124\",\n        height: \"15vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(WaveSurfer, {\n        playing: responsePlaying,\n        playResponse: function playResponse() {\n          return play(\"waveform\" + props.questionIdx);\n        },\n        stopEverything: stopEverything,\n        responseAudio: props.question.responseAudio,\n        questionIdx: props.questionIdx,\n        updateResponseWaveSurfer: updateResponseWaveSurfer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(RecordControl, {\n        recording: recording,\n        stopEverything: stopEverything,\n        startRecording: startRecording\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(QuestionContent, \"nFsuBn3ghOcJfrctn899viCyW+o=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionContent;\nexport default QuestionContent;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    max-width: 100%;\\n    max-height: 100%;\\n    transition: width 0.2s;\\n\"])));\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionContent\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx"],"names":["useContext","useEffect","useState","useReactMediaRecorder","styled","copy","Box","QuestionPrompt","RecordControl","WaveSurfer","promptId","MetaContext","startToneUrl","QuestionContent","props","narrowWindow","audio","onStop","blobUrl","_","startTone","Audio","onended","nextFunc","play","updateStation","s","questions","questionIdx","responseAudio","startRecording","stopRecording","status","recording","promptAudio","document","getElementById","undefined","responseWaveSurfer","updateResponseWaveSurfer","responsePlaying","isPlaying","stopEverything","pause","stop","id","gridRowStart","gridColumnStart","height","transition","transitionStyle","question","paused","display","alignItems","img","zIndex","backgroundColor","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useContext, useEffect, useRef, useState } from \"react\";\nimport {\n    ReactMediaRecorderRenderProps,\n    StatusMessages,\n    useReactMediaRecorder,\n} from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../../old-components/ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport { generateWaveSurfer, playStartTone } from \"../hooks\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId, Question, responseId, Station } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\n\ntype QuestionContentProps = {\n    question: Question;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateQuestionIdx: Dispatch<SetStateAction<{ prev: number; curr: number }>>;\n    transitionStyle: any;\n    nextFunc: () => void;\n};\n\n// lets implement things as a SEQUENCE?!!!!\n\nconst QuestionContent = (props: QuestionContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    const { startRecording, stopRecording, status } = useReactMediaRecorder({\n        audio: true,\n        onStop: (blobUrl, _) => {\n            const startTone = new Audio(startToneUrl);\n            startTone.onended = _ => {\n                // advance question on recording completetion\n                props.nextFunc();\n            };\n            startTone.play();\n\n            props.updateStation(s => {\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n        },\n    });\n\n    const recording = status === \"recording\";\n\n    const promptAudio = document.getElementById(\n        promptId + props.questionIdx\n    ) as HTMLAudioElement | null;\n\n    const [responseWaveSurfer, updateResponseWaveSurfer] = useState<WaveSurfer | undefined>(\n        undefined\n    );\n\n    const responsePlaying = responseWaveSurfer ? responseWaveSurfer.isPlaying() : false;\n\n    const stopEverything = () => {\n        promptAudio?.pause();\n        responseWaveSurfer?.stop();\n        if (recording) stopRecording();\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        if (id === promptId) promptAudio?.play();\n        else responseWaveSurfer?.play();\n    };\n\n    // stop wavesurfer when component unmounts ---------------------------------\n    // wavesurfers should stop automatically as station swipes due to (unmount on exit)\n    // this will also reset responseplaying\n    useEffect(() => () => responseWaveSurfer?.stop());\n    // -------------------------------------------------------------------------\n\n    return (\n        <>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"60vh\",\n                    transition: `transform ${500}ms`,\n                    ...props.transitionStyle,\n                }}\n            >\n                <QuestionPrompt\n                    question={props.question}\n                    toggle={() => {\n                        !promptAudio?.paused ? stopEverything() : play(promptId);\n                    }}\n                    promptId={promptId + props.questionIdx}\n                />\n                <Box\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        height: \"49vh\",\n                    }}\n                >\n                    <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    <br />\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 4,\n                    gridColumnStart: 1,\n                    zIndex: 700,\n                    backgroundColor: \"#1c2124\",\n                    height: \"15vh\",\n                }}\n            >\n                <WaveSurfer\n                    playing={responsePlaying}\n                    playResponse={() => play(\"waveform\" + props.questionIdx)}\n                    stopEverything={stopEverything}\n                    responseAudio={props.question.responseAudio}\n                    questionIdx={props.questionIdx}\n                    updateResponseWaveSurfer={updateResponseWaveSurfer}\n                />\n\n                <RecordControl\n                    recording={recording}\n                    stopEverything={stopEverything}\n                    startRecording={startRecording}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default QuestionContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    max-width: 100%;\n    max-height: 100%;\n    transition: width 0.2s;\n`;\n"]},"metadata":{},"sourceType":"module"}