{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { PORT_MAP } from './port-map';\nexport var extendBrokerImplementation = function extendBrokerImplementation(partialBrokerImplementation) {\n  return _objectSpread(_objectSpread({}, partialBrokerImplementation), {}, {\n    connect: function connect(_ref) {\n      var call = _ref.call;\n      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _MessageChannel, port1, port2, portId;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _MessageChannel = new MessageChannel(), port1 = _MessageChannel.port1, port2 = _MessageChannel.port2;\n                _context.next = 3;\n                return call('connect', {\n                  port: port1\n                }, [port1]);\n\n              case 3:\n                portId = _context.sent;\n                PORT_MAP.set(port2, portId);\n                return _context.abrupt(\"return\", port2);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n    disconnect: function disconnect(_ref3) {\n      var call = _ref3.call;\n      return /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(port) {\n          var portId;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  portId = PORT_MAP.get(port);\n\n                  if (!(portId === undefined)) {\n                    _context2.next = 3;\n                    break;\n                  }\n\n                  throw new Error('The given port is not connected.');\n\n                case 3:\n                  _context2.next = 5;\n                  return call('disconnect', {\n                    portId: portId\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n    },\n    isSupported: function isSupported(_ref5) {\n      var call = _ref5.call;\n      return function () {\n        return call('isSupported');\n      };\n    }\n  });\n};","map":{"version":3,"sources":["../../../src/helpers/extend-broker-implementation.ts"],"names":[],"mappings":";;;AAGA,SAAS,QAAT,QAAyB,YAAzB;AAEA,OAAO,IAAM,0BAA0B,GAAG,SAA7B,0BAA6B,CACtC,2BADsC;AAAA,yCAI/B,2BAJ+B;AAKlC,IAAA,OAAO,EAAE,uBAAa;AAAA,UAAV,IAAU,QAAV,IAAU;AAClB,mFAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCACsB,IAAI,cAAJ,EADtB,EACK,KADL,mBACK,KADL,EACY,KADZ,mBACY,KADZ;AAAA;AAAA,uBAG0B,IAAI,CAAC,SAAD,EAAY;AAAE,kBAAA,IAAI,EAAE;AAAR,iBAAZ,EAA6B,CAAC,KAAD,CAA7B,CAH9B;;AAAA;AAGG,gBAAA,MAHH;AAKH,gBAAA,QAAQ,CAAC,GAAT,CAAa,KAAb,EAAoB,MAApB;AALG,iDAOI,KAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AASH,KAfiC;AAgBlC,IAAA,UAAU,EAAE,2BAAa;AAAA,UAAV,IAAU,SAAV,IAAU;AACrB;AAAA,6EAAO,kBAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACG,kBAAA,MADH,GACY,QAAQ,CAAC,GAAT,CAAa,IAAb,CADZ;;AAAA,wBAGC,MAAM,KAAK,SAHZ;AAAA;AAAA;AAAA;;AAAA,wBAIO,IAAI,KAAJ,CAAU,kCAAV,CAJP;;AAAA;AAAA;AAAA,yBAOG,IAAI,CAAC,YAAD,EAAe;AAAE,oBAAA,MAAM,EAAN;AAAF,mBAAf,CAPP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA;AASH,KA1BiC;AA2BlC,IAAA,WAAW,EAAE,4BAAa;AAAA,UAAV,IAAU,SAAV,IAAU;AACtB,aAAO;AAAA,eAAM,IAAI,CAAC,aAAD,CAAV;AAAA,OAAP;AACH;AA7BiC;AAAA,CAAnC","sourceRoot":"","sourcesContent":["import { PORT_MAP } from './port-map';\nexport const extendBrokerImplementation = (partialBrokerImplementation) => ({\n    ...partialBrokerImplementation,\n    connect: ({ call }) => {\n        return async () => {\n            const { port1, port2 } = new MessageChannel();\n            const portId = await call('connect', { port: port1 }, [port1]);\n            PORT_MAP.set(port2, portId);\n            return port2;\n        };\n    },\n    disconnect: ({ call }) => {\n        return async (port) => {\n            const portId = PORT_MAP.get(port);\n            if (portId === undefined) {\n                throw new Error('The given port is not connected.');\n            }\n            await call('disconnect', { portId });\n        };\n    },\n    isSupported: ({ call }) => {\n        return () => call('isSupported');\n    }\n});\n//# sourceMappingURL=extend-broker-implementation.js.map"]},"metadata":{},"sourceType":"module"}