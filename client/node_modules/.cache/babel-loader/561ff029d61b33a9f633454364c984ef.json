{"ast":null,"code":"export var createMidiOutputs = function createMidiOutputs(wrapSubscribeFunction) {\n  return function (midiAccess) {\n    return wrapSubscribeFunction(function (observer) {\n      var midiOutputs = Array.from(midiAccess.outputs.values());\n\n      var emitMidiOutputs = function emitMidiOutputs() {\n        var midiAccessOutputs = midiAccess.outputs;\n\n        if (midiOutputs.length !== midiAccessOutputs.size || midiOutputs.some(function (_ref) {\n          var id = _ref.id;\n          return !midiAccessOutputs.has(id);\n        })) {\n          midiOutputs = Array.from(midiAccessOutputs.values());\n          observer.next(midiOutputs);\n        }\n      };\n\n      observer.next(midiOutputs);\n      midiAccess.addEventListener('statechange', emitMidiOutputs);\n      return function () {\n        return midiAccess.removeEventListener('statechange', emitMidiOutputs);\n      };\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/midi-outputs.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,iBAAiB,GAAwB,SAAzC,iBAAyC,CAAC,qBAAD,EAA0B;AAC5E,SAAO,UAAC,UAAD;AAAA,WACH,qBAAqB,CAAC,UAAC,QAAD,EAAa;AAC/B,UAAI,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,UAAU,CAAC,OAAX,CAAmB,MAAnB,EAAX,CAAlB;;AAEA,UAAM,eAAe,GAAG,SAAlB,eAAkB,GAAK;AACzB,YAAM,iBAAiB,GAAG,UAAU,CAAC,OAArC;;AAEA,YAAI,WAAW,CAAC,MAAZ,KAAuB,iBAAiB,CAAC,IAAzC,IAAiD,WAAW,CAAC,IAAZ,CAAiB;AAAA,cAAG,EAAH,QAAG,EAAH;AAAA,iBAAY,CAAC,iBAAiB,CAAC,GAAlB,CAAsB,EAAtB,CAAb;AAAA,SAAjB,CAArD,EAA+G;AAC3G,UAAA,WAAW,GAAG,KAAK,CAAC,IAAN,CAAW,iBAAiB,CAAC,MAAlB,EAAX,CAAd;AAEA,UAAA,QAAQ,CAAC,IAAT,CAAc,WAAd;AACH;AACJ,OARD;;AAUA,MAAA,QAAQ,CAAC,IAAT,CAAc,WAAd;AACA,MAAA,UAAU,CAAC,gBAAX,CAA4B,aAA5B,EAA2C,eAA3C;AAEA,aAAO;AAAA,eAAM,UAAU,CAAC,mBAAX,CAA+B,aAA/B,EAA8C,eAA9C,CAAN;AAAA,OAAP;AACH,KAjBoB,CADlB;AAAA,GAAP;AAmBH,CApBM","sourceRoot":"","sourcesContent":["export const createMidiOutputs = (wrapSubscribeFunction) => {\n    return (midiAccess) => wrapSubscribeFunction((observer) => {\n        let midiOutputs = Array.from(midiAccess.outputs.values());\n        const emitMidiOutputs = () => {\n            const midiAccessOutputs = midiAccess.outputs;\n            if (midiOutputs.length !== midiAccessOutputs.size || midiOutputs.some(({ id }) => !midiAccessOutputs.has(id))) {\n                midiOutputs = Array.from(midiAccessOutputs.values());\n                observer.next(midiOutputs);\n            }\n        };\n        observer.next(midiOutputs);\n        midiAccess.addEventListener('statechange', emitMidiOutputs);\n        return () => midiAccess.removeEventListener('statechange', emitMidiOutputs);\n    });\n};\n//# sourceMappingURL=midi-outputs.js.map"]},"metadata":{},"sourceType":"module"}