{"ast":null,"code":"export var createNativeMediaRecorderFactory = function createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError) {\n  return function (nativeMediaRecorderConstructor, stream, mediaRecorderOptions) {\n    var bufferedBlobs = [];\n    var dataAvailableListeners = new WeakMap();\n    var errorListeners = new WeakMap();\n    var nativeMediaRecorder = new nativeMediaRecorderConstructor(stream, mediaRecorderOptions);\n    var stopListeners = new WeakMap();\n    var isActive = true;\n\n    nativeMediaRecorder.addEventListener = function (addEventListener) {\n      return function (type, listener, options) {\n        var patchedEventListener = listener;\n\n        if (typeof listener === 'function') {\n          if (type === 'dataavailable') {\n            // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n            patchedEventListener = function patchedEventListener(event) {\n              setTimeout(function () {\n                if (isActive && nativeMediaRecorder.state === 'inactive') {\n                  bufferedBlobs.push(event.data);\n                } else {\n                  if (bufferedBlobs.length > 0) {\n                    var blob = event.data;\n                    Object.defineProperty(event, 'data', {\n                      value: new Blob([].concat(bufferedBlobs, [blob]), {\n                        type: blob.type\n                      })\n                    });\n                    bufferedBlobs.length = 0;\n                  }\n\n                  listener.call(nativeMediaRecorder, event);\n                }\n              });\n            };\n\n            dataAvailableListeners.set(listener, patchedEventListener);\n          } else if (type === 'error') {\n            // Bug #12 & #13: Firefox fires a regular event with an error property.\n            patchedEventListener = function patchedEventListener(event) {\n              // Bug #3 & #4: Chrome throws an error event without any error.\n              if (event.error === undefined) {\n                listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                  error: createInvalidModificationError()\n                })); // Bug #1 & #2: Firefox throws an error event with an UnknownError.\n              } else if (event.error.name === 'UnknownError') {\n                var message = event.error.message;\n                listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                  error: createInvalidModificationError(message)\n                }));\n              } else if (event instanceof ErrorEvent) {\n                listener.call(nativeMediaRecorder, event);\n              } else {\n                listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                  error: event.error\n                }));\n              }\n            };\n\n            errorListeners.set(listener, patchedEventListener);\n          } else if (type === 'stop') {\n            // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n            patchedEventListener = function patchedEventListener(event) {\n              isActive = false;\n              setTimeout(function () {\n                return listener.call(nativeMediaRecorder, event);\n              });\n            };\n\n            stopListeners.set(listener, patchedEventListener);\n          }\n        }\n\n        return addEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n      };\n    }(nativeMediaRecorder.addEventListener);\n\n    nativeMediaRecorder.dispatchEvent = function (dispatchEvent) {\n      // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n      return function (event) {\n        var wasActive;\n        setTimeout(function () {\n          wasActive = isActive;\n          isActive = false;\n        });\n        var returnValue = dispatchEvent.call(nativeMediaRecorder, event);\n        setTimeout(function () {\n          return isActive = wasActive;\n        });\n        return returnValue;\n      };\n    }(nativeMediaRecorder.dispatchEvent);\n\n    nativeMediaRecorder.removeEventListener = function (removeEventListener) {\n      return function (type, listener, options) {\n        var patchedEventListener = listener;\n\n        if (typeof listener === 'function') {\n          if (type === 'dataavailable') {\n            var dataAvailableListener = dataAvailableListeners.get(listener);\n\n            if (dataAvailableListener !== undefined) {\n              patchedEventListener = dataAvailableListener;\n            }\n          } else if (type === 'error') {\n            var errorListener = errorListeners.get(listener);\n\n            if (errorListener !== undefined) {\n              patchedEventListener = errorListener;\n            }\n          } else if (type === 'stop') {\n            var stopListener = stopListeners.get(listener);\n\n            if (stopListener !== undefined) {\n              patchedEventListener = stopListener;\n            }\n          }\n        }\n\n        return removeEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n      };\n    }(nativeMediaRecorder.removeEventListener);\n\n    nativeMediaRecorder.start = function (start) {\n      return function (timeslice) {\n        /*\n         * Bug #6: Chrome will emit a blob without any data when asked to encode a MediaStream with a video track into an audio\n         * codec.\n         */\n        if (mediaRecorderOptions.mimeType !== undefined && mediaRecorderOptions.mimeType.startsWith('audio/') && stream.getVideoTracks().length > 0) {\n          throw createNotSupportedError();\n        }\n\n        isActive = timeslice !== undefined;\n        return timeslice === undefined ? start.call(nativeMediaRecorder) : start.call(nativeMediaRecorder, timeslice);\n      };\n    }(nativeMediaRecorder.start);\n\n    return nativeMediaRecorder;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-media-recorder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export const createNativeMediaRecorderFactory = (createInvalidModificationError, createNotSupportedError) => {\n    return (nativeMediaRecorderConstructor, stream, mediaRecorderOptions) => {\n        const bufferedBlobs = [];\n        const dataAvailableListeners = new WeakMap();\n        const errorListeners = new WeakMap();\n        const nativeMediaRecorder = new nativeMediaRecorderConstructor(stream, mediaRecorderOptions);\n        const stopListeners = new WeakMap();\n        let isActive = true;\n        nativeMediaRecorder.addEventListener = ((addEventListener) => {\n            return (type, listener, options) => {\n                let patchedEventListener = listener;\n                if (typeof listener === 'function') {\n                    if (type === 'dataavailable') {\n                        // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n                        patchedEventListener = (event) => {\n                            setTimeout(() => {\n                                if (isActive && nativeMediaRecorder.state === 'inactive') {\n                                    bufferedBlobs.push(event.data);\n                                }\n                                else {\n                                    if (bufferedBlobs.length > 0) {\n                                        const blob = event.data;\n                                        Object.defineProperty(event, 'data', {\n                                            value: new Blob([...bufferedBlobs, blob], { type: blob.type })\n                                        });\n                                        bufferedBlobs.length = 0;\n                                    }\n                                    listener.call(nativeMediaRecorder, event);\n                                }\n                            });\n                        };\n                        dataAvailableListeners.set(listener, patchedEventListener);\n                    }\n                    else if (type === 'error') {\n                        // Bug #12 & #13: Firefox fires a regular event with an error property.\n                        patchedEventListener = (event) => {\n                            // Bug #3 & #4: Chrome throws an error event without any error.\n                            if (event.error === undefined) {\n                                listener.call(nativeMediaRecorder, new ErrorEvent('error', { error: createInvalidModificationError() }));\n                                // Bug #1 & #2: Firefox throws an error event with an UnknownError.\n                            }\n                            else if (event.error.name === 'UnknownError') {\n                                const message = event.error.message;\n                                listener.call(nativeMediaRecorder, new ErrorEvent('error', { error: createInvalidModificationError(message) }));\n                            }\n                            else if (event instanceof ErrorEvent) {\n                                listener.call(nativeMediaRecorder, event);\n                            }\n                            else {\n                                listener.call(nativeMediaRecorder, new ErrorEvent('error', { error: event.error }));\n                            }\n                        };\n                        errorListeners.set(listener, patchedEventListener);\n                    }\n                    else if (type === 'stop') {\n                        // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n                        patchedEventListener = (event) => {\n                            isActive = false;\n                            setTimeout(() => listener.call(nativeMediaRecorder, event));\n                        };\n                        stopListeners.set(listener, patchedEventListener);\n                    }\n                }\n                return addEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n            };\n        })(nativeMediaRecorder.addEventListener);\n        nativeMediaRecorder.dispatchEvent = ((dispatchEvent) => {\n            // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n            return (event) => {\n                let wasActive;\n                setTimeout(() => {\n                    wasActive = isActive;\n                    isActive = false;\n                });\n                const returnValue = dispatchEvent.call(nativeMediaRecorder, event);\n                setTimeout(() => (isActive = wasActive));\n                return returnValue;\n            };\n        })(nativeMediaRecorder.dispatchEvent);\n        nativeMediaRecorder.removeEventListener = ((removeEventListener) => {\n            return (type, listener, options) => {\n                let patchedEventListener = listener;\n                if (typeof listener === 'function') {\n                    if (type === 'dataavailable') {\n                        const dataAvailableListener = dataAvailableListeners.get(listener);\n                        if (dataAvailableListener !== undefined) {\n                            patchedEventListener = dataAvailableListener;\n                        }\n                    }\n                    else if (type === 'error') {\n                        const errorListener = errorListeners.get(listener);\n                        if (errorListener !== undefined) {\n                            patchedEventListener = errorListener;\n                        }\n                    }\n                    else if (type === 'stop') {\n                        const stopListener = stopListeners.get(listener);\n                        if (stopListener !== undefined) {\n                            patchedEventListener = stopListener;\n                        }\n                    }\n                }\n                return removeEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n            };\n        })(nativeMediaRecorder.removeEventListener);\n        nativeMediaRecorder.start = ((start) => {\n            return (timeslice) => {\n                /*\n                 * Bug #6: Chrome will emit a blob without any data when asked to encode a MediaStream with a video track into an audio\n                 * codec.\n                 */\n                if (mediaRecorderOptions.mimeType !== undefined &&\n                    mediaRecorderOptions.mimeType.startsWith('audio/') &&\n                    stream.getVideoTracks().length > 0) {\n                    throw createNotSupportedError();\n                }\n                isActive = timeslice !== undefined;\n                return timeslice === undefined ? start.call(nativeMediaRecorder) : start.call(nativeMediaRecorder, timeslice);\n            };\n        })(nativeMediaRecorder.start);\n        return nativeMediaRecorder;\n    };\n};\n//# sourceMappingURL=native-media-recorder.js.map"]},"metadata":{},"sourceType":"module"}