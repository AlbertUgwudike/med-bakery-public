{"ast":null,"code":"export var createWrapSubscribeFunction = function createWrapSubscribeFunction(patch, toObserver) {\n  var emptyFunction = function emptyFunction() {}; // tslint:disable-line:no-empty\n\n\n  var isNextFunction = function isNextFunction(args) {\n    return typeof args[0] === 'function';\n  };\n\n  return function (innerSubscribe) {\n    var _subscribe = function subscribe() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({\n        next: args[0]\n      }) : toObserver.apply(void 0, args));\n\n      if (unsubscribe !== undefined) {\n        return unsubscribe;\n      }\n\n      return emptyFunction;\n    };\n\n    _subscribe[Symbol.observable] = function () {\n      return {\n        subscribe: function subscribe() {\n          return {\n            unsubscribe: _subscribe.apply(void 0, arguments)\n          };\n        }\n      };\n    };\n\n    return patch(_subscribe);\n  };\n};","map":null,"metadata":{},"sourceType":"module"}