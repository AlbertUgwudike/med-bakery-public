{"ast":null,"code":"import _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Container } from \"../Common\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var questionCount = props.station.questions.length;\n  var history = useHistory();\n  var idx = props.questionIdx;\n\n  var nextFunc = function nextFunc() {\n    return idx.curr === questionCount - 1 ? history.push(\"/OSCE/Station/Summary\") : props.updateQuestionIdx({\n      prev: idx.curr,\n      curr: idx.curr + 1\n    });\n  };\n\n  var prevFunc = function prevFunc() {\n    return idx.curr === 0 ? {} : props.updateQuestionIdx({\n      prev: idx.curr,\n      curr: idx.curr - 1\n    });\n  };\n\n  var transitionStyles = idx.curr < idx.prev ? {\n    entering: {\n      transform: \"translateY(-150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(150%)\"\n    },\n    exited: {\n      transform: \"translateY(-150%)\"\n    }\n  } : {\n    entering: {\n      transform: \"translateY(150%)\"\n    },\n    entered: {\n      transform: \"translateY(0%)\"\n    },\n    exiting: {\n      transform: \"translateY(-150%)\"\n    },\n    exited: {\n      transform: \"translateY(150%)\"\n    }\n  };\n  var settings = {\n    dots: true,\n    infinite: true,\n    slidesToShow: 3,\n    slidesToScroll: 1,\n    vertical: true,\n    verticalSwiping: true,\n    swipeToSlide: true // beforeChange: function (currentSlide, nextSlide) {\n    //     console.log(\"before change\", currentSlide, nextSlide);\n    // },\n    // afterChange: function (currentSlide) {\n    //     console.log(\"after change\", currentSlide);\n    // },\n\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      updateStation: props.updateStation,\n      station: props.station,\n      handleExit: props.handleExit,\n      questionIdx: idx,\n      title: \"Station\",\n      percentage: 10 + 100 * idx.curr / questionCount,\n      timer: true,\n      nextFunc: nextFunc,\n      prevFunc: prevFunc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Slider, _objectSpread(_objectSpread({}, settings), {}, {\n      children: props.station.questions.map(function (question, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(QuestionContent, {\n          question: question,\n          updateStation: props.updateStation,\n          questionIdx: questionIdx,\n          updateQuestionIdx: props.updateQuestionIdx,\n          transitionStyle: 2,\n          nextFunc: nextFunc\n        }, questionIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx"],"names":["Container","QuestionContent","Header","useHistory","Slider","QuestionPage","props","questionCount","station","questions","length","history","idx","questionIdx","nextFunc","curr","push","updateQuestionIdx","prev","prevFunc","transitionStyles","entering","transform","entered","exiting","exited","settings","dots","infinite","slidesToShow","slidesToScroll","vertical","verticalSwiping","swipeToSlide","updateStation","handleExit","map","question"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, startAudioRecordingId, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: { prev: number; curr: number };\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<{ curr: number; prev: number }>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const questionCount = props.station.questions.length;\n    const history = useHistory();\n    const idx = props.questionIdx;\n\n    const nextFunc = () =>\n        idx.curr === questionCount - 1\n            ? history.push(\"/OSCE/Station/Summary\")\n            : props.updateQuestionIdx({\n                  prev: idx.curr,\n                  curr: idx.curr + 1,\n              });\n\n    const prevFunc = () =>\n        idx.curr === 0\n            ? {}\n            : props.updateQuestionIdx({\n                  prev: idx.curr,\n                  curr: idx.curr - 1,\n              });\n\n    const transitionStyles: { [key: string]: any } =\n        idx.curr < idx.prev\n            ? {\n                  entering: { transform: \"translateY(-150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(150%)\" },\n                  exited: { transform: \"translateY(-150%)\" },\n              }\n            : {\n                  entering: { transform: \"translateY(150%)\" },\n                  entered: { transform: \"translateY(0%)\" },\n                  exiting: { transform: \"translateY(-150%)\" },\n                  exited: { transform: \"translateY(150%)\" },\n              };\n\n    const settings = {\n        dots: true,\n        infinite: true,\n        slidesToShow: 3,\n        slidesToScroll: 1,\n        vertical: true,\n        verticalSwiping: true,\n        swipeToSlide: true,\n        // beforeChange: function (currentSlide, nextSlide) {\n        //     console.log(\"before change\", currentSlide, nextSlide);\n        // },\n        // afterChange: function (currentSlide) {\n        //     console.log(\"after change\", currentSlide);\n        // },\n    };\n\n    return (\n        <Container>\n            <Header\n                updateStation={props.updateStation}\n                station={props.station}\n                handleExit={props.handleExit}\n                questionIdx={idx}\n                title={\"Station\"}\n                percentage={10 + (100 * idx.curr) / questionCount}\n                timer={true}\n                nextFunc={nextFunc}\n                prevFunc={prevFunc}\n            />\n\n            <Slider {...settings}>\n                {props.station.questions.map((question, questionIdx) => (\n                    <QuestionContent\n                        question={question}\n                        updateStation={props.updateStation}\n                        questionIdx={questionIdx}\n                        updateQuestionIdx={props.updateQuestionIdx}\n                        transitionStyle={2}\n                        nextFunc={nextFunc}\n                        key={questionIdx}\n                    />\n                ))}\n            </Slider>\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}