{"ast":null,"code":"import _regeneratorRuntime from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Navigator from\"../Navigator\";import{Route,Switch}from\"react-router-dom\";import TaskPage from\"./TaskPage\";import QuestionSelector from\"./QuestionSelector\";import{useContext,useEffect,useState}from\"react\";import{NullQuestion}from\"./exampleQuestions\";import AnswerPage from\"./AnswerPage\";import TopicSelectorPage from\"./TopicsSelectorPage\";import MetaContext from\"../../MetaContext\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var DataInterpPage=function DataInterpPage(props){var _useState=useState(NullQuestion),_useState2=_slicedToArray(_useState,2),currentQuestion=_useState2[0],updateCurrentQuestion=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),questions=_useState4[0],updateQuestions=_useState4[1];var _useContext=useContext(MetaContext),SERVER_URL=_useContext.SERVER_URL,token=_useContext.token;var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),currentFinding=_useState6[0],setCurrentFinding=_useState6[1];// Fetch questions\nvar loadQuestions=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.post(SERVER_URL+\"/interp/get_questions\",{token:token});case 2:res=_context.sent;case 3:case\"end\":return _context.stop();}}},_callee);}));return function loadQuestions(){return _ref.apply(this,arguments);};}();useEffect(function(){loadQuestions();},[]);var handleUpdateQuestionsList=function handleUpdateQuestionsList(completedQuestion){console.log(\"handleUpdateQuestionsList called\");console.log(\"completedQuestion:\",completedQuestion);if(!completedQuestion){console.error(\"Completed question is undefined\");return;}// Filter the questions by finding, excluding the current question\nvar filteredQuestionsByFinding=questions.filter(function(question){return question.finding===currentFinding&&question.id!==completedQuestion.id;});var updatedQuestionsList=questions.filter(function(question){return question.id!==completedQuestion.id;});// Update the questions list\nupdateQuestions(updatedQuestionsList);console.log(\"Updated questions list:\",updatedQuestionsList);// Log the updated questions list\n// Choose another random question\nvar randomIndex=Math.floor(Math.random()*updatedQuestionsList.length);var newSelectedQuestion=updatedQuestionsList[randomIndex];// Update the current question\nupdateCurrentQuestion(newSelectedQuestion);console.log(\"Next question:\",newSelectedQuestion);// Log the next question after fetching it\n};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsxs(Route,{exact:true,path:\"/DataInterpretation\",children:[/*#__PURE__*/_jsx(Navigator,{selection:\"Data Interpretation\"}),/*#__PURE__*/_jsx(QuestionSelector,{updateCurrentQuestion:updateCurrentQuestion})]}),/*#__PURE__*/_jsx(Route,{path:\"/DataInterpretation/TopicSelection\",children:/*#__PURE__*/_jsx(TopicSelectorPage,{updateCurrentQuestion:updateCurrentQuestion,updateQuestions:updateQuestions,setCurrentFinding:setCurrentFinding})}),/*#__PURE__*/_jsx(Route,{path:\"/DataInterpretation/Question\",children:/*#__PURE__*/_jsx(TaskPage,{question:currentQuestion})}),/*#__PURE__*/_jsx(Route,{path:\"/DataInterpretation/Answer\",children:/*#__PURE__*/_jsx(AnswerPage,{question:currentQuestion,handleUpdateQuestionsList:handleUpdateQuestionsList})})]})});};export default DataInterpPage;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/DataInterpPage.tsx"],"names":["Navigator","Route","Switch","TaskPage","QuestionSelector","useContext","useEffect","useState","NullQuestion","AnswerPage","TopicSelectorPage","MetaContext","axios","DataInterpPage","props","currentQuestion","updateCurrentQuestion","questions","updateQuestions","SERVER_URL","token","currentFinding","setCurrentFinding","loadQuestions","post","res","handleUpdateQuestionsList","completedQuestion","console","log","error","filteredQuestionsByFinding","filter","question","finding","id","updatedQuestionsList","randomIndex","Math","floor","random","length","newSelectedQuestion"],"mappings":"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","sourcesContent":["import Navigator from \"../Navigator\";\nimport { Route, Switch } from \"react-router-dom\";\nimport TaskPage from \"./TaskPage\";\nimport QuestionSelector from \"./QuestionSelector\";\nimport { SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { NullQuestion } from \"./exampleQuestions\";\nimport AnswerPage from \"./AnswerPage\";\nimport TopicSelectionPage from \"./TopicsSelectorPage\";\nimport TopicSelectorPage from \"./TopicsSelectorPage\";\nimport { DataInterpQuestion } from \"./types\";\nimport MetaContext from \"../../MetaContext\";\nimport axios from \"axios\";\n\nconst DataInterpPage = (props: {}) => {\n    const [currentQuestion, updateCurrentQuestion] = useState(NullQuestion);\n    const [questions, updateQuestions] = useState<DataInterpQuestion[]>([]);\n    const { SERVER_URL, token } = useContext(MetaContext);\n    const [currentFinding, setCurrentFinding] = useState('');\n\n\n  \n    // Fetch questions\n    const loadQuestions = async () => {\n      const res = await axios.post(SERVER_URL + \"/interp/get_questions\", { token });\n      // ... rest of the loadQuestions function\n    };\n  \n    useEffect(() => {\n      loadQuestions();\n    }, []);\n\n  \n    const handleUpdateQuestionsList = (completedQuestion: DataInterpQuestion) => {\n        console.log(\"handleUpdateQuestionsList called\");\n        console.log(\"completedQuestion:\", completedQuestion);\n    \n        if (!completedQuestion) {\n            console.error(\"Completed question is undefined\");\n            return;\n        }\n\n         // Filter the questions by finding, excluding the current question\n            const filteredQuestionsByFinding = questions.filter(\n            (question) =>\n            question.finding === currentFinding && question.id !== completedQuestion.id\n        );\n    \n        const updatedQuestionsList = questions.filter(\n            (question) => question.id !== completedQuestion.id\n        );\n    \n        // Update the questions list\n        updateQuestions(updatedQuestionsList);\n        console.log(\"Updated questions list:\", updatedQuestionsList); // Log the updated questions list\n    \n        // Choose another random question\n        const randomIndex = Math.floor(Math.random() * updatedQuestionsList.length);\n        const newSelectedQuestion = updatedQuestionsList[randomIndex];\n    \n        // Update the current question\n        updateCurrentQuestion(newSelectedQuestion);\n        console.log(\"Next question:\", newSelectedQuestion); // Log the next question after fetching it\n    };\n    \n    \n      \n\n    return (\n        <>\n            <Switch>\n                <Route exact path = \"/DataInterpretation\">\n                    <Navigator selection={ \"Data Interpretation\" } />\n                    <QuestionSelector updateCurrentQuestion={updateCurrentQuestion} />\n                </Route>\n\n                <Route path=\"/DataInterpretation/TopicSelection\">\n                <TopicSelectorPage\n                updateCurrentQuestion={updateCurrentQuestion}\n                updateQuestions={updateQuestions}\n                setCurrentFinding={setCurrentFinding}\n                />\n                </Route>\n\n\n                <Route path=\"/DataInterpretation/Question\">\n                    <TaskPage \n                    question = {currentQuestion}/>\n                </Route>\n\n                <Route path=\"/DataInterpretation/Answer\">\n                <AnswerPage\n                    question={currentQuestion}\n                    handleUpdateQuestionsList={handleUpdateQuestionsList}\n                />\n                </Route>\n            </Switch>\n        </>\n    );\n};\n\nexport default DataInterpPage;\n"]},"metadata":{},"sourceType":"module"}