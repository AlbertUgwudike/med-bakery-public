{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport { playStartTone } from \"../hooks\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId, responseId } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar getPromptAudio = function getPromptAudio(idx) {\n  return document.getElementById(promptId + idx);\n};\n\nvar QuestionContent = function QuestionContent(props) {\n  _s();\n\n  var _useContext = useContext(MetaContext),\n      narrowWindow = _useContext.narrowWindow;\n\n  var _useState = useState({\n    responseWaveSurfer: undefined,\n    promptPlaying: true,\n    responsePlaying: false,\n    recording: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      audioState = _useState2[0],\n      updateAudioState = _useState2[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStop: function onStop(blobUrl, _) {\n      playStartTone();\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n\n      if (!props.lastQuestion) {\n        props.updateQuestionIdx(function (qi) {\n          return {\n            prev: qi.curr,\n            curr: props.questionIdx + 1\n          };\n        });\n      }\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording;\n\n  var stopEverything = function stopEverything() {\n    var _audioState$responseW;\n\n    getPromptAudio(props.questionIdx).pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  };\n\n  var play = function play(id) {\n    var _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: id === promptId,\n        responsePlaying: id === responseId\n      });\n    });\n    if (id === promptId) getPromptAudio(props.questionIdx).play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  var record = function record() {\n    stopEverything();\n    playStartTone();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        recording: true\n      });\n    });\n    startRecording();\n  }; // add event listener for when prompt audio ceases\n\n\n  useEffect(function () {\n    getPromptAudio(props.questionIdx).addEventListener(\"ended\", function (_) {\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          promptPlaying: false\n        });\n      });\n    });\n  }, []); // stop wavesurfer when transitions active or playback selection changes\n\n  useEffect(function () {\n    var _audioState$responseW3;\n\n    (_audioState$responseW3 = audioState.responseWaveSurfer) === null || _audioState$responseW3 === void 0 ? void 0 : _audioState$responseW3.stop();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        responsePlaiyng: false\n      });\n    });\n  }, [props.transitionStyle]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: _objectSpread({\n        gridRowStart: 2,\n        gridColumnStart: 1,\n        height: \"70vh\",\n        transition: \"transform \".concat(500, \"ms\")\n      }, props.transitionStyle),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n          question: props.question,\n          toggle: function toggle() {\n            audioState.promptPlaying ? stopEverything() : play(promptId);\n          },\n          promptId: promptId + props.questionIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Img, {\n          src: props.question.img,\n          narrowWindow: narrowWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowStart: 3,\n        gridColumnStart: 1,\n        zIndex: 1000,\n        backgroundColor: \"#1c2124\",\n        height: \"15vh\",\n        position: \"sticky\",\n        bottom: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(WaveSurfer, {\n        playing: audioState.responsePlaying,\n        playResponse: function playResponse() {\n          return play(responseId);\n        },\n        stopEverything: stopEverything,\n        responseAudio: props.question.responseAudio,\n        updateAudioState: updateAudioState,\n        questionIdx: props.questionIdx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(RecordControl, {\n        recording: audioState.recording,\n        recordResponse: record,\n        stopEverything: stopEverything\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(QuestionContent, \"/6LAmFTrXYp8MoOaklmYTYfMleY=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionContent;\nexport default QuestionContent;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    height: \", \";\\n    max-width: 100%;\\n    transition: width 0.2s;\\n\"])), function (props) {\n  return props.narrowWindow ? \"250px\" : \"450px\";\n});\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionContent\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx"],"names":["useContext","useEffect","useState","useReactMediaRecorder","styled","copy","Box","playStartTone","QuestionPrompt","RecordControl","WaveSurfer","promptId","responseId","MetaContext","getPromptAudio","idx","document","getElementById","QuestionContent","props","narrowWindow","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","audioState","updateAudioState","audio","onStop","blobUrl","_","updateStation","s","questions","questionIdx","responseAudio","lastQuestion","updateQuestionIdx","qi","prev","curr","startRecording","stopRecording","stopEverything","pause","stop","as","play","id","record","addEventListener","responsePlaiyng","transitionStyle","gridRowStart","gridColumnStart","height","transition","textAlign","question","img","zIndex","backgroundColor","position","bottom","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport { playStartTone } from \"../hooks\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId, Question, responseId, Station } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\n\ntype QuestionContentProps = {\n    question: Question;\n    lastQuestion: boolean;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateQuestionIdx: Dispatch<SetStateAction<{ prev: number; curr: number }>>;\n    transitionStyle: any;\n};\n\nexport type AudioState = {\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst getPromptAudio = (idx: number) => document.getElementById(promptId + idx) as HTMLAudioElement;\n\nconst QuestionContent = (props: QuestionContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n    const [audioState, updateAudioState] = useState<AudioState>({\n        responseWaveSurfer: undefined,\n        promptPlaying: true,\n        responsePlaying: false,\n        recording: false,\n    });\n\n    const { startRecording, stopRecording } = useReactMediaRecorder({\n        audio: true,\n        onStop: (blobUrl, _) => {\n            playStartTone();\n            props.updateStation(s => {\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n            if (!props.lastQuestion) {\n                props.updateQuestionIdx(qi => ({\n                    prev: qi.curr,\n                    curr: props.questionIdx + 1,\n                }));\n            }\n        },\n    });\n\n    const stopEverything = () => {\n        getPromptAudio(props.questionIdx).pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId,\n        }));\n\n        if (id === promptId) getPromptAudio(props.questionIdx).play();\n        else audioState.responseWaveSurfer?.play();\n    };\n\n    const record = () => {\n        stopEverything();\n        playStartTone();\n        updateAudioState(as => ({ ...as, recording: true }));\n        startRecording();\n    };\n\n    // add event listener for when prompt audio ceases\n    useEffect(() => {\n        getPromptAudio(props.questionIdx).addEventListener(\"ended\", _ => {\n            updateAudioState(as => ({ ...as, promptPlaying: false }));\n        });\n    }, []);\n\n    // stop wavesurfer when transitions active or playback selection changes\n    useEffect(() => {\n        audioState.responseWaveSurfer?.stop();\n        updateAudioState(as => ({\n            ...as,\n            responsePlaiyng: false,\n        }));\n    }, [props.transitionStyle]);\n\n    return (\n        <>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"70vh\",\n                    transition: `transform ${500}ms`,\n                    ...props.transitionStyle,\n                }}\n            >\n                <Box style={{ textAlign: \"center\" }}>\n                    <QuestionPrompt\n                        question={props.question}\n                        toggle={() => {\n                            audioState.promptPlaying ? stopEverything() : play(promptId);\n                        }}\n                        promptId={promptId + props.questionIdx}\n                    />\n\n                    <br></br>\n\n                    <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    <br />\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 3,\n                    gridColumnStart: 1,\n                    zIndex: 1000,\n                    backgroundColor: \"#1c2124\",\n                    height: \"15vh\",\n                    position: \"sticky\",\n                    bottom: 0,\n                }}\n            >\n                <WaveSurfer\n                    playing={audioState.responsePlaying}\n                    playResponse={() => play(responseId)}\n                    stopEverything={stopEverything}\n                    responseAudio={props.question.responseAudio}\n                    updateAudioState={updateAudioState}\n                    questionIdx={props.questionIdx}\n                />\n\n                <RecordControl\n                    recording={audioState.recording}\n                    recordResponse={record}\n                    stopEverything={stopEverything}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default QuestionContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    height: ${props => (props.narrowWindow ? \"250px\" : \"450px\")};\n    max-width: 100%;\n    transition: width 0.2s;\n`;\n"]},"metadata":{},"sourceType":"module"}