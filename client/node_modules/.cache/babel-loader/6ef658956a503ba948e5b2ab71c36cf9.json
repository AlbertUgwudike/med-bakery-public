{"ast":null,"code":"export var createReadElementContent = function createReadElementContent(readVariableSizeInteger) {\n  return function (dataView, offset, type) {\n    var channelCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    var lengthAndValue = readVariableSizeInteger(dataView, offset);\n\n    if (lengthAndValue === null) {\n      return lengthAndValue;\n    }\n\n    var length = lengthAndValue.length,\n        value = lengthAndValue.value;\n\n    if (type === 'master') {\n      return {\n        content: null,\n        length: length\n      };\n    }\n\n    if (offset + length + value > dataView.byteLength) {\n      return null;\n    }\n\n    if (type === 'binary') {\n      var numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n      var content = Array.from({\n        length: channelCount\n      }, function () {\n        return new Float32Array(numberOfSamples);\n      });\n\n      for (var i = 0; i < numberOfSamples; i += 1) {\n        var elementOffset = i * channelCount + 1;\n\n        for (var j = 0; j < channelCount; j += 1) {\n          content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n        }\n      }\n\n      return {\n        content: content,\n        length: length + value\n      };\n    }\n\n    return {\n      content: null,\n      length: length + value\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/factories/read-element-content.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,wBAAwB,GAA+B,SAAvD,wBAAuD,CAAC,uBAAD,EAA4B;AAC5F,SAAO,UAAC,QAAD,EAAW,MAAX,EAAmB,IAAnB,EAA6C;AAAA,QAApB,YAAoB,uEAAL,CAAK;AAChD,QAAM,cAAc,GAAG,uBAAuB,CAAC,QAAD,EAAW,MAAX,CAA9C;;AAEA,QAAI,cAAc,KAAK,IAAvB,EAA6B;AACzB,aAAO,cAAP;AACH;;AAED,QAAQ,MAAR,GAA0B,cAA1B,CAAQ,MAAR;AAAA,QAAgB,KAAhB,GAA0B,cAA1B,CAAgB,KAAhB;;AAEA,QAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,aAAO;AAAE,QAAA,OAAO,EAAE,IAAX;AAAiB,QAAA,MAAM,EAAN;AAAjB,OAAP;AACH;;AAED,QAAI,MAAM,GAAG,MAAT,GAAkB,KAAlB,GAA0B,QAAQ,CAAC,UAAvC,EAAmD;AAC/C,aAAO,IAAP;AACH;;AAED,QAAI,IAAI,KAAK,QAAb,EAAuB;AACnB,UAAM,eAAe,GAAG,CAAC,KAAK,GAAG,YAAY,CAAC,iBAArB,GAAyC,CAA1C,IAA+C,YAAvE;AACA,UAAM,OAAO,GAAG,KAAK,CAAC,IAAN,CAAW;AAAE,QAAA,MAAM,EAAE;AAAV,OAAX,EAAqC;AAAA,eAAM,IAAI,YAAJ,CAAiB,eAAjB,CAAN;AAAA,OAArC,CAAhB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,eAApB,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AACzC,YAAM,aAAa,GAAG,CAAC,GAAG,YAAJ,GAAmB,CAAzC;;AAEA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAApB,EAAkC,CAAC,IAAI,CAAvC,EAA0C;AACtC,UAAA,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,IAAgB,QAAQ,CAAC,UAAT,CAAoB,MAAM,GAAG,MAAT,GAAkB,CAAC,aAAa,GAAG,CAAjB,IAAsB,YAAY,CAAC,iBAAzE,EAA4F,IAA5F,CAAhB;AACH;AACJ;;AAED,aAAO;AAAE,QAAA,OAAO,EAAP,OAAF;AAAW,QAAA,MAAM,EAAE,MAAM,GAAG;AAA5B,OAAP;AACH;;AAED,WAAO;AAAE,MAAA,OAAO,EAAE,IAAX;AAAiB,MAAA,MAAM,EAAE,MAAM,GAAG;AAAlC,KAAP;AACH,GAjCD;AAkCH,CAnCM","sourceRoot":"","sourcesContent":["export const createReadElementContent = (readVariableSizeInteger) => {\n    return (dataView, offset, type, channelCount = 2) => {\n        const lengthAndValue = readVariableSizeInteger(dataView, offset);\n        if (lengthAndValue === null) {\n            return lengthAndValue;\n        }\n        const { length, value } = lengthAndValue;\n        if (type === 'master') {\n            return { content: null, length };\n        }\n        if (offset + length + value > dataView.byteLength) {\n            return null;\n        }\n        if (type === 'binary') {\n            const numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n            const content = Array.from({ length: channelCount }, () => new Float32Array(numberOfSamples));\n            for (let i = 0; i < numberOfSamples; i += 1) {\n                const elementOffset = i * channelCount + 1;\n                for (let j = 0; j < channelCount; j += 1) {\n                    content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n                }\n            }\n            return { content, length: length + value };\n        }\n        return { content: null, length: length + value };\n    };\n};\n//# sourceMappingURL=read-element-content.js.map"]},"metadata":{},"sourceType":"module"}