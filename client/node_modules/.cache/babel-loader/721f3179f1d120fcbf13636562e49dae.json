{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport OSCESelector from \"./OSCESelector\";\nimport StationPage from \"./StationPage\";\nimport MetaContext from \"../../MetaContext\";\nimport { NullStation } from \"./DemoStations/NullStation\";\nimport axios from \"../../myaxios\";\nimport { binaryToCode, downloadAssets, extractReponseAudio, populateMarkScheme, populateResponseAudios, useStations, useUserDetails } from \"./hooks\";\nimport LoadingOverlay from \"./LoadingOverlay\";\nimport Navigator from \"../Navigator\";\nimport SubscribeModal from \"../SubscribePage/SubscribeModal\";\nimport HomePage from \"./HomePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar OSCEPage = function OSCEPage() {\n  _s();\n\n  var _useContext = useContext(MetaContext),\n      token = _useContext.token,\n      SERVER_URL = _useContext.SERVER_URL;\n\n  var _useState = useState(NullStation),\n      _useState2 = _slicedToArray(_useState, 2),\n      station = _useState2[0],\n      updateStation = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      reviewMode = _useState4[0],\n      updateReviewMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      updateLoading = _useState6[1];\n\n  var _useUserDetails = useUserDetails(SERVER_URL, token),\n      _useUserDetails2 = _slicedToArray(_useUserDetails, 2),\n      userDetailsOsce = _useUserDetails2[0],\n      userLoading = _useUserDetails2[1];\n\n  var _useStations = useStations(SERVER_URL, token),\n      _useStations2 = _slicedToArray(_useStations, 2),\n      stationSummarires = _useStations2[0],\n      stationeSummariesLoading = _useStations2[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      subscribeModalOpen = _useState8[0],\n      updateSubscribeOpen = _useState8[1];\n\n  var selectStation = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, options) {\n      var axres, matches, rawResponseAudios, stationWithMarks, stationWithResponses, localContentStation, _localContentStation;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updateLoading(true);\n              updateReviewMode(options.review);\n              _context.prev = 2;\n              _context.next = 5;\n              return axios.post(SERVER_URL + \"/osce/get_station\", {\n                token: token,\n                id: id\n              });\n\n            case 5:\n              axres = _context.sent;\n\n              if (axres.data.success) {\n                _context.next = 8;\n                break;\n              }\n\n              throw \"selecteStation (OSCEPage): Station retrieval failed!\";\n\n            case 8:\n              if (!options.review) {\n                _context.next = 19;\n                break;\n              }\n\n              matches = userDetailsOsce.answeredStations.filter(function (s) {\n                return s.id === axres.data.station.id;\n              });\n              rawResponseAudios = matches.length === 0 ? Array(axres.data.station.questions.length).fill(\"\") : matches[0].responseAudios;\n              stationWithMarks = populateMarkScheme(axres.data.station, options.marks);\n              stationWithResponses = populateResponseAudios(stationWithMarks, rawResponseAudios);\n              _context.next = 15;\n              return downloadAssets(stationWithResponses, SERVER_URL);\n\n            case 15:\n              localContentStation = _context.sent;\n              updateStation(localContentStation);\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.next = 21;\n              return downloadAssets(axres.data.station, SERVER_URL);\n\n            case 21:\n              _localContentStation = _context.sent;\n              updateStation(_localContentStation);\n\n            case 23:\n              _context.next = 28;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](2);\n              console.error(_context.t0);\n\n            case 28:\n              updateLoading(false);\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 25]]);\n    }));\n\n    return function selectStation(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleExit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(questions, tok) {\n      var points, markCode, responseAudios;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              updateLoading(true);\n              points = questions.map(function (q) {\n                return q.markScheme.map(function (ms) {\n                  return ms.points.map(function (p) {\n                    return p.selected ? 1 : 0;\n                  });\n                });\n              }).flat(2);\n              markCode = binaryToCode([1].concat(points));\n\n              if (reviewMode) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 6;\n              return extractReponseAudio(questions);\n\n            case 6:\n              responseAudios = _context2.sent;\n              _context2.next = 9;\n              return axios.post(SERVER_URL + \"/osce/update_stations\", {\n                token: tok,\n                markCode: markCode,\n                id: station.id,\n                responseAudios: responseAudios\n              });\n\n            case 9:\n              updateStation(NullStation);\n              window.location.href = \"/OSCE\";\n              updateLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleExit(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [subscribeModalOpen && /*#__PURE__*/_jsxDEV(SubscribeModal, {\n      close: function close() {\n        return updateSubscribeOpen(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 36\n    }, _this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [loading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }, _this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/OSCE\",\n        children: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/OSCE/Selection\",\n        children: [/*#__PURE__*/_jsxDEV(Navigator, {\n          selection: \"OSCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(OSCESelector, {\n          openSubscribeModal: function openSubscribeModal() {\n            return updateSubscribeOpen(true);\n          },\n          stationSummarires: stationSummarires,\n          answeredStations: userDetailsOsce.answeredStations,\n          selectStation: selectStation,\n          station: station,\n          purchasedOsce: userDetailsOsce.purchasedOsce,\n          stationSummariesLoading: stationeSummariesLoading || userLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/OSCE/Station\",\n        children: /*#__PURE__*/_jsxDEV(StationPage, {\n          handleExit: handleExit,\n          station: station,\n          updateStation: updateStation,\n          answeredStations: userDetailsOsce.answeredStations,\n          reviewMode: reviewMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(OSCEPage, \"Uly6UJuZR7S5AJwHKbaD5PTXt6c=\", false, function () {\n  return [useUserDetails, useStations];\n});\n\n_c = OSCEPage;\nexport default OSCEPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OSCEPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx"],"names":["useContext","useState","Switch","Route","OSCESelector","StationPage","MetaContext","NullStation","axios","binaryToCode","downloadAssets","extractReponseAudio","populateMarkScheme","populateResponseAudios","useStations","useUserDetails","LoadingOverlay","Navigator","SubscribeModal","HomePage","OSCEPage","token","SERVER_URL","station","updateStation","reviewMode","updateReviewMode","loading","updateLoading","userDetailsOsce","userLoading","stationSummarires","stationeSummariesLoading","subscribeModalOpen","updateSubscribeOpen","selectStation","id","options","review","post","axres","data","success","matches","answeredStations","filter","s","rawResponseAudios","length","Array","questions","fill","responseAudios","stationWithMarks","marks","stationWithResponses","localContentStation","console","error","handleExit","tok","points","map","q","markScheme","ms","p","selected","flat","markCode","concat","window","location","href","purchasedOsce"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\nimport OSCESelector from \"./OSCESelector\";\nimport StationPage from \"./StationPage\";\nimport MetaContext from \"../../MetaContext\";\nimport { NullStation } from \"./DemoStations/NullStation\";\nimport axios from \"../../myaxios\";\nimport { AnsweredStationDetails, Question, StationSummary } from \"./types\";\nimport {\n    binaryToCode,\n    downloadAssets,\n    extractReponseAudio,\n    populateMarkScheme,\n    populateResponseAudios,\n    useStations,\n    useUserDetails,\n} from \"./hooks\";\nimport LoadingOverlay from \"./LoadingOverlay\";\nimport Navigator from \"../Navigator\";\nimport SubscribeModal from \"../SubscribePage/SubscribeModal\";\nimport HomePage from \"./HomePage\";\n\nconst OSCEPage = () => {\n    const { token, SERVER_URL } = useContext(MetaContext);\n    const [station, updateStation] = useState(NullStation);\n    const [reviewMode, updateReviewMode] = useState(false);\n    const [loading, updateLoading] = useState(false);\n    const [userDetailsOsce, userLoading] = useUserDetails(SERVER_URL, token);\n    const [stationSummarires, stationeSummariesLoading] = useStations(SERVER_URL, token);\n    const [subscribeModalOpen, updateSubscribeOpen] = useState(false);\n\n    const selectStation = async (id: string, options: { review: boolean; marks: (0 | 1)[] }) => {\n        updateLoading(true);\n        updateReviewMode(options.review);\n\n        try {\n            const axres = await axios.post(SERVER_URL + \"/osce/get_station\", { token, id });\n\n            if (!axres.data.success) {\n                throw \"selecteStation (OSCEPage): Station retrieval failed!\";\n            }\n\n            if (options.review) {\n                const matches = userDetailsOsce.answeredStations.filter(\n                    s => s.id === axres.data.station.id\n                );\n                const rawResponseAudios =\n                    matches.length === 0\n                        ? Array(axres.data.station.questions.length).fill(\"\")\n                        : matches[0].responseAudios;\n\n                const stationWithMarks = populateMarkScheme(axres.data.station, options.marks);\n                const stationWithResponses = populateResponseAudios(\n                    stationWithMarks,\n                    rawResponseAudios\n                );\n                const localContentStation = await downloadAssets(stationWithResponses, SERVER_URL);\n                updateStation(localContentStation);\n            } else {\n                const localContentStation = await downloadAssets(axres.data.station, SERVER_URL);\n                updateStation(localContentStation);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        updateLoading(false);\n    };\n\n    const handleExit = async (questions: Question[], tok: string) => {\n        updateLoading(true);\n\n        const points = questions\n            .map(q => q.markScheme.map(ms => ms.points.map(p => (p.selected ? 1 : 0))))\n            .flat(2);\n        const markCode = binaryToCode([1 as 1 | 0].concat(points));\n\n        if (!reviewMode) {\n            const responseAudios = await extractReponseAudio(questions);\n            await axios.post(SERVER_URL + \"/osce/update_stations\", {\n                token: tok,\n                markCode,\n                id: station.id,\n                responseAudios,\n            });\n        }\n\n        updateStation(NullStation);\n        window.location.href = \"/OSCE\";\n\n        updateLoading(false);\n    };\n\n    return (\n        <>\n            {subscribeModalOpen && <SubscribeModal close={() => updateSubscribeOpen(false)} />}\n            <Switch>\n                {loading && <LoadingOverlay />}\n\n                <Route exact path=\"/OSCE\">\n                    <HomePage />\n                </Route>\n\n                <Route exact path=\"/OSCE/Selection\">\n                    <Navigator selection={\"OSCE\"} />\n                    <OSCESelector\n                        openSubscribeModal={() => updateSubscribeOpen(true)}\n                        stationSummarires={stationSummarires}\n                        answeredStations={userDetailsOsce.answeredStations}\n                        selectStation={selectStation}\n                        station={station}\n                        purchasedOsce={userDetailsOsce.purchasedOsce}\n                        stationSummariesLoading={stationeSummariesLoading || userLoading}\n                    />\n                </Route>\n\n                <Route path=\"/OSCE/Station\">\n                    <StationPage\n                        handleExit={handleExit}\n                        station={station}\n                        updateStation={updateStation}\n                        answeredStations={userDetailsOsce.answeredStations}\n                        reviewMode={reviewMode}\n                    />\n                </Route>\n            </Switch>\n        </>\n    );\n};\n\nexport default OSCEPage;\n"]},"metadata":{},"sourceType":"module"}