{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionPage.tsx\",\n    _s = $RefreshSig$();\n\nimport QuestionProgress from './QuestionProgress';\nimport Question from './Question';\nimport { useContext, useState } from 'react';\nimport { NOMORE } from '../../types';\nimport SectionProgress from './SectionProgress';\nimport styled from 'styled-components';\nimport Notes from './Notes';\nimport Chat from './Chat';\nimport { Title } from '../General/Title';\nimport MetaContext from '../../MetaContext';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionPage = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const [questionIdx, updateQuestionIdx] = useState(0);\n  const [sectionIdx, updateSectionIdx] = useState(0); // switch to empty filler question if questionIdx out of bounds or no available questions\n\n  const currentQuestion = questionIdx >= 0 && questionIdx < props.availableQuestions.length && props.availableQuestions.length > 0 && sectionIdx < props.availableQuestions[questionIdx].sections.length ? props.availableQuestions[questionIdx] : NOMORE; // render nothing untill sectionIdx is valid\n\n  if (sectionIdx >= currentQuestion.sections.length) {\n    updateSectionIdx(0);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  const canProgressQuestion = questionIdx < props.availableQuestions.length - 1;\n  const canRetreatQuestion = questionIdx > 0;\n  const canSaveAndProgress = sectionIdx === currentQuestion.sections.length - 1;\n  const canProgressSection = currentQuestion.sections[sectionIdx].selectedOption !== -1 && sectionIdx < currentQuestion.sections.length - 1;\n  const canRetreatSection = sectionIdx > 0;\n\n  const saveAndProgress = () => {\n    props.updateAvailableQuestions(props.availableQuestions.map((aq, idx) => {\n      return idx === questionIdx ? { ...aq,\n        Answered: true\n      } : aq;\n    })); // only advance question if there are questions to advance to \n\n    updateQuestionIdx(i => i + 1 === props.availableQuestions.length ? i : i + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(InnerDiv, {\n    darkMode: darkMode,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      darkMode: darkMode,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: darkMode ? \"#FAD000\" : \"#7babff\"\n        },\n        children: \" Finals \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), \" Questions\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionProgress, {\n      canProgressQuestion: canProgressQuestion,\n      canRetreatQuestion: canRetreatQuestion,\n      questionIdx: questionIdx,\n      questionCount: props.availableQuestions.length,\n      sectionIdx: sectionIdx,\n      sectionCount: currentQuestion.sections.length,\n      updateQuestionIdx: updateQuestionIdx,\n      finishSession: props.finishSession,\n      reviewMode: props.reviewMode,\n      currentQuestion: currentQuestion,\n      updateSectionIdx: updateSectionIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      availableQuestions: props.availableQuestions,\n      updateAvailableQuestions: props.updateAvailableQuestions,\n      questionIdx: questionIdx,\n      updateQuestionIdx: updateQuestionIdx,\n      currentQuestion: currentQuestion,\n      sectionIdx: sectionIdx,\n      updateSectionIdx: updateSectionIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SectionProgress, {\n      canProgressSection: canProgressSection,\n      canRetreatSection: canRetreatSection,\n      updateSectionIdx: updateSectionIdx,\n      renderBackButton: false,\n      saveAndProgress: saveAndProgress,\n      canSaveAndProgress: canSaveAndProgress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Notes, {\n      questionIdx: currentQuestion.questionIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      questionIdx: currentQuestion.questionIdx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionPage, \"YrzDDP13pQjNDrAP3swAZf8CO5A=\");\n\n_c = QuestionPage;\nexport default QuestionPage;\nconst InnerDiv = styled.div`\n    max-width: 800px;\n    margin: auto;\n    padding-top: 20px;\n`;\n_c2 = InnerDiv;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPage\");\n$RefreshReg$(_c2, \"InnerDiv\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/QuestionPage.tsx"],"names":["QuestionProgress","Question","useContext","useState","NOMORE","SectionProgress","styled","Notes","Chat","Title","MetaContext","QuestionPage","props","darkMode","questionIdx","updateQuestionIdx","sectionIdx","updateSectionIdx","currentQuestion","availableQuestions","length","sections","canProgressQuestion","canRetreatQuestion","canSaveAndProgress","canProgressSection","selectedOption","canRetreatSection","saveAndProgress","updateAvailableQuestions","map","aq","idx","Answered","i","color","finishSession","reviewMode","InnerDiv","div"],"mappings":"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","sourcesContent":["import QuestionProgress from './QuestionProgress';\nimport Question from './Question';\nimport { useContext, useState } from 'react';\nimport { FinalsQuestion, NOMORE } from '../../types';\nimport SectionProgress from './SectionProgress';\nimport styled from 'styled-components';\nimport Notes from './Notes';\nimport Chat from './Chat';\nimport { Title } from '../General/Title';\nimport MetaContext from '../../MetaContext';\n\ntype QuestionPageProps = {\n    availableQuestions: FinalsQuestion[];\n    updateAvailableQuestions: React.Dispatch<React.SetStateAction<FinalsQuestion[]>>;\n    finishSession: () => void;\n    reviewMode: boolean;\n}\n\nconst QuestionPage = (props: QuestionPageProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n    const [questionIdx, updateQuestionIdx] = useState(0);\n    const [sectionIdx, updateSectionIdx] = useState(0);\n    \n    // switch to empty filler question if questionIdx out of bounds or no available questions\n    const currentQuestion = questionIdx >= 0                                                    && \n                            questionIdx < props.availableQuestions.length                       && \n                            props.availableQuestions.length > 0                                 && \n                            sectionIdx < props.availableQuestions[questionIdx].sections.length\n        ? props.availableQuestions[questionIdx]\n        : NOMORE;\n\n    // render nothing untill sectionIdx is valid\n    if (sectionIdx >= currentQuestion.sections.length) {\n        updateSectionIdx(0);\n        return <></>;\n    }\n\n    const canProgressQuestion = questionIdx < props.availableQuestions.length - 1;\n    const canRetreatQuestion  = questionIdx > 0;\n    const canSaveAndProgress = sectionIdx === currentQuestion.sections.length - 1;\n\n    const canProgressSection = currentQuestion.sections[sectionIdx].selectedOption !== -1 && sectionIdx < currentQuestion.sections.length - 1;\n    const canRetreatSection  = sectionIdx > 0;\n\n    const saveAndProgress = () => {\n\n        props.updateAvailableQuestions(props.availableQuestions.map((aq, idx) => {\n            return idx === questionIdx\n                ? { ...aq, Answered: true }\n                : aq\n        }))\n\n        // only advance question if there are questions to advance to \n        updateQuestionIdx(i => i + 1 === props.availableQuestions.length ? i : i + 1);\n    }\n\n    return (\n        <InnerDiv darkMode = { darkMode }>\n\n            <Title darkMode = { darkMode }>\n                <span style = {{ color: (darkMode ? \"#FAD000\" : \"#7babff\") }}> Finals </span> Questions\n            </Title>\n\n            <br/>\n\n            <QuestionProgress \n                canProgressQuestion = { canProgressQuestion }\n                canRetreatQuestion = { canRetreatQuestion }\n                questionIdx = { questionIdx }\n                questionCount = { props.availableQuestions.length }\n                sectionIdx = { sectionIdx }\n                sectionCount = { currentQuestion.sections.length }\n                updateQuestionIdx = { updateQuestionIdx }\n                finishSession = { props.finishSession }\n                reviewMode = { props.reviewMode }\n                currentQuestion = { currentQuestion }\n                updateSectionIdx = { updateSectionIdx }\n            />\n\n            <Question \n                availableQuestions = { props.availableQuestions }\n                updateAvailableQuestions = { props.updateAvailableQuestions }\n                questionIdx = { questionIdx }\n                updateQuestionIdx = { updateQuestionIdx }\n                currentQuestion = { currentQuestion }\n                sectionIdx = { sectionIdx }\n                updateSectionIdx = { updateSectionIdx }\n            />\n\n            <SectionProgress \n                canProgressSection = { canProgressSection } \n                canRetreatSection = { canRetreatSection } \n                updateSectionIdx = { updateSectionIdx } \n                renderBackButton = { false } \n                saveAndProgress = { saveAndProgress }\n                canSaveAndProgress = { canSaveAndProgress }\n            /> \n\n            <Notes questionIdx = { currentQuestion.questionIdx } />\n\n            <br/><br/>\n\n            <Chat questionIdx = { currentQuestion.questionIdx } />  \n\n        </InnerDiv>\n           \n    );\n}\n\nexport default QuestionPage;\n\nconst InnerDiv = styled.div<{ darkMode: boolean }>`\n    max-width: 800px;\n    margin: auto;\n    padding-top: 20px;\n`;"]},"metadata":{},"sourceType":"module"}