{"ast":null,"code":"export var createIsSupportedPromise = function createIsSupportedPromise(window) {\n  if (window !== null && window.MediaStream !== undefined && (\n  /*\n   * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n   */\n  window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)) {\n    /*\n     * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n     * audio codec.\n     */\n    return new Promise(function (resolve) {\n      // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n      if (window.MediaRecorder === undefined) {\n        return resolve(true);\n      } // @todo captureStream() is not defined yet.\n\n\n      var canvasElement = document.createElement('canvas'); // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n\n      canvasElement.getContext('2d');\n\n      if (typeof canvasElement.captureStream !== 'function') {\n        return resolve(false);\n      }\n\n      var mediaStream = canvasElement.captureStream();\n      var mimeType = 'audio/webm';\n\n      try {\n        var mediaRecorder = new window.MediaRecorder(mediaStream, {\n          mimeType: mimeType\n        });\n        mediaRecorder.addEventListener('dataavailable', function (_ref) {\n          var data = _ref.data;\n          return resolve(data.type === mimeType);\n        });\n        mediaRecorder.start();\n        setTimeout(function () {\n          return mediaRecorder.stop();\n        }, 10);\n      } catch (err) {\n        resolve(err.name === 'NotSupportedError');\n      }\n    });\n  }\n\n  return Promise.resolve(false);\n};","map":null,"metadata":{},"sourceType":"module"}