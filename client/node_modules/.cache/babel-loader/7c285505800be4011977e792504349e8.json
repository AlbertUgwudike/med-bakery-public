{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx\",\n    _this = this;\n\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar StationPage = function StationPage(props) {\n  if (props.station.id === \"NullStation\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/OSCE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 52\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/OSCE/Station\",\n      children: /*#__PURE__*/_jsxDEV(Brief, {\n        station: props.station,\n        updateStation: props.updateStation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, _this), props.station.questions.map(function (_, questionIdx) {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/OSCE/Station/\" + questionIdx,\n        children: function children(_ref) {\n          var match = _ref.match;\n          return /*#__PURE__*/_jsxDEV(QuestionPage, {\n            station: props.station,\n            updateStation: props.updateStation,\n            questionIdx: questionIdx,\n            handleExit: props.handleExit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, _this);\n        }\n      }, questionIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/Station/Summary\",\n      children: /*#__PURE__*/_jsxDEV(Summary, {\n        station: props.station,\n        updateStation: props.updateStation,\n        handleExit: props.handleExit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, _this), props.station.questions.map(function (_, questionIdx) {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/OSCE/Station/Review\" + questionIdx,\n        children: /*#__PURE__*/_jsxDEV(QuestionReviewPage, {\n          station: props.station,\n          updateStation: props.updateStation,\n          questionIdx: questionIdx,\n          handleExit: props.handleExit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, _this)\n      }, props.station.questions[questionIdx].question, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/Station/MarkReview\",\n      children: /*#__PURE__*/_jsxDEV(MarkReviewPage, {\n        station: props.station,\n        updateStation: props.updateStation,\n        reviewMode: props.reviewMode,\n        handleExit: props.handleExit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = StationPage;\nexport default StationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StationPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx"],"names":["Redirect","Route","Switch","Brief","MarkReviewPage","QuestionPage","QuestionReviewPage","Summary","StationPage","props","station","id","updateStation","questions","map","_","questionIdx","match","handleExit","question","reviewMode"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { AnsweredStationDetails, Question, Station } from \"./types\";\n\ntype StationPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    answeredStations: AnsweredStationDetails[];\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst StationPage = (props: StationPageProps) => {\n    if (props.station.id === \"NullStation\") return <Redirect to=\"/OSCE\" />;\n\n    return (\n        <Switch>\n            <Route exact path=\"/OSCE/Station\">\n                <Brief station={props.station} updateStation={props.updateStation} />\n            </Route>\n\n            {props.station.questions.map((_, questionIdx) => (\n                <Route path={\"/OSCE/Station/\" + questionIdx} key={questionIdx}>\n                    {({ match }) => (\n                        <QuestionPage\n                            station={props.station}\n                            updateStation={props.updateStation}\n                            questionIdx={questionIdx}\n                            handleExit={props.handleExit}\n                        />\n                    )}\n                </Route>\n            ))}\n\n            <Route path=\"/OSCE/Station/Summary\">\n                <Summary\n                    station={props.station}\n                    updateStation={props.updateStation}\n                    handleExit={props.handleExit}\n                />\n            </Route>\n\n            {props.station.questions.map((_, questionIdx) => (\n                <Route\n                    path={\"/OSCE/Station/Review\" + questionIdx}\n                    key={props.station.questions[questionIdx].question}\n                >\n                    <QuestionReviewPage\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        questionIdx={questionIdx}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n            ))}\n\n            <Route path=\"/OSCE/Station/MarkReview\">\n                <MarkReviewPage\n                    station={props.station}\n                    updateStation={props.updateStation}\n                    reviewMode={props.reviewMode}\n                    handleExit={props.handleExit}\n                />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default StationPage;\n"]},"metadata":{},"sourceType":"module"}