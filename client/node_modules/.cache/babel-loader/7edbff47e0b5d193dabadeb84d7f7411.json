{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/FinalsPage/LastSessionRouter.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport MetaContext from \"../../MetaContext\";\nimport QuestionPage from \"../QuestionPage/QuestionPage\";\nimport PreviousSessionsPage from \"./PreviousSessionsPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LastSessionRouter = props => {\n  _s();\n\n  const {\n    SERVER_URL,\n    token\n  } = useContext(MetaContext);\n  const [previousSessions, updatePreviousSessions] = useState([]);\n  const [selectedSession, updateSelectedSession] = useState([]);\n  useEffect(() => {\n    axios.post(SERVER_URL + \"/users/previoussessions\", {\n      token\n    }).then(res => {\n      updatePreviousSessions(res.data);\n    }).catch(err => console.log(\"woopsie! \" + err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/User/Finals/LastSession\",\n      children: /*#__PURE__*/_jsxDEV(PreviousSessionsPage, {\n        previousSessions: previousSessions,\n        updateSelectedSession: updateSelectedSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/User/Finals/LastSession/Session\",\n      children: /*#__PURE__*/_jsxDEV(QuestionPage, {\n        availableQuestions: selectedSession,\n        updateAvailableQuestions: updateSelectedSession,\n        finishSession: () => {},\n        reviewMode: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LastSessionRouter, \"sDMEEHzXmCdpKNdUGYoum6Zog24=\");\n\n_c = LastSessionRouter;\nexport default LastSessionRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"LastSessionRouter\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/FinalsPage/LastSessionRouter.tsx"],"names":["axios","useContext","useEffect","useState","Route","Switch","MetaContext","QuestionPage","PreviousSessionsPage","LastSessionRouter","props","SERVER_URL","token","previousSessions","updatePreviousSessions","selectedSession","updateSelectedSession","post","then","res","data","catch","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;;AAMA,MAAMC,iBAAiB,GAAIC,KAAD,IAAmC;AAAA;;AAEzD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwBX,UAAU,CAACK,WAAD,CAAxC;AACA,QAAM,CAACO,gBAAD,EAAmBC,sBAAnB,IAA6CX,QAAQ,CAAC,EAAD,CAA3D;AACA,QAAM,CAACY,eAAD,EAAkBC,qBAAlB,IAA2Cb,QAAQ,CAAC,EAAD,CAAzD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,KAAK,CAACiB,IAAN,CAAWN,UAAU,GAAG,yBAAxB,EAAmD;AAAEC,MAAAA;AAAF,KAAnD,EACKM,IADL,CACUC,GAAG,IAAI;AACTL,MAAAA,sBAAsB,CAACK,GAAG,CAACC,IAAL,CAAtB;AACH,KAHL,EAIKC,KAJL,CAIWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,cAAcF,GAA1B,CAJlB;AAKH,GANQ,EAMN,EANM,CAAT;AAQA,sBACI,QAAC,MAAD;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,0BAApB;AAAA,6BACI,QAAC,oBAAD;AACI,QAAA,gBAAgB,EAAKT,gBADzB;AAEI,QAAA,qBAAqB,EAAKG;AAF9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,kCAAd;AAAA,6BACI,QAAC,YAAD;AACI,QAAA,kBAAkB,EAAKD,eAD3B;AAEI,QAAA,wBAAwB,EAAKC,qBAFjC;AAGI,QAAA,aAAa,EAAK,MAAM,CAAE,CAH9B;AAII,QAAA,UAAU,EAAK;AAJnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAnCD;;GAAMP,iB;;KAAAA,iB;AAqCN,eAAeA,iBAAf","sourcesContent":["import axios from \"axios\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport MetaContext from \"../../MetaContext\";\nimport { FinalsQuestion } from \"../../types\";\nimport QuestionPage from \"../QuestionPage/QuestionPage\";\nimport PreviousSessionsPage from \"./PreviousSessionsPage\";\n\ntype LastSessionRouterProps = {\n    reviewMode: boolean; // allows for unrestricted question navigation\n}\n\nconst LastSessionRouter = (props: LastSessionRouterProps) => {\n\n    const { SERVER_URL, token } = useContext(MetaContext);\n    const [previousSessions, updatePreviousSessions] = useState([] as FinalsQuestion[][]);\n    const [selectedSession, updateSelectedSession] = useState([] as FinalsQuestion[]);\n\n    useEffect(() => {\n        axios.post(SERVER_URL + \"/users/previoussessions\", { token })\n            .then(res => {\n                updatePreviousSessions(res.data);\n            })\n            .catch(err => console.log(\"woopsie! \" + err)); \n    }, []);\n\n    return (\n        <Switch> \n\n            <Route exact path = \"/User/Finals/LastSession\">\n                <PreviousSessionsPage\n                    previousSessions = { previousSessions }\n                    updateSelectedSession = { updateSelectedSession }\n                />\n            </Route>\n\n            <Route path = \"/User/Finals/LastSession/Session\">\n                <QuestionPage \n                    availableQuestions = { selectedSession }\n                    updateAvailableQuestions = { updateSelectedSession }\n                    finishSession = { () => {} }\n                    reviewMode = { true }\n                />\n            </Route>\n\n        </Switch>\n    )\n}\n\nexport default LastSessionRouter"]},"metadata":{},"sourceType":"module"}