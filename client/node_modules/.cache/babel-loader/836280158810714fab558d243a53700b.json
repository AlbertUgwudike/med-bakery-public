{"ast":null,"code":"import _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Container } from \"../Common\";\nimport QuestionReviewContent from \"./QuestionReviewContent\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Slider from \"react-slick\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar QuestionReviewPage = function QuestionReviewPage(props) {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderRef = _useState2[0],\n      setSliderRef = _useState2[1];\n\n  var history = useHistory();\n  var idx = props.questionIdx;\n  var questionCount = props.station.questions.length;\n\n  var nextFunc = function nextFunc() {\n    idx === questionCount - 1 ? history.push(\"/OSCE/Station/MarkReview\") : props.updateIdx(idx + 1);\n    sliderRef === null || sliderRef === void 0 ? void 0 : sliderRef.slickNext();\n  };\n\n  var prevFunc = function prevFunc() {\n    if (idx > 0) props.updateIdx(idx - 1);\n    sliderRef === null || sliderRef === void 0 ? void 0 : sliderRef.slickPrev();\n  };\n\n  var settings = {\n    arrows: false,\n    infinite: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    vertical: true,\n    initialSlide: props.questionIdx\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        updateStation: props.updateStation,\n        station: props.station,\n        handleExit: props.handleExit,\n        title: \"Review\",\n        percentage: 10 + 100 * idx / questionCount,\n        timer: false,\n        nextFunc: nextFunc,\n        prevFunc: prevFunc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Slider, _objectSpread(_objectSpread({\n        ref: setSliderRef\n      }, settings), {}, {\n        children: props.station.questions.map(function (q, questionIdx) {\n          return /*#__PURE__*/_jsxDEV(QuestionReviewContent, {\n            question: q,\n            questionIdx: questionIdx,\n            updateStation: props.updateStation,\n            reviewMode: props.reviewMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, _this);\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionReviewPage, \"rgBDNffjDSYqdVrDDNOBqam0wio=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionReviewPage;\nexport default QuestionReviewPage;\n\nfunction useState(arg0) {\n  throw new Error(\"Function not implemented.\");\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionReviewPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionReview/QuestionReviewPage.tsx"],"names":["Container","QuestionReviewContent","useHistory","Header","Slider","QuestionReviewPage","props","useState","sliderRef","setSliderRef","history","idx","questionIdx","questionCount","station","questions","length","nextFunc","push","updateIdx","slickNext","prevFunc","slickPrev","settings","arrows","infinite","slidesToShow","slidesToScroll","vertical","initialSlide","textAlign","display","gridTemplateColumns","updateStation","handleExit","map","q","reviewMode","arg0","Error"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionReviewContent from \"./QuestionReviewContent\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../Header\";\nimport Slider from \"react-slick\";\n\ntype QuestionReviewPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateIdx: Dispatch<SetStateAction<number>>;\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionReviewPage = (props: QuestionReviewPageProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const history = useHistory();\n    const idx = props.questionIdx;\n    const questionCount = props.station.questions.length;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/MarkReview\")\n            : props.updateIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container style={{ textAlign: \"center\" }}>\n            <div\n                style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"1fr\",\n                }}\n            >\n                <Header\n                    updateStation={props.updateStation}\n                    station={props.station}\n                    handleExit={props.handleExit}\n                    title={\"Review\"}\n                    percentage={10 + (100 * idx) / questionCount}\n                    timer={false}\n                    nextFunc={nextFunc}\n                    prevFunc={prevFunc}\n                />\n\n                <Slider ref={setSliderRef} {...settings}>\n                    {props.station.questions.map((q, questionIdx) => (\n                        <QuestionReviewContent\n                            question={q}\n                            questionIdx={questionIdx}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                        />\n                    ))}\n                </Slider>\n            </div>\n        </Container>\n    );\n};\n\nexport default QuestionReviewPage;\nfunction useState<T>(arg0: null): [any, any] {\n    throw new Error(\"Function not implemented.\");\n}\n"]},"metadata":{},"sourceType":"module"}