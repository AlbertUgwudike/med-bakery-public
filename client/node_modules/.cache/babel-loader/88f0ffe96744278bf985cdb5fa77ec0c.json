{"ast":null,"code":"import _defineProperty from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { generateUniqueNumber } from 'fast-unique-numbers';\nimport { isMessagePort } from './guards/message-port';\nimport { extendBrokerImplementation } from './helpers/extend-broker-implementation';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nvar ONGOING_REQUESTS = new WeakMap();\n\nvar createOrGetOngoingRequests = function createOrGetOngoingRequests(sender) {\n  if (ONGOING_REQUESTS.has(sender)) {\n    // @todo TypeScript needs to be convinced that has() works as expected.\n    return ONGOING_REQUESTS.get(sender);\n  }\n\n  var ongoingRequests = new Map();\n  ONGOING_REQUESTS.set(sender, ongoingRequests);\n  return ongoingRequests;\n};\n\nexport var createBroker = function createBroker(brokerImplementation) {\n  var fullBrokerImplementation = extendBrokerImplementation(brokerImplementation);\n  return function (sender) {\n    var ongoingRequests = createOrGetOngoingRequests(sender);\n    sender.addEventListener('message', function (_ref) {\n      var message = _ref.data;\n      var id = message.id;\n\n      if (id !== null && ongoingRequests.has(id)) {\n        var _ongoingRequests$get = ongoingRequests.get(id),\n            reject = _ongoingRequests$get.reject,\n            resolve = _ongoingRequests$get.resolve;\n\n        ongoingRequests.delete(id);\n\n        if (message.error === undefined) {\n          resolve(message.result);\n        } else {\n          reject(new Error(message.error.message));\n        }\n      }\n    });\n\n    if (isMessagePort(sender)) {\n      sender.start();\n    }\n\n    var call = function call(method) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return new Promise(function (resolve, reject) {\n        var id = generateUniqueNumber(ongoingRequests);\n        ongoingRequests.set(id, {\n          reject: reject,\n          resolve: resolve\n        });\n\n        if (params === null) {\n          sender.postMessage({\n            id: id,\n            method: method\n          }, transferables);\n        } else {\n          sender.postMessage({\n            id: id,\n            method: method,\n            params: params\n          }, transferables);\n        }\n      });\n    };\n\n    var notify = function notify(method, params) {\n      var transferables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      sender.postMessage({\n        id: null,\n        method: method,\n        params: params\n      }, transferables);\n    };\n\n    var functions = {};\n\n    for (var _i = 0, _Object$entries = Object.entries(fullBrokerImplementation); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          handler = _Object$entries$_i[1];\n\n      functions = _objectSpread(_objectSpread({}, functions), {}, _defineProperty({}, key, handler({\n        call: call,\n        notify: notify\n      })));\n    }\n\n    return _objectSpread({}, functions);\n  };\n};","map":{"version":3,"sources":["../../src/module.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { generateUniqueNumber } from 'fast-unique-numbers';\nimport { isMessagePort } from './guards/message-port';\nimport { extendBrokerImplementation } from './helpers/extend-broker-implementation';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst ONGOING_REQUESTS = new WeakMap();\nconst createOrGetOngoingRequests = (sender) => {\n    if (ONGOING_REQUESTS.has(sender)) {\n        // @todo TypeScript needs to be convinced that has() works as expected.\n        return ONGOING_REQUESTS.get(sender);\n    }\n    const ongoingRequests = new Map();\n    ONGOING_REQUESTS.set(sender, ongoingRequests);\n    return ongoingRequests;\n};\nexport const createBroker = (brokerImplementation) => {\n    const fullBrokerImplementation = extendBrokerImplementation(brokerImplementation);\n    return (sender) => {\n        const ongoingRequests = createOrGetOngoingRequests(sender);\n        sender.addEventListener('message', (({ data: message }) => {\n            const { id } = message;\n            if (id !== null && ongoingRequests.has(id)) {\n                const { reject, resolve } = ongoingRequests.get(id);\n                ongoingRequests.delete(id);\n                if (message.error === undefined) {\n                    resolve(message.result);\n                }\n                else {\n                    reject(new Error(message.error.message));\n                }\n            }\n        }));\n        if (isMessagePort(sender)) {\n            sender.start();\n        }\n        const call = (method, params = null, transferables = []) => {\n            return new Promise((resolve, reject) => {\n                const id = generateUniqueNumber(ongoingRequests);\n                ongoingRequests.set(id, { reject, resolve });\n                if (params === null) {\n                    sender.postMessage({ id, method }, transferables);\n                }\n                else {\n                    sender.postMessage({ id, method, params }, transferables);\n                }\n            });\n        };\n        const notify = (method, params, transferables = []) => {\n            sender.postMessage({ id: null, method, params }, transferables);\n        };\n        let functions = {};\n        for (const [key, handler] of Object.entries(fullBrokerImplementation)) {\n            functions = { ...functions, [key]: handler({ call, notify }) };\n        }\n        return { ...functions };\n    };\n};\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}