{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../../old-components/ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// lets implement things as a SEQUENCE?!!!!\nvar QuestionContent = function QuestionContent(props) {\n  _s();\n\n  var _useContext = useContext(MetaContext),\n      narrowWindow = _useContext.narrowWindow;\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStop: function onStop(blobUrl, _) {\n      console.log(\"recording stopped\");\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n      var endTone = document.getElementById(\"endTone\");\n      endTone.play();\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording,\n      status = _useReactMediaRecorde.status; // stop wavesurfer when component unmounts ---------------------------------\n  // wavesurfers should stop automatically as station swipes due to (unmount on exit)\n  // this will also reset responseplaying\n  // useEffect(() => {\n  //     return () => {\n  //         console.log(props.questionIdx, \"unmounted\");\n  //         responseWaveSurfer?.stop();\n  //     };\n  // });\n  // -------------------------------------------------------------------------\n  // this is set to true in the same render cycle as station update to ensure\n  // unmounting occurs only after succesfful update---------------------------\n\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      shouldProgress = _useState2[0],\n      updateShouldProgress = _useState2[1];\n\n  if (shouldProgress) {\n    updateShouldProgress(false);\n    props.nextFunc();\n  } // -------------------------------------------------------------------------\n\n\n  var recording = status === \"recording\";\n  var promptAudio = document.getElementById(promptId + props.questionIdx);\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      responseWaveSurfer = _useState4[0],\n      updateResponseWaveSurfer = _useState4[1];\n\n  var responsePlaying = responseWaveSurfer ? responseWaveSurfer.isPlaying() : false;\n\n  var stopEverything = function stopEverything() {\n    promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.pause();\n    responseWaveSurfer === null || responseWaveSurfer === void 0 ? void 0 : responseWaveSurfer.stop();\n    if (recording) stopRecording();\n  };\n\n  var play = function play(id) {\n    stopEverything();\n    if (id === promptId) promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.play();else responseWaveSurfer === null || responseWaveSurfer === void 0 ? void 0 : responseWaveSurfer.play();\n  };\n\n  useEffect(function () {\n    if (props.active) promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.play();else stopEverything();\n  }, [props.active]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowStart: 2,\n        gridColumnStart: 1,\n        height: \"60vh\",\n        transition: \"transform \".concat(500, \"ms\")\n      },\n      children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n        question: props.question,\n        toggle: function toggle() {\n          !(promptAudio === null || promptAudio === void 0 ? void 0 : promptAudio.paused) ? stopEverything() : play(promptId);\n        },\n        promptId: promptId + props.questionIdx\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          height: \"49vh\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: props.question.img,\n          narrowWindow: narrowWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowStart: 4,\n        gridColumnStart: 1,\n        zIndex: 700,\n        backgroundColor: \"#1c2124\",\n        height: \"15vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(WaveSurfer, {\n        playing: responsePlaying,\n        playResponse: function playResponse() {\n          return play(\"waveform\" + props.questionIdx);\n        },\n        stopEverything: stopEverything,\n        responseAudio: props.question.responseAudio,\n        questionIdx: props.questionIdx,\n        updateResponseWaveSurfer: updateResponseWaveSurfer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(RecordControl, {\n        recording: recording,\n        stopEverything: stopEverything,\n        startRecording: startRecording\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        id: \"endTone\",\n        src: startToneUrl,\n        onEnded: function onEnded() {\n          return updateShouldProgress(true);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionContent, \"bklM/bivt+Rj4Hy70hVmBw6m09k=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionContent;\nexport default QuestionContent;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    max-width: 100%;\\n    max-height: 100%;\\n    transition: width 0.2s;\\n\"])));\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionContent\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionContent.tsx"],"names":["useContext","useEffect","useState","useReactMediaRecorder","styled","copy","Box","QuestionPrompt","RecordControl","WaveSurfer","promptId","MetaContext","startToneUrl","QuestionContent","props","narrowWindow","audio","onStop","blobUrl","_","console","log","updateStation","s","questions","questionIdx","responseAudio","endTone","document","getElementById","play","startRecording","stopRecording","status","shouldProgress","updateShouldProgress","nextFunc","recording","promptAudio","undefined","responseWaveSurfer","updateResponseWaveSurfer","responsePlaying","isPlaying","stopEverything","pause","stop","id","active","gridRowStart","gridColumnStart","height","transition","question","paused","display","alignItems","img","zIndex","backgroundColor","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useContext, useEffect, useRef, useState } from \"react\";\nimport {\n    ReactMediaRecorderRenderProps,\n    StatusMessages,\n    useReactMediaRecorder,\n} from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../../../old-components/ECGPage/Functions/utility\";\nimport { Box } from \"../Common\";\nimport { generateWaveSurfer, playStartTone, populateResponseAudios } from \"../hooks\";\nimport QuestionPrompt from \"../QuestionPrompt\";\nimport RecordControl from \"./RecordControl\";\nimport WaveSurfer from \"./WaveSurfer\";\nimport { promptId, Question, responseId, Station } from \"../types\";\nimport MetaContext from \"../../../MetaContext\";\nimport startToneUrl from \"../media/start.mp3\";\nimport { produceHeat } from \"../../../functions\";\n\ntype QuestionContentProps = {\n    question: Question;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    active: boolean;\n    questionIdx: number;\n    updateQuestionIdx: Dispatch<SetStateAction<{ prev: number; curr: number }>>;\n    nextFunc: () => void;\n};\n\n// lets implement things as a SEQUENCE?!!!!\n\nconst QuestionContent = (props: QuestionContentProps) => {\n    const { narrowWindow } = useContext(MetaContext);\n\n    const { startRecording, stopRecording, status } = useReactMediaRecorder({\n        audio: true,\n        onStop: (blobUrl, _) => {\n            console.log(\"recording stopped\");\n            props.updateStation(s => {\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n\n            const endTone = document.getElementById(\"endTone\") as HTMLAudioElement;\n            endTone.play();\n        },\n    });\n\n    // stop wavesurfer when component unmounts ---------------------------------\n    // wavesurfers should stop automatically as station swipes due to (unmount on exit)\n    // this will also reset responseplaying\n    // useEffect(() => {\n    //     return () => {\n    //         console.log(props.questionIdx, \"unmounted\");\n    //         responseWaveSurfer?.stop();\n    //     };\n    // });\n    // -------------------------------------------------------------------------\n\n    // this is set to true in the same render cycle as station update to ensure\n    // unmounting occurs only after succesfful update---------------------------\n    const [shouldProgress, updateShouldProgress] = useState(false);\n    if (shouldProgress) {\n        updateShouldProgress(false);\n        props.nextFunc();\n    }\n    // -------------------------------------------------------------------------\n\n    const recording = status === \"recording\";\n\n    const promptAudio = document.getElementById(\n        promptId + props.questionIdx\n    ) as HTMLAudioElement | null;\n\n    const [responseWaveSurfer, updateResponseWaveSurfer] = useState<WaveSurfer | undefined>(\n        undefined\n    );\n\n    const responsePlaying = responseWaveSurfer ? responseWaveSurfer.isPlaying() : false;\n\n    const stopEverything = () => {\n        promptAudio?.pause();\n        responseWaveSurfer?.stop();\n        if (recording) stopRecording();\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        if (id === promptId) promptAudio?.play();\n        else responseWaveSurfer?.play();\n    };\n\n    useEffect(() => {\n        if (props.active) promptAudio?.play();\n        else stopEverything();\n    }, [props.active]);\n\n    return (\n        <div>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    height: \"60vh\",\n                    transition: `transform ${500}ms`,\n                }}\n            >\n                <QuestionPrompt\n                    question={props.question}\n                    toggle={() => {\n                        !promptAudio?.paused ? stopEverything() : play(promptId);\n                    }}\n                    promptId={promptId + props.questionIdx}\n                />\n                <Box\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        height: \"49vh\",\n                    }}\n                >\n                    <Img src={props.question.img} narrowWindow={narrowWindow}></Img>\n                    <br />\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 4,\n                    gridColumnStart: 1,\n                    zIndex: 700,\n                    backgroundColor: \"#1c2124\",\n                    height: \"15vh\",\n                }}\n            >\n                <WaveSurfer\n                    playing={responsePlaying}\n                    playResponse={() => play(\"waveform\" + props.questionIdx)}\n                    stopEverything={stopEverything}\n                    responseAudio={props.question.responseAudio}\n                    questionIdx={props.questionIdx}\n                    updateResponseWaveSurfer={updateResponseWaveSurfer}\n                />\n\n                <RecordControl\n                    recording={recording}\n                    stopEverything={stopEverything}\n                    startRecording={startRecording}\n                />\n\n                <audio id=\"endTone\" src={startToneUrl} onEnded={() => updateShouldProgress(true)} />\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionContent;\n\nconst Img = styled.img<{ narrowWindow: boolean }>`\n    display: block;\n    margin: auto;\n    max-width: 100%;\n    max-height: 100%;\n    transition: width 0.2s;\n`;\n"]},"metadata":{},"sourceType":"module"}