{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Question.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Question = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext); // keep track fo expanded explanations\n\n  const [expanded, updateExpanded] = useState(resetExandedArray(props.currentQuestion.sections[props.sectionIdx])); // start at section 0 if question changes, important to avoid index overflow bugs\n\n  useEffect(() => {\n    props.updateSectionIdx(0);\n  }, [props.currentQuestion]); // update expanations to be displayed by default\n\n  useEffect(() => {\n    updateExpanded(resetExandedArray(props.currentQuestion.sections[props.sectionIdx]));\n  }, [props.sectionIdx, props.currentQuestion]); // updates questions with user selected answer, checks and set if all sections have been answered\n\n  const selectAnswerOption = (sectionIdx, optionIdx) => {\n    props.updateAvailableQuestions(props.availableQuestions.map((aq, idx) => {\n      if (idx === props.questionIdx) {\n        aq.sections[sectionIdx].selectedOption = optionIdx;\n        aq.answered = aq.sections.reduce((flag, sec) => flag && sec.selectedOption !== -1, true);\n      }\n\n      return aq;\n    })); // display the appropriate explanations\n\n    updateExpanded(expanded.map((el, idx) => idx === optionIdx ? true : el));\n  };\n\n  const formatOption = (sectionIdx, optionIdx) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(OptionButton, {\n        darkMode: darkMode,\n        onClick: () => selectAnswerOption(sectionIdx, optionIdx),\n        children: props.currentQuestion.sections[sectionIdx].options[optionIdx]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  };\n\n  const formatSection = sectionIdx => {\n    const sectionContent = props.currentQuestion.sections[sectionIdx];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"50px auto\",\n        textAlign: \"left\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Panel, {\n        darkMode: darkMode,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            font: \"30px Champion\"\n          },\n          children: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ReactHtmlParser(sectionContent.stem)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: sectionContent.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          padding: 0,\n          listStyleType: \"none\"\n        },\n        children: sectionContent.options.map((_, optionIdx) => formatOption(sectionIdx, optionIdx))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderAnsweredOptions = sectionContent => {\n    return sectionContent.options.map((_, optionIdx) => {\n      let backgroundColor;\n      if (optionIdx === sectionContent.correctOption) backgroundColor = darkMode ? \"#1C725C\" : \"#41BFA0\";else if (optionIdx === sectionContent.selectedOption) backgroundColor = darkMode ? \"#A94D53\" : \"#C6777D\";\n\n      const toggleExplanation = () => updateExpanded({ ...expanded,\n        [optionIdx]: !expanded[optionIdx]\n      });\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(OptionButton, {\n          darkMode: darkMode,\n          style: {\n            backgroundColor\n          },\n          onClick: toggleExplanation,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                textAlign: 'left'\n              },\n              children: sectionContent.options[optionIdx]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" \", expanded[optionIdx] ? /*#__PURE__*/_jsxDEV(FaArrowUp, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 59\n              }, this) : /*#__PURE__*/_jsxDEV(FaArrowDown, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 75\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Explanation, {\n            darkMode: darkMode,\n            expanded: expanded[optionIdx],\n            children: ReactHtmlParser(sectionContent.explanations[optionIdx])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  const formatAnsweredSection = sectionContent => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"50px auto\",\n        textAlign: \"left\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Panel, {\n        darkMode: darkMode,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            font: \"30px Champion\"\n          },\n          children: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ReactHtmlParser(sectionContent.stem)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ReactHtmlParser(sectionContent.question)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        darkMode: darkMode,\n        onClick: () => updateExpanded(expanded.map(_ => !expanded.every(v => v))),\n        children: \"Toggle All Explanations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          padding: 0,\n          listStyleType: \"none\"\n        },\n        children: renderAnsweredOptions(sectionContent)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.currentQuestion.sections.length && props.currentQuestion.sections[props.sectionIdx].selectedOption === -1 ? formatSection(props.sectionIdx) : formatAnsweredSection(props.currentQuestion.sections[props.sectionIdx])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Question, \"rRTSDciUaydSrCVCW7W6TT2tOUo=\");\n\n_c = Question;\nexport default Question;\nconst OptionButton = styled.button`\n    width: 100%;\n    border-radius: 10px;\n    font-size: 15px;\n    margin: 8px auto;\n    text-align: center;\n    border: none;\n    box-shadow: ${props => props.darkMode ? \"0px 0px 5px black\" : \"0px 0px 5px gray\"};\n    padding: 8px 20px;\n    font-family: Proxima;\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    background-color: ${props => props.darkMode ? \"#505050\" : \"#F6F5F0\"};\n    &:hover {\n        background-color: ${props => props.darkMode ? \"rgba(119, 53, 253, 0.5)\" : \"#FBE9EE\"}; \n    }\n`;\n_c2 = OptionButton;\nconst Explanation = styled.div`\n    background-color: ${props => props.darkMode ? \"#1f1f1f\" : \"#F6F5F0\"};\n    border-radius: 10px;\n    margin-top: ${props => props.expanded ? \"10px\" : \"0\"};\n    padding: ${props => props.expanded ? \"20px\" : 0};\n    font-size: 15px;\n    max-height: ${props => props.expanded ? \"1000px\" : \"0\"};\n    overflow: hidden;\n    text-align: left;\n`;\n_c3 = Explanation;\nconst Button = styled.button`\n    display: block;\n    border-radius: 20px;\n    border: none;\n    font-size: 10px;\n    width: 120px;\n    height: 15px;\n    margin: 30px 0 0 0;\n    text-align: center;\n    background-color: ${props => props.selected ? props.darkMode ? \"#1C725C\" : \"#41BFA0\" : props.darkMode ? \"#1B275E\" : \"#F6F5F0\"};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    &:hover {\n        background-color: ${props => props.selected ? props.darkMode ? \"#1C725C\" : \"#41BFA0\" : props.darkMode ? \"#7735FD\" : \"#FBE9EE\"};\n    }\n`;\n_c4 = Button;\n\nconst resetExandedArray = section => {\n  return Array(section.options.length).fill(false).map((_, idx) => {\n    return idx === section.correctOption || idx === section.selectedOption; // rely on previous button click?\n  });\n};\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Question\");\n$RefreshReg$(_c2, \"OptionButton\");\n$RefreshReg$(_c3, \"Explanation\");\n$RefreshReg$(_c4, \"Button\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Question.tsx"],"names":["useContext","useEffect","useState","styled","ReactHtmlParser","FaArrowDown","FaArrowUp","Panel","MetaContext","Question","props","darkMode","expanded","updateExpanded","resetExandedArray","currentQuestion","sections","sectionIdx","updateSectionIdx","selectAnswerOption","optionIdx","updateAvailableQuestions","availableQuestions","map","aq","idx","questionIdx","selectedOption","answered","reduce","flag","sec","el","formatOption","options","formatSection","sectionContent","margin","textAlign","font","stem","question","padding","listStyleType","_","renderAnsweredOptions","backgroundColor","correctOption","toggleExplanation","display","justifyContent","explanations","formatAnsweredSection","every","v","length","OptionButton","button","Explanation","div","Button","selected","section","Array","fill"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { FinalsQuestion, Section } from '../../types';\nimport styled from 'styled-components';\nimport ReactHtmlParser from 'react-html-parser';\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\n\ntype QuestionProps = {\n    availableQuestions: FinalsQuestion[];\n    updateAvailableQuestions: React.Dispatch<React.SetStateAction<FinalsQuestion[]>>;\n    questionIdx: number;\n    updateQuestionIdx: React.Dispatch<React.SetStateAction<number>>;\n    currentQuestion: FinalsQuestion;\n    sectionIdx: number;\n    updateSectionIdx: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst Question = (props: QuestionProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n\n    // keep track fo expanded explanations\n    const [expanded, updateExpanded] = useState(resetExandedArray(props.currentQuestion.sections[props.sectionIdx]))\n\n    // start at section 0 if question changes, important to avoid index overflow bugs\n    useEffect(() => { \n        props.updateSectionIdx(0) \n    }, [props.currentQuestion]);\n\n    // update expanations to be displayed by default\n    useEffect(() => { \n        updateExpanded(resetExandedArray(props.currentQuestion.sections[props.sectionIdx]))\n    }, [props.sectionIdx, props.currentQuestion]);\n\n    // updates questions with user selected answer, checks and set if all sections have been answered\n    const selectAnswerOption = (sectionIdx: number, optionIdx: number) => {\n        props.updateAvailableQuestions(props.availableQuestions.map((aq, idx) => {\n            if (idx === props.questionIdx){\n                aq.sections[sectionIdx].selectedOption = optionIdx;\n                aq.answered = aq.sections.reduce((flag, sec) => flag && sec.selectedOption !== -1, true as boolean);\n            }\n            return aq;\n        }));\n\n        // display the appropriate explanations\n        updateExpanded(expanded.map((el, idx) => idx === optionIdx ? true : el))\n    }\n\n    const formatOption = (sectionIdx: number, optionIdx: number) => {\n        return (\n            <li>\n                <OptionButton\n                    darkMode = { darkMode }\n                    onClick = { () => selectAnswerOption(sectionIdx, optionIdx) }\n                >\n                    { props.currentQuestion.sections[sectionIdx].options[optionIdx] }\n                </OptionButton>\n            </li>\n        );\n    }\n\n    const formatSection = (sectionIdx: number) => {\n        const sectionContent = props.currentQuestion.sections[sectionIdx];\n        return (\n            <div style = {{ margin: \"50px auto\", textAlign: \"left\" }}>\n\n                <Panel darkMode = { darkMode }>\n\n                    <div style = {{ font: \"30px Champion\" }}>Question</div>\n\n                    <br></br>\n\n                    <p>{ ReactHtmlParser(sectionContent.stem)  }</p>\n\n                    <p>{ sectionContent.question }</p>\n\n                </Panel>\n\n                <br/><br/>\n\n                <ul style = {{ padding: 0, listStyleType: \"none\" }} >\n                    { sectionContent.options.map( (_, optionIdx) => formatOption(sectionIdx, optionIdx)) }\n                </ul>\n\n            </div>\n        );\n    } \n\n    const renderAnsweredOptions = (sectionContent: Section) => {\n        return sectionContent.options.map((_, optionIdx) => {\n            let backgroundColor;\n        \n            if (optionIdx === sectionContent.correctOption) \n                backgroundColor = darkMode ? \"#1C725C\" : \"#41BFA0\";\n            else if (optionIdx === sectionContent.selectedOption)\n                backgroundColor = darkMode ? \"#A94D53\" : \"#C6777D\";\n\n            const toggleExplanation = () => updateExpanded({ ...expanded, [optionIdx]: !expanded[optionIdx] })\n                \n            return(\n                <li>\n                    <OptionButton darkMode = { darkMode } style = {{ backgroundColor }} onClick = { toggleExplanation } >\n\n                        <div style = {{ display: \"flex\", justifyContent: \"space-between\" }}>\n                            <div style = {{ textAlign: 'left' }}>{ sectionContent.options[optionIdx] }</div>\n                            <div> { expanded[optionIdx] ? <FaArrowUp /> : <FaArrowDown /> } </div>\n                        </div>\n                        \n                        <Explanation darkMode = { darkMode } expanded = { expanded[optionIdx] }>\n                            { ReactHtmlParser(sectionContent.explanations[optionIdx]) }\n                        </Explanation>\n\n                    </OptionButton>\n                </li>\n            )\n        })\n        \n    }\n\n    const formatAnsweredSection = (sectionContent: Section) => {\n        return (\n            <div style = {{ margin: \"50px auto\", textAlign: \"left\" }}>\n\n                <Panel darkMode = { darkMode }>\n\n                    <div style = {{ font: \"30px Champion\" }}>Question</div>\n\n                    <br></br>\n\n                    <p>{ ReactHtmlParser(sectionContent.stem) }</p>\n\n                    <p>{ ReactHtmlParser(sectionContent.question) }</p>\n\n                </Panel>\n\n                <Button darkMode = { darkMode } onClick = { () => updateExpanded(expanded.map(_ => !expanded.every(v => v))) }>\n                    Toggle All Explanations\n                </Button>\n\n                <ul style = {{ padding: 0, listStyleType: \"none\" }} >\n                    { renderAnsweredOptions(sectionContent) }\n                </ul>\n\n            </div>\n        );\n    }\n\n    return (\n        <div>\n\n            <div >\n                { \n                    props.currentQuestion.sections.length && props.currentQuestion.sections[props.sectionIdx].selectedOption === -1 \n                        ? formatSection(props.sectionIdx) \n                        : formatAnsweredSection(props.currentQuestion.sections[props.sectionIdx])\n                } \n            </div>\n            \n        </div>\n    )\n    \n}\n\nexport default Question\n\n\nconst OptionButton = styled.button<{ darkMode: boolean }>`\n    width: 100%;\n    border-radius: 10px;\n    font-size: 15px;\n    margin: 8px auto;\n    text-align: center;\n    border: none;\n    box-shadow: ${ props => props.darkMode ? \"0px 0px 5px black\" : \"0px 0px 5px gray\" };\n    padding: 8px 20px;\n    font-family: Proxima;\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    background-color: ${ props => props.darkMode ? \"#505050\" : \"#F6F5F0\" };\n    &:hover {\n        background-color: ${ props => props.darkMode ? \"rgba(119, 53, 253, 0.5)\" : \"#FBE9EE\" }; \n    }\n`\n\nconst Explanation = styled.div<{ darkMode: boolean, expanded: boolean }>`\n    background-color: ${ props => props.darkMode ? \"#1f1f1f\" : \"#F6F5F0\" };\n    border-radius: 10px;\n    margin-top: ${ props => props.expanded ? \"10px\" : \"0\" };\n    padding: ${ props => props.expanded ? \"20px\" : 0 };\n    font-size: 15px;\n    max-height: ${ props => props.expanded ? \"1000px\" : \"0\" };\n    overflow: hidden;\n    text-align: left;\n`\n\nconst Button = styled.button<{ darkMode: boolean, selected?: boolean }>`\n    display: block;\n    border-radius: 20px;\n    border: none;\n    font-size: 10px;\n    width: 120px;\n    height: 15px;\n    margin: 30px 0 0 0;\n    text-align: center;\n    background-color: ${ props => props.selected ? (props.darkMode ? \"#1C725C\" : \"#41BFA0\") : ( props.darkMode ? \"#1B275E\" : \"#F6F5F0\" ) };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    &:hover {\n        background-color: ${ props => props.selected ? (props.darkMode ? \"#1C725C\" : \"#41BFA0\") : (props.darkMode ? \"#7735FD\" : \"#FBE9EE\") };\n    }\n`\n\nconst resetExandedArray = (section: Section): boolean[] => {\n    return Array(section.options.length)\n        .fill(false)\n        .map((_, idx) => {\n            return idx === section.correctOption || idx === section.selectedOption // rely on previous button click?\n        })\n}"]},"metadata":{},"sourceType":"module"}