{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, responseId, startAudioRecordingId } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: true,\n  responsePlaying: false,\n  recording: false\n};\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageExpanded = _useState2[0],\n      updateImageExpanded = _useState2[1];\n\n  var _useState3 = useState(initialAudioState),\n      _useState4 = _slicedToArray(_useState3, 2),\n      audioState = _useState4[0],\n      updateAudioState = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingRecorder = _useState6[0],\n      updateLoadingRecorder = _useState6[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStart: function onStart() {\n      updateLoadingRecorder(false);\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          recording: true\n        });\n      });\n      playStartTone();\n    },\n    onStop: function onStop(blobUrl, _) {\n      playStartTone();\n      updateLoadingRecorder(false);\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n        return s;\n      });\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording;\n\n  var percentage = 10 + 100 * props.questionIdx / props.station.questions.length;\n  var pathToNext = props.questionIdx === props.station.questions.length - 1 ? \"/OSCE/Station/Summary\" : \"/OSCE/Station/\" + (props.questionIdx + 1);\n  var question = props.station.questions[props.questionIdx];\n\n  var stopEverything = function stopEverything() {\n    var _audioState$promptAud, _audioState$responseW;\n\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  };\n\n  var play = function play(id) {\n    var _audioState$promptAud2, _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: id === promptId,\n        responsePlaying: id === responseId\n      });\n    });\n    if (id === promptId) (_audioState$promptAud2 = audioState.promptAudio) === null || _audioState$promptAud2 === void 0 ? void 0 : _audioState$promptAud2.play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  var record = function record() {\n    stopEverything();\n    updateLoadingRecorder(true);\n    startRecording();\n  };\n\n  useEffect(function () {\n    var container = document.getElementById(responseId);\n    if (container) container.innerHTML = \"\";\n    updateAudioState(_objectSpread(_objectSpread({}, initialAudioState), {}, {\n      promptAudio: document.getElementById(promptId),\n      responseWaveSurfer: generateWaveSurfer(responseId, question.responseAudio, stopEverything)\n    }));\n  }, [question.responseAudio]); // cease playback when compnent unmounts <=== six hour bug :)\n\n  useEffect(function () {\n    return stopEverything;\n  }, [audioState.promptAudio, audioState.responseWaveSurfer]);\n  return /*#__PURE__*/_jsxDEV(CSSTransition, {\n    in: props.match,\n    timeout: 300,\n    classNames: \"page\",\n    unmountOnExit: true,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n          question: question,\n          toggle: function toggle() {\n            audioState.promptPlaying ? stopEverything() : play(promptId);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Img, {\n            src: question.img,\n            imageExpanded: imageExpanded,\n            onClick: function onClick() {\n              return updateImageExpanded(!imageExpanded);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, _this), \"Click to \", imageExpanded ? \"shrink\" : \"expand\", \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(TaskSection, {\n          recording: audioState.recording,\n          recordResponse: record,\n          playing: audioState.responsePlaying,\n          playResponse: function playResponse() {\n            return play(responseId);\n          },\n          stopEverything: stopEverything,\n          responseAvailable: question.responseAudio !== \"\",\n          loadingRecorder: loadingRecorder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, _this), question.responseAudio !== \"\" || audioState.recording ? /*#__PURE__*/_jsxDEV(Link, {\n          to: pathToNext,\n          onClick: stopEverything,\n          children: /*#__PURE__*/_jsxDEV(MoveOn, {\n            children: \"Move On\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: recordingStartAudioUrl,\n        id: startAudioRecordingId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"IoYcGLBrXDHOJ7wp4BiMEvGuZ7k=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    width: \", \";\\n    transition: width 0.2s;\\n    &:hover {\\n        cursor: pointer;\\n    }\\n\"])), function (props) {\n  return props.imageExpanded ? \"100%\" : \"60%\";\n});\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPage\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx"],"names":["useEffect","useState","Link","styled","Box","MoveOn","Container","TaskSection","promptId","responseId","startAudioRecordingId","QuestionPrompt","generateWaveSurfer","playStartTone","recordingStartAudioUrl","useReactMediaRecorder","CSSTransition","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionPage","props","imageExpanded","updateImageExpanded","audioState","updateAudioState","loadingRecorder","updateLoadingRecorder","audio","onStart","as","onStop","blobUrl","_","updateStation","s","questions","questionIdx","responseAudio","startRecording","stopRecording","percentage","station","length","pathToNext","question","stopEverything","pause","stop","play","id","record","container","document","getElementById","innerHTML","match","textAlign","img","Img"],"mappings":";;;;;;;;;AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,QAAuC,UAAvC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,EAA6BC,UAA7B,EAAyCC,qBAAzC,QAA+E,SAA/E;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,SAAlD;AACA,OAAOC,sBAAP,MAAmC,mBAAnC;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA,SAASC,aAAT,QAA8B,wBAA9B;;;AAkBA,IAAMC,iBAA6B,GAAG;AAClCC,EAAAA,WAAW,EAAE,IADqB;AAElCC,EAAAA,kBAAkB,EAAEC,SAFc;AAGlCC,EAAAA,aAAa,EAAE,IAHmB;AAIlCC,EAAAA,eAAe,EAAE,KAJiB;AAKlCC,EAAAA,SAAS,EAAE;AALuB,CAAtC;;AAQA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA0B;AAAA;;AAC3C,kBAA6CxB,QAAQ,CAAC,KAAD,CAArD;AAAA;AAAA,MAAOyB,aAAP;AAAA,MAAsBC,mBAAtB;;AACA,mBAAuC1B,QAAQ,CAAagB,iBAAb,CAA/C;AAAA;AAAA,MAAOW,UAAP;AAAA,MAAmBC,gBAAnB;;AACA,mBAAiD5B,QAAQ,CAAC,KAAD,CAAzD;AAAA;AAAA,MAAO6B,eAAP;AAAA,MAAwBC,qBAAxB;;AAEA,8BAA0ChB,qBAAqB,CAAC;AAC5DiB,IAAAA,KAAK,EAAE,IADqD;AAE5DC,IAAAA,OAAO,EAAE,mBAAM;AACXF,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAF,MAAAA,gBAAgB,CAAC,UAAAK,EAAE;AAAA,+CAAUA,EAAV;AAAcX,UAAAA,SAAS,EAAE;AAAzB;AAAA,OAAH,CAAhB;AACAV,MAAAA,aAAa;AAChB,KAN2D;AAO5DsB,IAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,CAAV,EAAgB;AACpBxB,MAAAA,aAAa;AACbkB,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAN,MAAAA,KAAK,CAACa,aAAN,CAAoB,UAAAC,CAAC,EAAI;AACrBA,QAAAA,CAAC,CAACC,SAAF,CAAYf,KAAK,CAACgB,WAAlB,EAA+BC,aAA/B,GAA+CN,OAAO,GAAGA,OAAH,GAAa,EAAnE;AACA,eAAOG,CAAP;AACH,OAHD;AAIH;AAd2D,GAAD,CAA/D;AAAA,MAAQI,cAAR,yBAAQA,cAAR;AAAA,MAAwBC,aAAxB,yBAAwBA,aAAxB;;AAiBA,MAAMC,UAAU,GAAG,KAAM,MAAMpB,KAAK,CAACgB,WAAb,GAA4BhB,KAAK,CAACqB,OAAN,CAAcN,SAAd,CAAwBO,MAA5E;AACA,MAAMC,UAAU,GACZvB,KAAK,CAACgB,WAAN,KAAsBhB,KAAK,CAACqB,OAAN,CAAcN,SAAd,CAAwBO,MAAxB,GAAiC,CAAvD,GACM,uBADN,GAEM,oBAAoBtB,KAAK,CAACgB,WAAN,GAAoB,CAAxC,CAHV;AAIA,MAAMQ,QAAQ,GAAGxB,KAAK,CAACqB,OAAN,CAAcN,SAAd,CAAwBf,KAAK,CAACgB,WAA9B,CAAjB;;AAEA,MAAMS,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AACzB,6BAAAtB,UAAU,CAACV,WAAX,gFAAwBiC,KAAxB;AACA,6BAAAvB,UAAU,CAACT,kBAAX,gFAA+BiC,IAA/B;AACA,QAAIxB,UAAU,CAACL,SAAf,EAA0BqB,aAAa;AACvCf,IAAAA,gBAAgB,CAAC,UAAAK,EAAE;AAAA,6CACZA,EADY;AAEfb,QAAAA,aAAa,EAAE,KAFA;AAGfC,QAAAA,eAAe,EAAE,KAHF;AAIfC,QAAAA,SAAS,EAAE;AAJI;AAAA,KAAH,CAAhB;AAMH,GAVD;;AAYA,MAAM8B,IAAI,GAAG,SAAPA,IAAO,CAACC,EAAD,EAAgB;AAAA;;AACzBJ,IAAAA,cAAc;AACdrB,IAAAA,gBAAgB,CAAC,UAAAK,EAAE;AAAA,6CACZA,EADY;AAEfb,QAAAA,aAAa,EAAEiC,EAAE,KAAK9C,QAFP;AAGfc,QAAAA,eAAe,EAAEgC,EAAE,KAAK7C;AAHT;AAAA,KAAH,CAAhB;AAMA,QAAI6C,EAAE,KAAK9C,QAAX,EAAqB,0BAAAoB,UAAU,CAACV,WAAX,kFAAwBmC,IAAxB,GAArB,KACK,0BAAAzB,UAAU,CAACT,kBAAX,kFAA+BkC,IAA/B;AACR,GAVD;;AAYA,MAAME,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBL,IAAAA,cAAc;AACdnB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAY,IAAAA,cAAc;AACjB,GAJD;;AAMA3C,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMwD,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwBjD,UAAxB,CAAlB;AACA,QAAI+C,SAAJ,EAAeA,SAAS,CAACG,SAAV,GAAsB,EAAtB;AAEf9B,IAAAA,gBAAgB,iCACTZ,iBADS;AAEZC,MAAAA,WAAW,EAAEuC,QAAQ,CAACC,cAAT,CAAwBlD,QAAxB,CAFD;AAGZW,MAAAA,kBAAkB,EAAEP,kBAAkB,CAClCH,UADkC,EAElCwC,QAAQ,CAACP,aAFyB,EAGlCQ,cAHkC;AAH1B,OAAhB;AASH,GAbQ,EAaN,CAACD,QAAQ,CAACP,aAAV,CAbM,CAAT,CA3D2C,CA0E3C;;AACA1C,EAAAA,SAAS,CAAC;AAAA,WAAMkD,cAAN;AAAA,GAAD,EAAuB,CAACtB,UAAU,CAACV,WAAZ,EAAyBU,UAAU,CAACT,kBAApC,CAAvB,CAAT;AAEA,sBACI,QAAC,aAAD;AAAe,IAAA,EAAE,EAAEM,KAAK,CAACmC,KAAzB;AAAgC,IAAA,OAAO,EAAE,GAAzC;AAA8C,IAAA,UAAU,EAAC,MAAzD;AAAgE,IAAA,aAAa,MAA7E;AAAA,2BACI,QAAC,SAAD;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA,gCACI,QAAC,cAAD;AACI,UAAA,QAAQ,EAAEZ,QADd;AAEI,UAAA,MAAM,EAAE,kBAAM;AACVrB,YAAAA,UAAU,CAACP,aAAX,GAA2B6B,cAAc,EAAzC,GAA8CG,IAAI,CAAC7C,QAAD,CAAlD;AACH;AAJL;AAAA;AAAA;AAAA;AAAA,iBADJ,eAQI;AAAA;AAAA;AAAA;AAAA,iBARJ,eAUI;AAAK,UAAA,KAAK,EAAE;AAAEqD,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAAA,kCACI,QAAC,GAAD;AACI,YAAA,GAAG,EAAEZ,QAAQ,CAACa,GADlB;AAEI,YAAA,aAAa,EAAEpC,aAFnB;AAGI,YAAA,OAAO,EAAE;AAAA,qBAAMC,mBAAmB,CAAC,CAACD,aAAF,CAAzB;AAAA;AAHb;AAAA;AAAA;AAAA;AAAA,mBADJ,eAMcA,aAAa,GAAG,QAAH,GAAc,QANzC;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVJ,eAmBI;AAAA;AAAA;AAAA;AAAA,iBAnBJ,eAqBI,QAAC,WAAD;AACI,UAAA,SAAS,EAAEE,UAAU,CAACL,SAD1B;AAEI,UAAA,cAAc,EAAEgC,MAFpB;AAGI,UAAA,OAAO,EAAE3B,UAAU,CAACN,eAHxB;AAII,UAAA,YAAY,EAAE;AAAA,mBAAM+B,IAAI,CAAC5C,UAAD,CAAV;AAAA,WAJlB;AAKI,UAAA,cAAc,EAAEyC,cALpB;AAMI,UAAA,iBAAiB,EAAED,QAAQ,CAACP,aAAT,KAA2B,EANlD;AAOI,UAAA,eAAe,EAAEZ;AAPrB;AAAA;AAAA;AAAA;AAAA,iBArBJ,eA+BI;AAAA;AAAA;AAAA;AAAA,iBA/BJ,EAiCKmB,QAAQ,CAACP,aAAT,KAA2B,EAA3B,IAAiCd,UAAU,CAACL,SAA5C,gBACG,QAAC,IAAD;AAAM,UAAA,EAAE,EAAEyB,UAAV;AAAsB,UAAA,OAAO,EAAEE,cAA/B;AAAA,iCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,iBADH,gBAKG,qCAtCR;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eA2CI;AAAO,QAAA,GAAG,EAAEpC,sBAAZ;AAAoC,QAAA,EAAE,EAAEJ;AAAxC;AAAA;AAAA;AAAA;AAAA,eA3CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAiDH,CA9HD;;GAAMc,Y;UAKwCT,qB;;;KALxCS,Y;AAgIN,eAAeA,YAAf;AAEA,IAAMuC,GAAG,GAAG5D,MAAM,CAAC2D,GAAV,+MAGI,UAAArC,KAAK;AAAA,SAAKA,KAAK,CAACC,aAAN,GAAsB,MAAtB,GAA+B,KAApC;AAAA,CAHT,CAAT;MAAMqC,G","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, Question, responseId, startAudioRecordingId, Station } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { CSSTransition } from \"react-transition-group\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    handleExit: (questions: Question[], tok: string) => void;\n    match: boolean;\n};\n\ntype AudioState = {\n    promptAudio: HTMLAudioElement | null;\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst initialAudioState: AudioState = {\n    promptAudio: null,\n    responseWaveSurfer: undefined,\n    promptPlaying: true,\n    responsePlaying: false,\n    recording: false,\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [imageExpanded, updateImageExpanded] = useState(false);\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState);\n    const [loadingRecorder, updateLoadingRecorder] = useState(false);\n\n    const { startRecording, stopRecording } = useReactMediaRecorder({\n        audio: true,\n        onStart: () => {\n            updateLoadingRecorder(false);\n            updateAudioState(as => ({ ...as, recording: true }));\n            playStartTone();\n        },\n        onStop: (blobUrl, _) => {\n            playStartTone();\n            updateLoadingRecorder(false);\n            props.updateStation(s => {\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return s;\n            });\n        },\n    });\n\n    const percentage = 10 + (100 * props.questionIdx) / props.station.questions.length;\n    const pathToNext =\n        props.questionIdx === props.station.questions.length - 1\n            ? \"/OSCE/Station/Summary\"\n            : \"/OSCE/Station/\" + (props.questionIdx + 1);\n    const question = props.station.questions[props.questionIdx];\n\n    const stopEverything = () => {\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId,\n        }));\n\n        if (id === promptId) audioState.promptAudio?.play();\n        else audioState.responseWaveSurfer?.play();\n    };\n\n    const record = () => {\n        stopEverything();\n        updateLoadingRecorder(true);\n        startRecording();\n    };\n\n    useEffect(() => {\n        const container = document.getElementById(responseId);\n        if (container) container.innerHTML = \"\";\n\n        updateAudioState({\n            ...initialAudioState,\n            promptAudio: document.getElementById(promptId) as HTMLAudioElement,\n            responseWaveSurfer: generateWaveSurfer(\n                responseId,\n                question.responseAudio,\n                stopEverything\n            ),\n        });\n    }, [question.responseAudio]);\n\n    // cease playback when compnent unmounts <=== six hour bug :)\n    useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]);\n\n    return (\n        <CSSTransition in={props.match} timeout={300} classNames=\"page\" unmountOnExit>\n            <Container>\n                <Box style={{ textAlign: \"center\" }}>\n                    <QuestionPrompt\n                        question={question}\n                        toggle={() => {\n                            audioState.promptPlaying ? stopEverything() : play(promptId);\n                        }}\n                    />\n\n                    <br></br>\n\n                    <div style={{ textAlign: \"center\" }}>\n                        <Img\n                            src={question.img}\n                            imageExpanded={imageExpanded}\n                            onClick={() => updateImageExpanded(!imageExpanded)}\n                        ></Img>\n                        Click to {imageExpanded ? \"shrink\" : \"expand\"}!\n                    </div>\n\n                    <br></br>\n\n                    <TaskSection\n                        recording={audioState.recording}\n                        recordResponse={record}\n                        playing={audioState.responsePlaying}\n                        playResponse={() => play(responseId)}\n                        stopEverything={stopEverything}\n                        responseAvailable={question.responseAudio !== \"\"}\n                        loadingRecorder={loadingRecorder}\n                    />\n\n                    <br></br>\n\n                    {question.responseAudio !== \"\" || audioState.recording ? (\n                        <Link to={pathToNext} onClick={stopEverything}>\n                            <MoveOn>Move On</MoveOn>\n                        </Link>\n                    ) : (\n                        <></>\n                    )}\n                </Box>\n\n                <audio src={recordingStartAudioUrl} id={startAudioRecordingId} />\n            </Container>\n        </CSSTransition>\n    );\n};\n\nexport default QuestionPage;\n\nconst Img = styled.img<{ imageExpanded: boolean }>`\n    display: block;\n    margin: auto;\n    width: ${props => (props.imageExpanded ? \"100%\" : \"60%\")};\n    transition: width 0.2s;\n    &:hover {\n        cursor: pointer;\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}