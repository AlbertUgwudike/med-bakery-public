{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/DevPage/DevPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Container } from \"../General/Container\";\nimport styled from 'styled-components';\nimport axios from \"axios\";\nimport BackButton from \"../General/BackButton\";\nimport { useContext, useState } from \"react\";\nimport { FaBreadSlice, FaCheck, FaCross } from \"react-icons/fa\";\nimport MetaContext from \"../../MetaContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DevPage = () => {\n  _s();\n\n  const {\n    token,\n    darkMode,\n    SERVER_URL\n  } = useContext(MetaContext);\n  const [downloadState, updateDownloadState] = useState({\n    uploadQuestionsAndPoints: \"complete\",\n    updatetextbook: \"complete\",\n    downloadUsers: \"complete\",\n    downloadProducts: \"complete\",\n    uploadProducts: \"complete\",\n    uploadUsers: \"complete\",\n    homepageQuestion: \"complete\"\n  });\n  console.log(downloadState);\n\n  const devFunc = stateKey => {\n    updateDownloadState({ ...downloadState,\n      [stateKey]: \"pending\"\n    });\n    axios.post(SERVER_URL + \"/dev/\" + stateKey, {\n      token\n    }).then(res => {\n      if (res.data.success) updateDownloadState({ ...downloadState,\n        [stateKey]: \"complete\"\n      });else {\n        updateDownloadState({ ...downloadState,\n          [stateKey]: \"failed\"\n        });\n        console.log(res.data.error);\n      }\n    });\n  };\n\n  const buttons = [{\n    stateKey: \"updatetextbook\",\n    title: \"UploadTextBook\"\n  }, {\n    stateKey: \"uploadQuestionsAndPoints\",\n    title: \"UploadQuestions\"\n  }, {\n    stateKey: \"downloadUsers\",\n    title: \"Download Users to Server\"\n  }, {\n    stateKey: \"downloadProducts\",\n    title: \"Download Products to Server\"\n  }, {\n    stateKey: \"uploadProducts\",\n    title: \"Upload Products from Server\"\n  }, {\n    stateKey: \"uploadUsers\",\n    title: \"Upload Users from Server\"\n  }, {\n    stateKey: \"homepageQuestion\",\n    title: \"Download Example Question\"\n  }];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(BackButton, {\n      darkMode: darkMode,\n      path: \"/User\",\n      label: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"100px 0px\"\n      },\n      children: buttons.map(({\n        stateKey,\n        title\n      }) => /*#__PURE__*/_jsxDEV(OptionButton, {\n        darkMode: darkMode,\n        selected: false,\n        onClick: () => devFunc(stateKey),\n        children: [title, downloadState[stateKey] === \"complete\" ? /*#__PURE__*/_jsxDEV(FaCheck, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 68\n        }, this) : downloadState[stateKey] === \"failed\" ? /*#__PURE__*/_jsxDEV(FaCross, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 122\n        }, this) : /*#__PURE__*/_jsxDEV(FaBreadSlice, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 136\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DevPage, \"X5+ADiZVTOozMvuIguWxjnqWeEQ=\");\n\n_c = DevPage;\nexport default DevPage;\nconst OptionButton = styled.button`\n    display: flex;\n    justify-content: space-between;\n    width: 60%;\n    min-width: 275px;\n    background-color: ${props => props.selected ? props.darkMode ? \"#1C725C\" : \"#41BFA0\" : props.darkMode ? \"#1B275E\" : \"#F6F5F0\"};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    margin: 10px auto 15px auto;\n    padding: 10px 20px;\n    font:  35px Proxima;\n    text-align: left;\n    border-radius: 10px;\n    border-style: none;\n    &:hover {\n        background-color: ${props => props.selected ? props.darkMode ? \"#1C725C\" : \"#41BFA0\" : props.darkMode ? \"#7735FD\" : \"#FBE9EE\"};\n    }\n`;\n_c2 = OptionButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DevPage\");\n$RefreshReg$(_c2, \"OptionButton\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/DevPage/DevPage.tsx"],"names":["Container","styled","axios","BackButton","useContext","useState","FaBreadSlice","FaCheck","FaCross","MetaContext","DevPage","token","darkMode","SERVER_URL","downloadState","updateDownloadState","uploadQuestionsAndPoints","updatetextbook","downloadUsers","downloadProducts","uploadProducts","uploadUsers","homepageQuestion","console","log","devFunc","stateKey","post","then","res","data","success","error","buttons","title","padding","map","OptionButton","button","props","selected"],"mappings":"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","sourcesContent":["import { Container } from \"../General/Container\";\nimport styled from 'styled-components';\nimport axios from \"axios\";\nimport BackButton from \"../General/BackButton\";\nimport { useContext, useState } from \"react\";\nimport { FaBaby, FaBreadSlice, FaCheck, FaCross } from \"react-icons/fa\";\nimport MetaContext from \"../../MetaContext\";\n\ntype StateKey = \"uploadQuestionsAndPoints\" | \"updatetextbook\" | \"downloadUsers\" | \"downloadProducts\" | \"uploadProducts\" | \"uploadUsers\" | \"homepageQuestion\";\ntype StateValue = \"complete\" | \"pending\" | \"failed\"\ntype StateType = { [Key in StateKey]: StateValue }\n\ntype ButtonInfo = { stateKey: StateKey, title: string }\n\n\nconst DevPage = () => {\n    const { token, darkMode, SERVER_URL } = useContext(MetaContext);\n    const [downloadState, updateDownloadState] = useState({\n        uploadQuestionsAndPoints: \"complete\",\n        updatetextbook: \"complete\",\n        downloadUsers: \"complete\",\n        downloadProducts: \"complete\",\n        uploadProducts: \"complete\",\n        uploadUsers: \"complete\",\n        homepageQuestion: \"complete\"\n    } as StateType)\n\n    console.log(downloadState)\n\n    const devFunc = (stateKey: StateKey) => {\n\n        updateDownloadState({ ...downloadState, [stateKey]: \"pending\" })\n\n        axios.post(SERVER_URL + \"/dev/\" + stateKey, { token })\n             .then(res => {\n                 if (res.data.success) updateDownloadState({ ...downloadState, [stateKey]: \"complete\" });\n                 else {\n                    updateDownloadState({ ...downloadState, [stateKey]: \"failed\" });\n                    console.log(res.data.error)\n                 }\n             })\n    }\n\n    const buttons: ButtonInfo[] = [\n        { stateKey: \"updatetextbook\", title: \"UploadTextBook\" },\n        { stateKey: \"uploadQuestionsAndPoints\", title: \"UploadQuestions\" },\n        { stateKey: \"downloadUsers\", title: \"Download Users to Server\" },\n        { stateKey: \"downloadProducts\", title: \"Download Products to Server\" },\n        { stateKey: \"uploadProducts\", title: \"Upload Products from Server\" },\n        { stateKey: \"uploadUsers\", title: \"Upload Users from Server\" },\n        { stateKey: \"homepageQuestion\", title: \"Download Example Question\" },\n    ]\n\n    return (\n        <Container>\n\n            <BackButton darkMode = { darkMode } path = \"/User\" label = \"Home\" />\n\n            <div style = {{ padding: \"100px 0px\" }} >\n            { \n                buttons.map(({ stateKey, title }) => \n                    <OptionButton darkMode = { darkMode } selected = { false } onClick = { () => devFunc(stateKey) }>\n                        { title }\n                        { downloadState[stateKey] === \"complete\" ? <FaCheck /> : (downloadState[stateKey] === \"failed\" ? <FaCross /> : <FaBreadSlice />) }\n                    </OptionButton>\n                ) \n            }\n            </div>\n\n        </Container>\n    )\n}\n\nexport default DevPage\n\nconst OptionButton = styled.button<{ darkMode: boolean, selected: boolean }>`\n    display: flex;\n    justify-content: space-between;\n    width: 60%;\n    min-width: 275px;\n    background-color: ${ props => props.selected ? (props.darkMode ? \"#1C725C\" : \"#41BFA0\") : ( props.darkMode ? \"#1B275E\" : \"#F6F5F0\" ) };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    margin: 10px auto 15px auto;\n    padding: 10px 20px;\n    font:  35px Proxima;\n    text-align: left;\n    border-radius: 10px;\n    border-style: none;\n    &:hover {\n        background-color: ${ props => props.selected ? (props.darkMode ? \"#1C725C\" : \"#41BFA0\") : (props.darkMode ? \"#7735FD\" : \"#FBE9EE\") };\n    }\n`"]},"metadata":{},"sourceType":"module"}