{"ast":null,"code":"export var randomVal = function randomVal(min, max) {\n  return Math.floor(min + Math.random() * (max - min));\n};\nexport var copy = function copy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}; // Wooooaaaah\n\nexport var reduceObj = function reduceObj(func, initial, obj) {\n  var entries = Object.entries(obj);\n  return entries.reduce(func, initial);\n};\nexport var qualifyHR = function qualifyHR(hr) {\n  if (hr < 60) return \"Bradycardic\";\n  if (hr > 100) return \"Tachycardic\";else return \"Normal\";\n};\nexport var qualifyAxis = function qualifyAxis(axis) {\n  if (axis < -30) return \"Left Axis Deviation\";\n  if (axis > 90) return \"Right Axis Deviation\";else return \"Normal\";\n};","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/old-components/ECGPage/Functions/utility.tsx"],"names":["randomVal","min","max","Math","floor","random","copy","obj","JSON","parse","stringify","reduceObj","func","initial","entries","Object","reduce","qualifyHR","hr","qualifyAxis","axis"],"mappings":"AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAcC,GAAd;AAAA,SAA+BC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAGE,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAjB,CAA/B;AAAA,CAAlB;AAEP,OAAO,IAAMK,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD;AAAA,SAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAd;AAAA,CAAb,C,CAEP;;AACA,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAyBC,IAAzB,EAAyDC,OAAzD,EAAqEN,GAArE,EAAwG;AAC7H,MAAMO,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeP,GAAf,CAAhB;AACA,SAAOO,OAAO,CAACE,MAAR,CAAeJ,IAAf,EAAqBC,OAArB,CAAP;AACH,CAHM;AAKP,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,EAAD,EAAgB;AACrC,MAAIA,EAAE,GAAG,EAAT,EAAa,OAAO,aAAP;AACb,MAAIA,EAAE,GAAG,GAAT,EAAc,OAAO,aAAP,CAAd,KACK,OAAO,QAAP;AACR,CAJM;AAMP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAkB;AACzC,MAAIA,IAAI,GAAG,CAAC,EAAZ,EAAgB,OAAO,qBAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,sBAAP,CAAf,KACK,OAAO,QAAP;AACR,CAJM","sourcesContent":["export const randomVal = (min: number, max: number) =>  Math.floor(min + Math.random() * (max - min));\n\nexport const copy = (obj: any) => JSON.parse(JSON.stringify(obj));\n\n// Wooooaaaah\nexport const reduceObj = <K extends string, V, R>(func: (acc: R, a: [K, V]) => R, initial: R, obj: {[Property in K]? : V}): R => {\n    const entries = Object.entries(obj) as [K, V][];\n    return entries.reduce(func, initial)\n}\n\nexport const qualifyHR = (hr: number) => {\n    if (hr < 60) return \"Bradycardic\";\n    if (hr > 100) return \"Tachycardic\";\n    else return \"Normal\";\n}\n\nexport const qualifyAxis = (axis: number) => {\n    if (axis < -30) return \"Left Axis Deviation\";\n    if (axis > 90) return \"Right Axis Deviation\";\n    else return \"Normal\";\n}"]},"metadata":{},"sourceType":"module"}