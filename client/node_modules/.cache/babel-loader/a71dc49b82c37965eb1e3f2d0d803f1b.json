{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useToken } from './functions';\nimport { useState } from \"react\";\nimport HomePage from './components/HomePage/HomePage';\nimport UserPage from './components/UserPage/UserPage';\nimport { createBrowserHistory } from \"history\";\nimport styled from 'styled-components';\nimport MetaContext from \"./MetaContext\";\nimport OSCEPage from \"./components/OSCEPage/OSCEPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const {\n    token,\n    setToken\n  } = useToken();\n  const [darkMode, setDarkMode] = useState(true); //initialise darkMode \n  // if we're on local host (development) then change url accordingly\n\n  let SERVER_URL = \"\";\n  if (window.location.href.startsWith(\"http://localhost:3000/\")) SERVER_URL = \"http://localhost:3001\";\n  if (window.location.href.startsWith(\"https://medbakery.co.uk\")) SERVER_URL = \"https://medbakery.co.uk\";\n  const history = createBrowserHistory();\n  let prevPath = null; // listen and notify Segment of client-side page updates\n\n  history.listen(location => {\n    if (location.pathname !== prevPath) {\n      prevPath = location.pathname;\n      window.analytics.page();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    darkMode: darkMode,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(MetaContext.Provider, {\n          value: {\n            darkMode,\n            SERVER_URL,\n            token\n          },\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: /*#__PURE__*/_jsxDEV(HomePage, {\n              setToken: setToken\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/User\",\n            children: /*#__PURE__*/_jsxDEV(UserPage, {\n              setToken: setToken,\n              setDarkMode: setDarkMode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/OSCE\",\n            children: /*#__PURE__*/_jsxDEV(OSCEPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"IZy2UUaAkFX5WTeCHZbUyJDSa7k=\", false, function () {\n  return [useToken];\n});\n\n_c = App;\nexport default App;\nconst Container = styled.div`\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    fill: ${props => props.darkMode ? \"#0072CE\" : \"#C02222\"};\n    font-family: Proxima;\n`;\n_c2 = Container;\nconst Background = styled.div`\n    background-color: ${props => props.darkMode ? \"#272727\" : \"#ffffff\"};\n    background-image: url(${props => props.darkMode ? props.backlogodark : props.backlogolight});\n    background-size: 9%;\n    background-attachment: fixed;\n    position: fixed;\n    filter: blur(0px);\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    fill: ${props => props.darkMode ? \"#0072CE\" : \"#C02222\"};\n    font-family: Proxima;\n    height: 100vh;\n    width: 100%;\n    z-index: -1;\n`;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/App.tsx"],"names":["BrowserRouter","Router","Route","Switch","useToken","useState","HomePage","UserPage","createBrowserHistory","styled","MetaContext","OSCEPage","App","token","setToken","darkMode","setDarkMode","SERVER_URL","window","location","href","startsWith","history","prevPath","listen","pathname","analytics","page","Container","div","props","Background","backlogodark","backlogolight"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { useToken } from './functions'; \nimport { useState } from \"react\";\nimport HomePage from './components/HomePage/HomePage';\nimport UserPage from './components/UserPage/UserPage';\nimport { createBrowserHistory } from \"history\";\nimport styled from 'styled-components';\nimport backlogodark from './images/backlogodark.svg';\nimport backlogolight from './images/backlogolight.svg';\nimport MetaContext from \"./MetaContext\";\nimport OSCEPage from \"./components/OSCEPage/OSCEPage\";\n\n\n\nconst App = () => {\n    const { token, setToken } = useToken();\n    const [darkMode, setDarkMode] = useState(true); //initialise darkMode \n\n    // if we're on local host (development) then change url accordingly\n    let SERVER_URL = \"\";\n    if (window.location.href.startsWith(\"http://localhost:3000/\")) SERVER_URL = \"http://localhost:3001\";\n    if (window.location.href.startsWith(\"https://medbakery.co.uk\")) SERVER_URL = \"https://medbakery.co.uk\";\n\n    const history = createBrowserHistory();\n\n    let prevPath: any = null;\n    \n    // listen and notify Segment of client-side page updates\n    history.listen((location) => {\n        if (location.pathname !== prevPath) {\n            prevPath = location.pathname;\n            window.analytics.page();\n        }\n    });\n\n    return (\n        <Container darkMode = { darkMode }>\n            {/* <Background darkMode = { darkMode } backlogodark = { backlogodark } backlogolight = { backlogolight }> </Background> */}\n            <Router>\n                <Switch>\n\n                    <MetaContext.Provider value = {{ darkMode, SERVER_URL, token }}>\n\n                        <Route exact path = \"/\">\n                            <HomePage \n                                setToken = { setToken }\n                            /> \n                        </Route>\n\n                        <Route path = \"/User\">\n                            <UserPage \n                                setToken = { setToken }\n                                setDarkMode = { setDarkMode }\n                            /> \n                        </Route>\n\n                        <Route path = \"/OSCE\">\n                            <OSCEPage />\n                        </Route>\n\n                    </MetaContext.Provider>\n\n                </Switch>\n            </Router>\n        </Container>\n    );\n}\n\nexport default App;\n\nconst Container = styled.div<{ darkMode: boolean }>`\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    fill: ${ props => props.darkMode ? \"#0072CE\" : \"#C02222\" };\n    font-family: Proxima;\n`\n\nconst Background = styled.div<{ darkMode: boolean, backlogodark: string, backlogolight: string }>`\n    background-color: ${ props => props.darkMode ? \"#272727\" : \"#ffffff\" };\n    background-image: url(${ props => props.darkMode ? props.backlogodark : props.backlogolight });\n    background-size: 9%;\n    background-attachment: fixed;\n    position: fixed;\n    filter: blur(0px);\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    fill: ${ props => props.darkMode ? \"#0072CE\" : \"#C02222\" };\n    font-family: Proxima;\n    height: 100vh;\n    width: 100%;\n    z-index: -1;\n`"]},"metadata":{},"sourceType":"module"}