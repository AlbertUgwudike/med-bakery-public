{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createBroker } from 'broker-factory';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\n\nexport * from './interfaces/index';\nexport * from './types/index';\nexport var wrap = createBroker({\n  characterize: function characterize(_ref) {\n    var call = _ref.call;\n    return function () {\n      return call('characterize');\n    };\n  },\n  encode: function encode(_ref2) {\n    var call = _ref2.call;\n    return function (recordingId, timeslice) {\n      return call('encode', {\n        recordingId: recordingId,\n        timeslice: timeslice\n      });\n    };\n  },\n  record: function record(_ref3) {\n    var call = _ref3.call;\n    return /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(recordingId, sampleRate, typedArrays) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return call('record', {\n                  recordingId: recordingId,\n                  sampleRate: sampleRate,\n                  typedArrays: typedArrays\n                }, typedArrays.map(function (_ref5) {\n                  var buffer = _ref5.buffer;\n                  return buffer;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n  }\n});\nexport var load = function load(url) {\n  var worker = new Worker(url);\n  return wrap(worker);\n};","map":{"version":3,"sources":["../../src/module.ts"],"names":[],"mappings":";;AAAA,SAAS,YAAT,QAA6B,gBAA7B;AAKA;;;AAGG;;AACH,cAAc,oBAAd;AACA,cAAc,eAAd;AAEA,OAAO,IAAM,IAAI,GAAoD,YAAY,CAG/E;AACE,EAAA,YAAY,EAAE,4BAAa;AAAA,QAAV,IAAU,QAAV,IAAU;AACvB,WAAO;AAAA,aAAM,IAAI,CAAC,cAAD,CAAV;AAAA,KAAP;AACH,GAHH;AAIE,EAAA,MAAM,EAAE,uBAAa;AAAA,QAAV,IAAU,SAAV,IAAU;AACjB,WAAO,UAAC,WAAD,EAAc,SAAd,EAA2B;AAC9B,aAAO,IAAI,CAAC,QAAD,EAAW;AAAE,QAAA,WAAW,EAAX,WAAF;AAAe,QAAA,SAAS,EAAT;AAAf,OAAX,CAAX;AACH,KAFD;AAGH,GARH;AASE,EAAA,MAAM,EAAE,uBAAa;AAAA,QAAV,IAAU,SAAV,IAAU;AACjB;AAAA,2EAAO,iBAAO,WAAP,EAAoB,UAApB,EAAgC,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACG,IAAI,CACN,QADM,EAEN;AAAE,kBAAA,WAAW,EAAX,WAAF;AAAe,kBAAA,UAAU,EAAV,UAAf;AAA2B,kBAAA,WAAW,EAAX;AAA3B,iBAFM,EAGN,WAAW,CAAC,GAAZ,CAAgB;AAAA,sBAAG,MAAH,SAAG,MAAH;AAAA,yBAAgB,MAAhB;AAAA,iBAAhB,CAHM,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAOH;AAjBH,CAH+E,CAA1E;AAuBP,OAAO,IAAM,IAAI,GAAmD,SAAvD,IAAuD,CAAC,GAAD,EAAgB;AAChF,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,GAAX,CAAf;AAEA,SAAO,IAAI,CAAC,MAAD,CAAX;AACH,CAJM","sourceRoot":"","sourcesContent":["import { createBroker } from 'broker-factory';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nexport const wrap = createBroker({\n    characterize: ({ call }) => {\n        return () => call('characterize');\n    },\n    encode: ({ call }) => {\n        return (recordingId, timeslice) => {\n            return call('encode', { recordingId, timeslice });\n        };\n    },\n    record: ({ call }) => {\n        return async (recordingId, sampleRate, typedArrays) => {\n            await call('record', { recordingId, sampleRate, typedArrays }, typedArrays.map(({ buffer }) => buffer));\n        };\n    }\n});\nexport const load = (url) => {\n    const worker = new Worker(url);\n    return wrap(worker);\n};\n//# sourceMappingURL=module.js.map"]},"metadata":{},"sourceType":"module"}