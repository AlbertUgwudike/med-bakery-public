{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/QuestionSelector.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _templateObject5;\n\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { questions } from \"./exampleQuestions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar QuestionSelector = function QuestionSelector(props) {\n  _s();\n\n  // these will be null in the actual implementatiuon\n  // initalised once questions are retrieved\n  var _useState = useState(questions[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedQuestion = _useState2[0],\n      updateSelectedQuestion = _useState2[1];\n\n  var _useState3 = useState(questions[0].finding),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedFinding = _useState4[0],\n      updateSelectedFinding = _useState4[1];\n\n  var _useState5 = useState(questions[0].category),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedCategory = _useState6[0],\n      updateSelectedCategory = _useState6[1]; // load these using use effect and initialise selection\n  // for now using local dummy questions for UI testing\n  // useEffect( sommin => quesitons! )\n\n\n  var categories = Array.apply(void 0, _toConsumableArray(new Set(questions.map(function (q) {\n    return q.category;\n  }))));\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"15%\"\n      },\n      children: categories.map(function (c) {\n        var findings = Array.apply(void 0, _toConsumableArray(new Set(questions.filter(function (q) {\n          return q.category === c;\n        }).map(function (q) {\n          return q.finding;\n        }))));\n        return /*#__PURE__*/_jsxDEV(CategoryPanel, {\n          selected: c === selectedCategory,\n          children: [/*#__PURE__*/_jsxDEV(CategoryTitle, {\n            children: c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, _this), findings.map(function (f) {\n            return /*#__PURE__*/_jsxDEV(FindingOption, {\n              selected: f === selectedFinding && c === selectedCategory,\n              onClick: function onClick() {\n                updateSelectedFinding(f);\n                updateSelectedCategory(c);\n              },\n              children: f\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 33\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        backgroundColor: \"#1c2124\",\n        width: \"80%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"25%\"\n        },\n        children: questions.filter(function (q) {\n          return q.category === selectedCategory && q.finding === selectedFinding;\n        }).map(function (q) {\n          return /*#__PURE__*/_jsxDEV(FindingOption, {\n            selected: q.category === selectedCategory && q.finding === selectedFinding,\n            children: q.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"75%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(QuestionSummary, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: \"25px\"\n            },\n            children: selectedQuestion.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionSelector, \"4zPaWjzowKk280sk4msKcaiYhIA=\");\n\n_c = QuestionSelector;\nexport default QuestionSelector;\nvar Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    background-color: #2f3237;\\n    margin: 5%;\\n    padding: 20px 10px;\\n    display: flex;\\n    justify-content: space-around;\\n\"])));\n_c2 = Container;\nvar FindingOption = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    background-color: #2f3237;\\n    margin: 5%;\\n    padding: 5%;\\n    display: flex;\\n    cursor: pointer;\\n\"])));\n_c3 = FindingOption;\nvar CategoryTitle = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n    font-size: 20px;\\n    margin: 5px;\\n\"])));\n_c4 = CategoryTitle;\nvar CategoryPanel = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n    text-align: center;\\n    margin-bottom: 10px;\\n    padding: 10px 5px;\\n    background-color: #1c2124;\\n\"])));\n_c5 = CategoryPanel;\nvar QuestionSummary = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n    text-align: center;\\n    background-color: #2f3237;\\n    margin: 10px;\\n\"])));\n_c6 = QuestionSummary;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"QuestionSelector\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"FindingOption\");\n$RefreshReg$(_c4, \"CategoryTitle\");\n$RefreshReg$(_c5, \"CategoryPanel\");\n$RefreshReg$(_c6, \"QuestionSummary\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/DataInterpPage/QuestionSelector.tsx"],"names":["useState","styled","questions","QuestionSelector","props","selectedQuestion","updateSelectedQuestion","finding","selectedFinding","updateSelectedFinding","category","selectedCategory","updateSelectedCategory","categories","Array","Set","map","q","width","c","findings","filter","f","display","backgroundColor","title","fontSize","Container","div","FindingOption","CategoryTitle","CategoryPanel","QuestionSummary"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { questions } from \"./exampleQuestions\";\n\ntype QuestionSelectorProps = {};\n\nconst QuestionSelector = (props: QuestionSelectorProps) => {\n    // these will be null in the actual implementatiuon\n    // initalised once questions are retrieved\n    const [selectedQuestion, updateSelectedQuestion] = useState(questions[0]);\n    const [selectedFinding, updateSelectedFinding] = useState(questions[0].finding);\n    const [selectedCategory, updateSelectedCategory] = useState(questions[0].category);\n\n    // load these using use effect and initialise selection\n    // for now using local dummy questions for UI testing\n    // useEffect( sommin => quesitons! )\n\n    const categories = Array(...new Set(questions.map(q => q.category)));\n\n    return (\n        <Container>\n            <div style={{ width: \"15%\" }}>\n                {categories.map(c => {\n                    const findings = Array(\n                        ...new Set(questions.filter(q => q.category === c).map(q => q.finding))\n                    );\n\n                    return (\n                        <CategoryPanel selected={c === selectedCategory}>\n                            <CategoryTitle>{c}</CategoryTitle>\n                            {findings.map(f => (\n                                <FindingOption\n                                    selected={f === selectedFinding && c === selectedCategory}\n                                    onClick={() => {\n                                        updateSelectedFinding(f);\n                                        updateSelectedCategory(c);\n                                    }}\n                                >\n                                    {f}\n                                </FindingOption>\n                            ))}\n                        </CategoryPanel>\n                    );\n                })}\n            </div>\n            <div style={{ display: \"flex\", backgroundColor: \"#1c2124\", width: \"80%\" }}>\n                <div style={{ width: \"25%\" }}>\n                    {questions\n                        .filter(\n                            q => q.category === selectedCategory && q.finding === selectedFinding\n                        )\n                        .map(q => (\n                            <FindingOption\n                                selected={\n                                    q.category === selectedCategory && q.finding === selectedFinding\n                                }\n                            >\n                                {q.title}\n                            </FindingOption>\n                        ))}\n                </div>\n                <div style={{ width: \"75%\" }}>\n                    <QuestionSummary>\n                        <div style={{ fontSize: \"25px\" }}>{selectedQuestion.title}</div>\n                    </QuestionSummary>\n                </div>\n            </div>\n        </Container>\n    );\n};\n\nexport default QuestionSelector;\n\nconst Container = styled.div`\n    background-color: #2f3237;\n    margin: 5%;\n    padding: 20px 10px;\n    display: flex;\n    justify-content: space-around;\n`;\n\nconst FindingOption = styled.div<{ selected: boolean }>`\n    background-color: #2f3237;\n    margin: 5%;\n    padding: 5%;\n    display: flex;\n    cursor: pointer;\n`;\n\nconst CategoryTitle = styled.div`\n    font-size: 20px;\n    margin: 5px;\n`;\n\nconst CategoryPanel = styled.div<{ selected: boolean }>`\n    text-align: center;\n    margin-bottom: 10px;\n    padding: 10px 5px;\n    background-color: #1c2124;\n`;\n\nconst QuestionSummary = styled.div`\n    text-align: center;\n    background-color: #2f3237;\n    margin: 10px;\n`;\n"]},"metadata":{},"sourceType":"module"}