{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport AlphaHeader from \"./AlphaHeader\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar StationPage = function StationPage(props) {\n  _s();\n\n  var location = useLocation();\n  if (props.station.id === \"NullStation\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/OSCE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 52\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AlphaHeader, {\n      station: props.station,\n      handleExit: props.handleExit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        location: location,\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/OSCE/Station\",\n          children: /*#__PURE__*/_jsxDEV(Brief, {\n            station: props.station,\n            updateStation: props.updateStation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, _this), props.station.questions.map(function (_, questionIdx) {\n          return /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/OSCE/Station/\" + questionIdx,\n            children: /*#__PURE__*/_jsxDEV(QuestionPage, {\n              station: props.station,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              handleExit: props.handleExit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, _this)\n          }, questionIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, _this);\n        }), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/OSCE/Station/Summary\",\n          children: /*#__PURE__*/_jsxDEV(Summary, {\n            station: props.station,\n            updateStation: props.updateStation,\n            handleExit: props.handleExit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, _this), props.station.questions.map(function (_, questionIdx) {\n          return /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/OSCE/Station/Review\" + questionIdx,\n            children: /*#__PURE__*/_jsxDEV(QuestionReviewPage, {\n              station: props.station,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              handleExit: props.handleExit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, _this)\n          }, props.station.questions[questionIdx].question, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, _this);\n        }), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/OSCE/Station/MarkReview\",\n          children: /*#__PURE__*/_jsxDEV(MarkReviewPage, {\n            station: props.station,\n            updateStation: props.updateStation,\n            reviewMode: props.reviewMode,\n            handleExit: props.handleExit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(StationPage, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = StationPage;\nexport default StationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StationPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx"],"names":["Redirect","Route","Switch","useLocation","TransitionGroup","AlphaHeader","Brief","MarkReviewPage","QuestionPage","QuestionReviewPage","Summary","StationPage","props","location","station","id","handleExit","updateStation","questions","map","_","questionIdx","question","reviewMode"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport AlphaHeader from \"./AlphaHeader\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { AnsweredStationDetails, Question, Station } from \"./types\";\n\ntype StationPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    answeredStations: AnsweredStationDetails[];\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst StationPage = (props: StationPageProps) => {\n    const location = useLocation();\n\n    if (props.station.id === \"NullStation\") return <Redirect to=\"/OSCE\" />;\n\n    return (\n        <>\n            <AlphaHeader station={props.station} handleExit={props.handleExit} />\n\n            <TransitionGroup>\n                <Switch location={location}>\n                    <Route exact path=\"/OSCE/Station\">\n                        <Brief station={props.station} updateStation={props.updateStation} />\n                    </Route>\n\n                    {props.station.questions.map((_, questionIdx) => (\n                        <Route exact path={\"/OSCE/Station/\" + questionIdx} key={questionIdx}>\n                            <QuestionPage\n                                station={props.station}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                handleExit={props.handleExit}\n                            />\n                        </Route>\n                    ))}\n\n                    <Route exact path=\"/OSCE/Station/Summary\">\n                        <Summary\n                            station={props.station}\n                            updateStation={props.updateStation}\n                            handleExit={props.handleExit}\n                        />\n                    </Route>\n\n                    {props.station.questions.map((_, questionIdx) => (\n                        <Route\n                            exact\n                            path={\"/OSCE/Station/Review\" + questionIdx}\n                            key={props.station.questions[questionIdx].question}\n                        >\n                            <QuestionReviewPage\n                                station={props.station}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                handleExit={props.handleExit}\n                            />\n                        </Route>\n                    ))}\n\n                    <Route exact path=\"/OSCE/Station/MarkReview\">\n                        <MarkReviewPage\n                            station={props.station}\n                            updateStation={props.updateStation}\n                            reviewMode={props.reviewMode}\n                            handleExit={props.handleExit}\n                        />\n                    </Route>\n                </Switch>\n            </TransitionGroup>\n        </>\n    );\n};\n\nexport default StationPage;\n"]},"metadata":{},"sourceType":"module"}