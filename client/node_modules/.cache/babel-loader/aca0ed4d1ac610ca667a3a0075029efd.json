{"ast":null,"code":"import { constants } from \"../Generator/ECGTypes\"; // extracts a list of points of interest (x, y coordinates on trace with associated\n// diagnostic information) \n\nconst getPointsOfInterest = leadDetails => {\n  return leadDetails.map(detailToPOIs).flat(2);\n}; // map individual leadDetail object (contianing list of ECG events) to a \n// 'list of lists' of POIs. There is a list of POIs for each event\n\n\nconst detailToPOIs = leadDetail => {\n  // maps each event (contianing information about  pathologcial waves) to POI[]\n  const eventToPOIs = event => {\n    return event.information.reduce((POIs, info) => {\n      const waveCenter = determinePosition(info.waveName, event.parameters);\n      const x = waveCenter * constants.scaleFactor;\n      const y = constants.isoelectrics[leadDetail.row] - 30;\n      const inbounds = waveCenter > leadDetail.startIdx && waveCenter < leadDetail.startIdx + leadDetail.sampleCount;\n      return inbounds ? POIs.concat([{\n        infoPos: {\n          x,\n          y\n        },\n        description: info.description\n      }]) : POIs;\n    }, []);\n  };\n\n  return leadDetail.events.map(eventToPOIs);\n}; // determine the x-position of a wave given the pqrst parameters\n\n\nconst determinePosition = (waveName, parameters) => {\n  let acc = 0;\n\n  for (const [name, {\n    radius\n  }] of Object.entries(parameters.waves)) {\n    acc += name === waveName ? radius : 2 * radius;\n    if (name === waveName) break;\n  }\n\n  return parameters.start + acc - 25;\n};\n\nexport default getPointsOfInterest;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/Functions/getPointsOfInterest.tsx"],"names":["constants","getPointsOfInterest","leadDetails","map","detailToPOIs","flat","leadDetail","eventToPOIs","event","information","reduce","POIs","info","waveCenter","determinePosition","waveName","parameters","x","scaleFactor","y","isoelectrics","row","inbounds","startIdx","sampleCount","concat","infoPos","description","events","acc","name","radius","Object","entries","waves","start"],"mappings":"AAAA,SAAoCA,SAApC,QAA2F,uBAA3F,C,CAEA;AACA;;AACA,MAAMC,mBAAmB,GAAIC,WAAD,IAAkD;AAC1E,SAAOA,WAAW,CAACC,GAAZ,CAAgBC,YAAhB,EAA8BC,IAA9B,CAAmC,CAAnC,CAAP;AACH,CAFD,C,CAIA;AACA;;;AACA,MAAMD,YAAY,GAAIE,UAAD,IAAiD;AAElE;AACA,QAAMC,WAAW,GAAIC,KAAD,IAAwC;AACxD,WAAOA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAE5C,YAAMC,UAAU,GAAGC,iBAAiB,CAACF,IAAI,CAACG,QAAN,EAAgBP,KAAK,CAACQ,UAAtB,CAApC;AACA,YAAMC,CAAC,GAAGJ,UAAU,GAAGb,SAAS,CAACkB,WAAjC;AACA,YAAMC,CAAC,GAAGnB,SAAS,CAACoB,YAAV,CAAuBd,UAAU,CAACe,GAAlC,IAAyC,EAAnD;AACA,YAAMC,QAAQ,GAAGT,UAAU,GAAGP,UAAU,CAACiB,QAAxB,IAAoCV,UAAU,GAAGP,UAAU,CAACiB,QAAX,GAAsBjB,UAAU,CAACkB,WAAnG;AACA,aAAOF,QAAQ,GAAGX,IAAI,CAACc,MAAL,CAAY,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAET,UAAAA,CAAF;AAAKE,UAAAA;AAAL,SAAX;AAAqBQ,QAAAA,WAAW,EAAEf,IAAI,CAACe;AAAvC,OAAD,CAAZ,CAAH,GAAyEhB,IAAxF;AAEH,KARM,EAQJ,EARI,CAAP;AASH,GAVD;;AAYA,SAAOL,UAAU,CAACsB,MAAX,CAAkBzB,GAAlB,CAAsBI,WAAtB,CAAP;AACH,CAhBD,C,CAkBA;;;AACA,MAAMO,iBAAiB,GAAG,CAACC,QAAD,EAAqBC,UAArB,KAAuF;AAC7G,MAAIa,GAAG,GAAG,CAAV;;AACA,OAAK,MAAM,CAACC,IAAD,EAAO;AAAEC,IAAAA;AAAF,GAAP,CAAX,IAAiCC,MAAM,CAACC,OAAP,CAAejB,UAAU,CAACkB,KAA1B,CAAjC,EAAmE;AAC/DL,IAAAA,GAAG,IAAIC,IAAI,KAAKf,QAAT,GAAoBgB,MAApB,GAA6B,IAAIA,MAAxC;AACA,QAAID,IAAI,KAAKf,QAAb,EAAuB;AAC1B;;AACD,SAAOC,UAAU,CAACmB,KAAX,GAAmBN,GAAnB,GAAyB,EAAhC;AACH,CAPD;;AAUA,eAAe5B,mBAAf","sourcesContent":["import { WaveName, PointOfInterest, constants, LeadDetail, EcgEvent, WaveParameters } from \"../Generator/ECGTypes\";\n\n// extracts a list of points of interest (x, y coordinates on trace with associated\n// diagnostic information) \nconst getPointsOfInterest = (leadDetails: LeadDetail[]): PointOfInterest[] => {\n    return leadDetails.map(detailToPOIs).flat(2)\n}\n\n// map individual leadDetail object (contianing list of ECG events) to a \n// 'list of lists' of POIs. There is a list of POIs for each event\nconst detailToPOIs = (leadDetail: LeadDetail): PointOfInterest[][] => {\n\n    // maps each event (contianing information about  pathologcial waves) to POI[]\n    const eventToPOIs = (event: EcgEvent): PointOfInterest[] => {\n        return event.information.reduce((POIs, info) => {\n\n            const waveCenter = determinePosition(info.waveName, event.parameters);\n            const x = waveCenter * constants.scaleFactor;\n            const y = constants.isoelectrics[leadDetail.row] - 30;\n            const inbounds = waveCenter > leadDetail.startIdx && waveCenter < leadDetail.startIdx + leadDetail.sampleCount;\n            return inbounds ? POIs.concat([{ infoPos: { x, y }, description: info.description }]) : POIs;\n\n        }, [] as PointOfInterest[]);\n    }\n\n    return leadDetail.events.map(eventToPOIs)\n}\n\n// determine the x-position of a wave given the pqrst parameters\nconst determinePosition = (waveName: WaveName, parameters: { start: number; waves: WaveParameters; }): number => {\n    let acc = 0\n    for (const [name, { radius }] of Object.entries(parameters.waves)) {\n        acc += name === waveName ? radius : 2 * radius;\n        if (name === waveName) break;\n    }\n    return parameters.start + acc - 25;\n}\n\n\nexport default getPointsOfInterest;"]},"metadata":{},"sourceType":"module"}