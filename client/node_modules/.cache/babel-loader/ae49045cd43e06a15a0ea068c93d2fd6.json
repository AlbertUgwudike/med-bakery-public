{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Timer } from \"./Common\";\nimport { useLoopTime, convertToString } from \"./hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TimerApparatus = function TimerApparatus(props) {\n  _s();\n\n  var secondTicker = useLoopTime(props.startTime - 1);\n  if (secondTicker <= 0) props.onZero();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Timer, {\n      children: [\" \", convertToString(secondTicker)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TimerApparatus, \"ckUBrSMwDYfswUaIEhAzW/SaIGU=\", false, function () {\n  return [useLoopTime];\n});\n\n_c = TimerApparatus;\nexport default TimerApparatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerApparatus\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx"],"names":["Timer","useLoopTime","convertToString","TimerApparatus","props","secondTicker","startTime","onZero","textAlign"],"mappings":";;;;AACA,SAASA,KAAT,QAAsB,UAAtB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,SAA7C;;;AAQA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgC;AAAA;;AACnD,MAAMC,YAAY,GAAGJ,WAAW,CAACG,KAAK,CAACE,SAAN,GAAkB,CAAnB,CAAhC;AAEA,MAAID,YAAY,IAAI,CAApB,EAAuBD,KAAK,CAACG,MAAN;AAEvB,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA,2BACI,QAAC,KAAD;AAAA,sBAASN,eAAe,CAACG,YAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CAVD;;GAAMF,c;UACmBF,W;;;KADnBE,c;AAYN,eAAeA,cAAf","sourcesContent":["import { Redirect } from \"react-router-dom\";\nimport { Timer } from \"./Common\";\nimport { useLoopTime, convertToString } from \"./hooks\";\nimport { Station } from \"./types\";\n\ntype TimerApparatusProps = {\n    startTime: number;\n    onZero: () => void;\n};\n\nconst TimerApparatus = (props: TimerApparatusProps) => {\n    const secondTicker = useLoopTime(props.startTime - 1);\n\n    if (secondTicker <= 0) props.onZero();\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            <Timer> {convertToString(secondTicker)}</Timer>\n        </div>\n    );\n};\n\nexport default TimerApparatus;\n"]},"metadata":{},"sourceType":"module"}