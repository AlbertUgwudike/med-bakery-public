{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Chat.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport ReactModal from 'react-modal';\nimport axios from 'axios';\nimport { getEmailFromToken } from '../../functions';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport styled from 'styled-components';\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatModal = props => {\n  _s();\n\n  const {\n    darkMode,\n    SERVER_URL,\n    token\n  } = useContext(MetaContext);\n  const [chat, updateChat] = useState([]);\n  const [email, updateEmail] = useState(\"\");\n  const [questionIdxToBeDeleted, updateIdxToBeDeleted] = useState(-1);\n  const [userMessage, updateUserMessage] = useState(\"\");\n  const [modalIsOpen, setIsOpen] = useState(false);\n  ReactModal.setAppElement('#root');\n  useEffect(() => {\n    getEmailFromToken(token).then(email => updateEmail(email));\n  }, [props.questionIdx]);\n  useEffect(() => {\n    if (props.questionIdx !== -1) {\n      axios.post(SERVER_URL + \"/questions/getchat\", {\n        token,\n        questionIdx: props.questionIdx\n      }).then(res => updateChat(res.data)).catch(console.log);\n    }\n  }, [props.questionIdx]);\n\n  const handleDeleteRequest = idx => {\n    setIsOpen(true);\n    updateIdxToBeDeleted(idx);\n  };\n\n  const deleteSelectedQuestion = () => {\n    if (questionIdxToBeDeleted === -1) return;\n    const newChat = chat.filter((v, i) => questionIdxToBeDeleted !== i);\n    updateChat(newChat);\n    submitChat(newChat);\n    updateIdxToBeDeleted(-1);\n    setIsOpen(false);\n  };\n\n  const submitChat = chat => {\n    axios.post(SERVER_URL + \"/questions/updatechat\", {\n      token,\n      questionIdx: props.questionIdx,\n      chat: chat\n    }).catch(console.log);\n    updateUserMessage(\"\");\n  };\n\n  const handleMessageEntry = e => {\n    updateUserMessage(e.target.value);\n  };\n\n  const handleSubmitMessage = () => {\n    const newChat = [{\n      email,\n      message: userMessage\n    }].concat(chat);\n    updateChat(newChat);\n    submitChat(newChat);\n    updateUserMessage(\"\");\n  };\n\n  const renderMessage = (message, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [email === message.email ? /*#__PURE__*/_jsxDEV(FaTrashAlt, {\n        color: \"red\",\n        style: {\n          marginRight: \"10px\"\n        },\n        onClick: () => handleDeleteRequest(idx)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: \"10px\",\n          color: \"#9EA2B1\"\n        },\n        children: [email === message.email ? \"you\" : \"anon\", \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: darkMode ? \"white\" : \"black\"\n        },\n        children: message.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    darkMode: darkMode,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          font: \"30px Champion\",\n          marginRight: \"20px\",\n          display: \"inline-block\"\n        },\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewMessageInput, {\n        darkMode: darkMode,\n        value: userMessage,\n        onChange: handleMessageEntry,\n        placeholder: \"What's on your mind...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NewMessageSubmit, {\n        darkMode: darkMode,\n        onClick: handleSubmitMessage,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmModal, {\n      isOpen: modalIsOpen,\n      onRequestClose: () => setIsOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"white\"\n          },\n          children: \" Delete these messages? \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: deleteSelectedQuestion,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setIsOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n      darkMode: darkMode,\n      children: chat.map(renderMessage)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatModal, \"B/V4Pfwgp6MQxjxZp23RBKzRAuY=\");\n\n_c = ChatModal;\nexport default ChatModal;\nconst NewMessageInput = styled.textarea`\n    display: inline-block;\n    margin-right: 10px;\n    padding-left: 10px;\n    vertical-align: bottom;\n    width: 70%;\n    height: 25px;\n    border: none;\n    border-bottom: 1px solid grey;\n    outline: none;\n    background-color: transparent;\n    color: ${props => props.darkMode ? \"white\" : \"black\"}\n`;\n_c2 = NewMessageInput;\nconst NewMessageSubmit = styled.button`\n    border-radius: 5px;\n    border-style: none;\n    background-color: #505050;\n    margin-left: 25px;\n    width: 100px;\n    height: 30px;\n    color: white;\n`;\n_c3 = NewMessageSubmit;\nconst Button = styled.button`\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    border-style: none;\n    background-color: #3B2072;\n    width: 100px;\n    color: white;\n    margin: 10px;\n`;\n_c4 = Button;\nconst ConfirmModal = styled(ReactModal)`\n    background-color: rgb(27, 39, 94);\n    margin: 100px auto;\n    max-width: 500px;\n    height: max-content;\n    border-radius: 30px;\n    padding: 20px;\n    z-index: 1200;\n`;\n_c5 = ConfirmModal;\nconst ChatBox = styled.div`\n    width: 100%;\n    height: 200px;\n    padding: 20px;\n    border: 1px solid #80808033;\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n    overflow: scroll;\n`;\n_c6 = ChatBox;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ChatModal\");\n$RefreshReg$(_c2, \"NewMessageInput\");\n$RefreshReg$(_c3, \"NewMessageSubmit\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"ConfirmModal\");\n$RefreshReg$(_c6, \"ChatBox\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/Chat.tsx"],"names":["useState","useEffect","useContext","ReactModal","axios","getEmailFromToken","FaTrashAlt","styled","Panel","MetaContext","ChatModal","props","darkMode","SERVER_URL","token","chat","updateChat","email","updateEmail","questionIdxToBeDeleted","updateIdxToBeDeleted","userMessage","updateUserMessage","modalIsOpen","setIsOpen","setAppElement","then","questionIdx","post","res","data","catch","console","log","handleDeleteRequest","idx","deleteSelectedQuestion","newChat","filter","v","i","submitChat","handleMessageEntry","e","target","value","handleSubmitMessage","message","concat","renderMessage","marginRight","color","display","alignItems","marginBottom","font","textAlign","map","NewMessageInput","textarea","NewMessageSubmit","button","Button","ConfirmModal","ChatBox","div"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport ReactModal from 'react-modal';\nimport axios from 'axios';\nimport { getEmailFromToken } from '../../functions';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport styled from 'styled-components';\nimport { Panel } from '../General/Panel';\nimport MetaContext from '../../MetaContext';\n\nconst ChatModal = (props: { questionIdx: number }) => {\n\n    const { darkMode, SERVER_URL, token } = useContext(MetaContext);\n    const [chat, updateChat] = useState([] as { email: string, message: string }[]);\n    const [email, updateEmail] = useState(\"\");\n    const [questionIdxToBeDeleted, updateIdxToBeDeleted] = useState(-1);\n    const [userMessage, updateUserMessage] = useState(\"\");\n    const [modalIsOpen, setIsOpen] = useState(false);\n\n    ReactModal.setAppElement('#root');\n\n    useEffect(() => {\n        getEmailFromToken(token).then(email => updateEmail(email!))\n    }, [props.questionIdx]);\n\n    useEffect( () => {\n\n        if (props.questionIdx !== -1) {\n            axios.post(SERVER_URL + \"/questions/getchat\", { token, questionIdx: props.questionIdx })\n                .then(res => updateChat(res.data))\n                .catch(console.log)\n        }\n\n    }, [props.questionIdx] )\n\n    const handleDeleteRequest = (idx: number) => {\n        setIsOpen(true);\n        updateIdxToBeDeleted(idx);\n    }\n\n    const deleteSelectedQuestion = () => {\n        if (questionIdxToBeDeleted === -1) return;\n        const newChat = chat.filter((v, i) => questionIdxToBeDeleted !== i);\n        updateChat(newChat);\n        submitChat(newChat);\n        updateIdxToBeDeleted(-1);\n        setIsOpen(false);\n    }\n\n    const submitChat = (chat: { email: string, message: string }[]) => {\n        axios.post(SERVER_URL + \"/questions/updatechat\", { token, questionIdx: props.questionIdx, chat: chat })\n             .catch(console.log)\n\n        updateUserMessage(\"\");\n        \n    }\n\n    const handleMessageEntry: React.ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n        updateUserMessage(e.target.value)\n    }\n\n    const handleSubmitMessage = () => {\n        const newChat = [{ email, message: userMessage }].concat(chat)\n        updateChat(newChat);\n        submitChat(newChat);\n        updateUserMessage(\"\");\n    }\n    \n    const renderMessage = (message: {email: string, message: string}, idx: number) => {\n        return (\n            <div>\n                \n                {\n                    email === message.email\n                        ?   <FaTrashAlt color=\"red\" style = {{ marginRight: \"10px\" }} onClick = { () => handleDeleteRequest(idx) }/>\n                        :   <></>\n                }\n\n                <span style = {{ marginRight: \"10px\", color: \"#9EA2B1\" }}>{ email === message.email ? \"you\" : \"anon\" }:</span>\n                <span style = {{ color: darkMode ? \"white\" : \"black\" }}>{ message.message }</span>\n\n            </div>\n        )\n    }\n\n    return (\n        <Panel darkMode = { darkMode }>\n\n            <div style = {{ display: \"flex\", alignItems: \"center\", marginBottom: \"20px\" }}>\n\n                <div style = {{ font: \"30px Champion\", marginRight: \"20px\", display: \"inline-block\" }}>Chat</div>\n\n                <NewMessageInput \n                    darkMode = { darkMode }\n                    value = { userMessage } \n                    onChange = { handleMessageEntry } \n                    placeholder = \"What's on your mind...\"\n                />\n\n                <NewMessageSubmit darkMode = { darkMode } onClick = { handleSubmitMessage }>Submit</NewMessageSubmit>\n\n            </div>\n\n            <ConfirmModal isOpen = {modalIsOpen} onRequestClose = { () => setIsOpen(false) } >\n                <div style = {{ textAlign: \"center\" }}>\n\n                    <div style = {{ color: \"white\" }}> Delete these messages? </div>\n\n                    <Button onClick = { deleteSelectedQuestion }>Delete</Button>\n\n                    <Button onClick = { () => setIsOpen(false) }>Cancel</Button>\n\n                </div>\n            </ConfirmModal>\n\n            <ChatBox darkMode = { darkMode }>\n                { chat.map(renderMessage) }\n            </ChatBox>\n\n        </Panel>\n    );\n}\n\nexport default ChatModal;\n\nconst NewMessageInput = styled.textarea<{ darkMode: boolean }>`\n    display: inline-block;\n    margin-right: 10px;\n    padding-left: 10px;\n    vertical-align: bottom;\n    width: 70%;\n    height: 25px;\n    border: none;\n    border-bottom: 1px solid grey;\n    outline: none;\n    background-color: transparent;\n    color: ${ props => props.darkMode ? \"white\" : \"black\"}\n`\n\nconst NewMessageSubmit = styled.button<{ darkMode: boolean }>`\n    border-radius: 5px;\n    border-style: none;\n    background-color: #505050;\n    margin-left: 25px;\n    width: 100px;\n    height: 30px;\n    color: white;\n`\n\nconst Button = styled.button`\n    border-top-left-radius: 5px;\n    border-top-right-radius: 5px;\n    border-style: none;\n    background-color: #3B2072;\n    width: 100px;\n    color: white;\n    margin: 10px;\n`\n\nconst ConfirmModal = styled(ReactModal)`\n    background-color: rgb(27, 39, 94);\n    margin: 100px auto;\n    max-width: 500px;\n    height: max-content;\n    border-radius: 30px;\n    padding: 20px;\n    z-index: 1200;\n`\n\nconst ChatBox = styled.div<{ darkMode: boolean }>`\n    width: 100%;\n    height: 200px;\n    padding: 20px;\n    border: 1px solid #80808033;\n    border-radius: 5px;\n    background-color: transparent;\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n    overflow: scroll;\n`"]},"metadata":{},"sourceType":"module"}