{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, responseId, startAudioRecordingId } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport Header from \"./Header\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport MetaContext from \"../../MetaContext\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: false,\n  responsePlaying: false,\n  recording: false\n};\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageExpanded = _useState2[0],\n      updateImageExpanded = _useState2[1];\n\n  var _useState3 = useState(initialAudioState),\n      _useState4 = _slicedToArray(_useState3, 2),\n      audioState = _useState4[0],\n      updateAudioState = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingRecorder = _useState6[0],\n      updateLoadingRecorder = _useState6[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStart: playStartTone,\n    onStop: function onStop() {\n      playStartTone();\n      updateLoadingRecorder(false);\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording,\n      mediaBlobUrl = _useReactMediaRecorde.mediaBlobUrl;\n\n  useEffect(function () {\n    props.updateStation(function (s) {\n      s.questions[props.questionIdx].responseAudio = mediaBlobUrl ? mediaBlobUrl : \"\";\n      return s;\n    });\n  }, [mediaBlobUrl]);\n  var percentage = 10 + 100 * props.questionIdx / props.station.questions.length;\n  var pathToNext = props.questionIdx === props.station.questions.length - 1 ? \"/OSCE/Station/Summary\" : \"/OSCE/Station/\" + (props.questionIdx + 1);\n  var question = props.station.questions[props.questionIdx];\n\n  var _useContext = useContext(MetaContext),\n      SERVER_URL = _useContext.SERVER_URL;\n\n  var stopEverything = function stopEverything() {\n    var _audioState$promptAud, _audioState$responseW;\n\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  };\n\n  var play = function play(id) {\n    var _audioState$promptAud2, _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: id === promptId,\n        responsePlaying: id === responseId\n      });\n    });\n    if (id === promptId) (_audioState$promptAud2 = audioState.promptAudio) === null || _audioState$promptAud2 === void 0 ? void 0 : _audioState$promptAud2.play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  var record = function record() {\n    stopEverything(); // updateLoadingRecorder(true);\n\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        recording: true\n      });\n    });\n    startRecording();\n  };\n\n  useEffect(function () {\n    var container = document.getElementById(responseId);\n    if (container) container.innerHTML = \"\";\n    updateAudioState(_objectSpread(_objectSpread({}, initialAudioState), {}, {\n      promptAudio: document.getElementById(promptId),\n      responseWaveSurfer: generateWaveSurfer(responseId, question.responseAudio, stopEverything)\n    }));\n  }, [question.responseAudio]); // cease playback when compnent unmounts <=== six hour bug :)\n\n  useEffect(function () {\n    return stopEverything;\n  }, [audioState.promptAudio, audioState.responseWaveSurfer]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      station: props.station,\n      questionIdx: props.questionIdx,\n      updateStation: props.updateStation,\n      timedHeader: true,\n      percentage: percentage,\n      briefPrompt: props.station.brief.prompt,\n      title: \"Station One\",\n      handleExit: props.handleExit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n        question: question,\n        toggle: function toggle() {\n          audioState.promptPlaying ? stopEverything() : play(promptId);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: question.img,\n          imageExpanded: imageExpanded,\n          onClick: function onClick() {\n            return updateImageExpanded(!imageExpanded);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, _this), \"Click to \", imageExpanded ? \"shrink\" : \"expand\", \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(TaskSection, {\n        recording: audioState.recording,\n        recordResponse: record,\n        playing: audioState.responsePlaying,\n        playResponse: function playResponse() {\n          return play(responseId);\n        },\n        stopEverything: stopEverything,\n        responseAvailable: question.responseAudio !== \"\",\n        loadingRecorder: loadingRecorder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, _this), question.responseAudio !== \"\" || audioState.recording ? /*#__PURE__*/_jsxDEV(Link, {\n        to: pathToNext,\n        onClick: stopEverything,\n        children: /*#__PURE__*/_jsxDEV(MoveOn, {\n          children: \"Move On\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: recordingStartAudioUrl,\n      id: startAudioRecordingId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"O9Q7/5g02hzmJyiuop4X6rTP+yU=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    width: \", \";\\n    transition: width 0.2s;\\n    &:hover {\\n        cursor: pointer;\\n    }\\n\"])), function (props) {\n  return props.imageExpanded ? \"100%\" : \"60%\";\n});\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPage\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx"],"names":["useContext","useEffect","useState","Link","styled","Box","MoveOn","Container","TaskSection","promptId","responseId","startAudioRecordingId","QuestionPrompt","generateWaveSurfer","playStartTone","Header","recordingStartAudioUrl","MetaContext","useReactMediaRecorder","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionPage","props","imageExpanded","updateImageExpanded","audioState","updateAudioState","loadingRecorder","updateLoadingRecorder","audio","onStart","onStop","startRecording","stopRecording","mediaBlobUrl","updateStation","s","questions","questionIdx","responseAudio","percentage","station","length","pathToNext","question","SERVER_URL","stopEverything","pause","stop","as","play","id","record","container","document","getElementById","innerHTML","brief","prompt","handleExit","textAlign","img","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { StartButton, Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport {\n    exemplarId,\n    promptId,\n    Question,\n    responseId,\n    startAudioRecordingId,\n    Station,\n} from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone, useRecorder } from \"./hooks\";\nimport Header from \"./Header\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport MetaContext from \"../../MetaContext\";\nimport { produceHeat } from \"../../functions\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\ntype AudioState = {\n    promptAudio: HTMLAudioElement | null;\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst initialAudioState: AudioState = {\n    promptAudio: null,\n    responseWaveSurfer: undefined,\n    promptPlaying: false,\n    responsePlaying: false,\n    recording: false,\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [imageExpanded, updateImageExpanded] = useState(false);\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState);\n    const [loadingRecorder, updateLoadingRecorder] = useState(false);\n\n    const { startRecording, stopRecording, mediaBlobUrl } = useReactMediaRecorder({\n        audio: true,\n        onStart: playStartTone,\n        onStop: () => {\n            playStartTone();\n            updateLoadingRecorder(false);\n        },\n    });\n\n    useEffect(() => {\n        props.updateStation(s => {\n            s.questions[props.questionIdx].responseAudio = mediaBlobUrl ? mediaBlobUrl : \"\";\n            return s;\n        });\n    }, [mediaBlobUrl]);\n\n    const percentage = 10 + (100 * props.questionIdx) / props.station.questions.length;\n    const pathToNext =\n        props.questionIdx === props.station.questions.length - 1\n            ? \"/OSCE/Station/Summary\"\n            : \"/OSCE/Station/\" + (props.questionIdx + 1);\n    const question = props.station.questions[props.questionIdx];\n    const { SERVER_URL } = useContext(MetaContext);\n\n    const stopEverything = () => {\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId,\n        }));\n\n        if (id === promptId) audioState.promptAudio?.play();\n        else audioState.responseWaveSurfer?.play();\n    };\n\n    const record = () => {\n        stopEverything();\n        // updateLoadingRecorder(true);\n        updateAudioState(as => ({ ...as, recording: true }));\n        startRecording();\n    };\n\n    useEffect(() => {\n        const container = document.getElementById(responseId);\n        if (container) container.innerHTML = \"\";\n\n        updateAudioState({\n            ...initialAudioState,\n            promptAudio: document.getElementById(promptId) as HTMLAudioElement,\n            responseWaveSurfer: generateWaveSurfer(\n                responseId,\n                question.responseAudio,\n                stopEverything\n            ),\n        });\n    }, [question.responseAudio]);\n\n    // cease playback when compnent unmounts <=== six hour bug :)\n    useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]);\n\n    return (\n        <Container>\n            <Header\n                station={props.station}\n                questionIdx={props.questionIdx}\n                updateStation={props.updateStation}\n                timedHeader={true}\n                percentage={percentage}\n                briefPrompt={props.station.brief.prompt}\n                title={\"Station One\"}\n                handleExit={props.handleExit}\n            />\n\n            <br />\n\n            <Box style={{ textAlign: \"center\" }}>\n                <QuestionPrompt\n                    question={question}\n                    toggle={() => {\n                        audioState.promptPlaying ? stopEverything() : play(promptId);\n                    }}\n                />\n\n                <br></br>\n\n                <div style={{ textAlign: \"center\" }}>\n                    <Img\n                        src={question.img}\n                        imageExpanded={imageExpanded}\n                        onClick={() => updateImageExpanded(!imageExpanded)}\n                    ></Img>\n                    Click to {imageExpanded ? \"shrink\" : \"expand\"}!\n                </div>\n\n                <br></br>\n\n                <TaskSection\n                    recording={audioState.recording}\n                    recordResponse={record}\n                    playing={audioState.responsePlaying}\n                    playResponse={() => play(responseId)}\n                    stopEverything={stopEverything}\n                    responseAvailable={question.responseAudio !== \"\"}\n                    loadingRecorder={loadingRecorder}\n                />\n\n                <br></br>\n\n                {question.responseAudio !== \"\" || audioState.recording ? (\n                    <Link to={pathToNext} onClick={stopEverything}>\n                        <MoveOn>Move On</MoveOn>\n                    </Link>\n                ) : (\n                    <></>\n                )}\n            </Box>\n\n            <audio src={recordingStartAudioUrl} id={startAudioRecordingId} />\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n\nconst Img = styled.img<{ imageExpanded: boolean }>`\n    display: block;\n    margin: auto;\n    width: ${props => (props.imageExpanded ? \"100%\" : \"60%\")};\n    transition: width 0.2s;\n    &:hover {\n        cursor: pointer;\n    }\n`;\n"]},"metadata":{},"sourceType":"module"}