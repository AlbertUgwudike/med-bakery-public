{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, responseId, startAudioRecordingId } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone, useRecorder } from \"./hooks\";\nimport Header from \"./Header\";\nimport recordingStartAudioUrl from \"./media/start.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: false,\n  responsePlaying: false,\n  recording: false\n};\n\nconst QuestionPage = props => {\n  _s();\n\n  const [imageExpanded, updateImageExpanded] = useState(false);\n  const [audioState, updateAudioState] = useState(initialAudioState);\n  const [startRecorder, stopRecorder] = useRecorder(audio => {\n    props.updateStation(s => {\n      s.questions[props.questionIdx].responseUrl = audio;\n      return s;\n    });\n  });\n  const percentage = 10 + 100 * props.questionIdx / props.station.questions.length;\n  const pathToNext = props.questionIdx === props.station.questions.length - 1 ? \"/OSCE/Station/Summary\" : \"/OSCE/Station/\" + (props.questionIdx + 1);\n  const question = props.station.questions[props.questionIdx];\n\n  const stopEverything = () => {\n    var _audioState$promptAud, _audioState$responseW;\n\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecorder();\n    updateAudioState(as => ({ ...as,\n      promptPlaying: false,\n      responsePlaying: false,\n      recording: false\n    }));\n  };\n\n  const play = id => {\n    var _audioState$promptAud2, _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(as => ({ ...as,\n      promptPlaying: id === promptId,\n      responsePlaying: id === responseId\n    }));\n    if (id === promptId) (_audioState$promptAud2 = audioState.promptAudio) === null || _audioState$promptAud2 === void 0 ? void 0 : _audioState$promptAud2.play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  const record = () => {\n    stopEverything();\n    playStartTone();\n    updateAudioState(as => ({ ...as,\n      recording: true\n    }));\n    startRecorder();\n  };\n\n  useEffect(() => {\n    const container = document.getElementById(responseId);\n    if (container) container.innerHTML = \"\";\n    updateAudioState({ ...initialAudioState,\n      promptAudio: document.getElementById(promptId),\n      responseWaveSurfer: generateWaveSurfer(responseId, question.responseUrl, stopEverything)\n    });\n  }, [question.responseUrl]); // cease playback when compnent unmounts <=== six hour bug :)\n\n  useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      station: props.station,\n      questionIdx: props.questionIdx,\n      updateStation: props.updateStation,\n      timedHeader: true,\n      percentage: percentage,\n      briefPrompt: props.station.brief.prompt,\n      title: \"Station One\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n        question: question,\n        toggle: () => {\n          audioState.promptPlaying ? stopEverything() : play(promptId);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Img, {\n          src: question.imgsrc,\n          imageExpanded: imageExpanded,\n          onClick: () => updateImageExpanded(!imageExpanded)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), \"Click to \", imageExpanded ? \"shrink\" : \"expand\", \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskSection, {\n        recording: audioState.recording,\n        recordResponse: record,\n        playing: audioState.responsePlaying,\n        playResponse: () => play(responseId),\n        stopEverything: stopEverything,\n        responseAvailable: question.responseUrl !== \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), question.responseUrl !== \"\" ? /*#__PURE__*/_jsxDEV(Link, {\n        to: pathToNext,\n        children: /*#__PURE__*/_jsxDEV(MoveOn, {\n          children: \"Move On\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: recordingStartAudioUrl,\n      id: startAudioRecordingId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuestionPage, \"twcqZwjLjXZlOVeMCqFwAAUWZjQ=\", false, function () {\n  return [useRecorder];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\nconst Img = styled.img`\n    display: block;\n    margin: auto;\n    width: ${props => props.imageExpanded ? \"100%\" : \"60%\"};\n    transition: width 0.2s;\n    &:hover {\n        cursor: pointer;\n    }\n`;\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionPage\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionPage.tsx"],"names":["useEffect","useState","Link","styled","Box","MoveOn","Container","TaskSection","promptId","responseId","startAudioRecordingId","QuestionPrompt","generateWaveSurfer","playStartTone","useRecorder","Header","recordingStartAudioUrl","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionPage","props","imageExpanded","updateImageExpanded","audioState","updateAudioState","startRecorder","stopRecorder","audio","updateStation","s","questions","questionIdx","responseUrl","percentage","station","length","pathToNext","question","stopEverything","pause","stop","as","play","id","record","container","document","getElementById","innerHTML","brief","prompt","textAlign","imgsrc","Img","img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport {  StartButton, Box, MoveOn, Container } from \"./Common\";\nimport TaskSection from \"./TaskSection\";\nimport { exemplarId, promptId, responseId, startAudioRecordingId, Station_new } from \"./types\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport { generateWaveSurfer, playStartTone, useRecorder } from \"./hooks\";\nimport Header from \"./Header\";\nimport recordingStartAudioUrl from \"./media/start.mp3\"\n\ntype QuestionProps = {\n    station: Station_new;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station_new>>\n}\n\ntype AudioState = {\n    promptAudio: HTMLAudioElement | null,\n    responseWaveSurfer: WaveSurfer | undefined,\n    promptPlaying: boolean,\n    responsePlaying: boolean,\n    recording: boolean\n}\n\nconst initialAudioState: AudioState = {\n    promptAudio: null, responseWaveSurfer: undefined,\n    promptPlaying: false, responsePlaying: false, \n    recording: false\n}\n\nconst QuestionPage = (props: QuestionProps) => {\n\n    const [imageExpanded, updateImageExpanded] = useState(false);\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState)\n    const [startRecorder, stopRecorder] = useRecorder(audio => {\n        props.updateStation(s => {\n            s.questions[props.questionIdx].responseUrl = audio;\n            return s;\n        });\n    });\n\n    const percentage = 10 + 100 * props.questionIdx / props.station.questions.length;\n    const pathToNext = props.questionIdx === props.station.questions.length - 1 ? \"/OSCE/Station/Summary\" : \"/OSCE/Station/\" + (props.questionIdx + 1);\n    const question = props.station.questions[props.questionIdx];\n\n    const stopEverything = () => {\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecorder();\n        updateAudioState(as => ({ ...as, promptPlaying: false, responsePlaying: false, recording: false  }))\n    }\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId\n        }))\n\n        if (id === promptId) audioState.promptAudio?.play()\n        else audioState.responseWaveSurfer?.play()\n    }\n\n    const record = () => {\n        stopEverything();\n        playStartTone();\n        updateAudioState(as => ({ ...as, recording: true }))\n        startRecorder();\n    }\n\n    useEffect(() => {\n\n        const container = document.getElementById(responseId);\n        if (container) container.innerHTML = \"\";\n\n        updateAudioState({\n            ...initialAudioState,\n            promptAudio: document.getElementById(promptId) as HTMLAudioElement,\n            responseWaveSurfer: generateWaveSurfer(responseId, question.responseUrl, stopEverything),\n        })\n\n    }, [question.responseUrl])\n\n    // cease playback when compnent unmounts <=== six hour bug :)\n    useEffect(() => stopEverything, [audioState.promptAudio, audioState.responseWaveSurfer]) \n    \n    return (\n        <Container>\n\n            <Header\n                station = { props.station } \n                questionIdx = { props.questionIdx } \n                updateStation = { props.updateStation }\n                timedHeader = { true }\n                percentage = { percentage }\n                briefPrompt = { props.station.brief.prompt }\n                title = { \"Station One\" }\n            />\n\n            <br/>\n\n            <Box style = {{ textAlign: \"center\" }}>\n\n                <QuestionPrompt \n                    question = { question }  \n                    toggle = { () => { audioState.promptPlaying ? stopEverything() : play(promptId) } } \n                />\n                \n                <br></br>\n\n                <div  style = {{ textAlign: \"center\" }}>\n                    <Img src = { question.imgsrc } imageExpanded = { imageExpanded } onClick = { () => updateImageExpanded(!imageExpanded) } ></Img>\n                    Click to { imageExpanded ? \"shrink\" : \"expand\" }!\n                </div>\n\n                <br></br>\n\n                <TaskSection \n                    recording = { audioState.recording }\n                    recordResponse = { record }\n                    playing = { audioState.responsePlaying }\n                    playResponse = { () => play(responseId) }\n                    stopEverything = { stopEverything }\n                    responseAvailable = { question.responseUrl !== \"\" }\n                />\n\n                <br></br>\n\n                {\n                    question.responseUrl !== \"\"\n                        ?   <Link to = { pathToNext }>\n                                <MoveOn>Move On</MoveOn>\n                            </Link>\n                        :   <></>\n                }\n        \n            </Box>\n\n            <audio src = { recordingStartAudioUrl } id = { startAudioRecordingId }/>\n\n        </Container>\n    )\n\n}\n\nexport default QuestionPage;\n\nconst Img = styled.img<{ imageExpanded: boolean }>`\n    display: block;\n    margin: auto;\n    width: ${ props => props.imageExpanded ? \"100%\" : \"60%\" };\n    transition: width 0.2s;\n    &:hover {\n        cursor: pointer;\n    }\n`\n"]},"metadata":{},"sourceType":"module"}