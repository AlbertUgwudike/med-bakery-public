{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject;import StationSummaryCard from\"./StationSummaryCard\";import styled from\"styled-components\";import{useContext,useState}from\"react\";import MetaContext from\"../../MetaContext\";import CategorySelector from\"./CategorySelector\";import FilterSelector from\"./FilterSelector\";import LoadingScreen from\"./LoadingScreen\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var OSCESelector=function OSCESelector(props){var _useContext=useContext(MetaContext),token=_useContext.token,narrowWindow=_useContext.narrowWindow;var _useState=useState(\"All\"),_useState2=_slicedToArray(_useState,2),category=_useState2[0],updateCategory=_useState2[1];var _useState3=useState(\"No Filter\"),_useState4=_slicedToArray(_useState3,2),filter=_useState4[0],updateFilter=_useState4[1];return/*#__PURE__*/_jsx(\"div\",{children:props.stationSummariesLoading?/*#__PURE__*/_jsx(LoadingScreen,{message:\"Loading Stations\"}):/*#__PURE__*/_jsxs(\"div\",{style:{background:\"#031B34\",margin:\"5%\",padding:\"5%\",display:narrowWindow?\"block\":\"flex\"},children:[/*#__PURE__*/_jsx(CategorySelector,{updateCategory:updateCategory,stationSummaries:props.stationSummarires,category:category}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(FilterSelector,{stationSummaries:props.stationSummarires,updateFilter:updateFilter,filter:filter}),/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",flexWrap:\"wrap\"},children:props.stationSummarires.filter(function(ss){return ss.category===category||category===\"All\";}).filter(function(ss){if(filter===\"Attempted\")return props.answeredStations.map(function(as){return as.id;}).includes(ss.id);if(filter===\"Free\")return ss.isDemoStation;if(filter===\"Premium\")return!ss.isDemoStation;return true;// filter === \"All\"\n}).map(function(ss){return/*#__PURE__*/_jsx(StationSummaryCard,{openSubscribeModal:props.openSubscribeModal,selectStation:props.selectStation,answeredStations:props.answeredStations,summary:ss,available:token!==\"\"&&props.purchasedOsce||ss.isDemoStation},ss.id);})})]})]})});};export default OSCESelector;var StartOrReview=styled.button(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    text-align: center;\\n    margin: 5px 10px 5px 0;\\n    border-radius: 5px;\\n    padding: 0 10px;\\n    height: 30px;\\n    border: 1px solid grey;\\n    color: #fad000;\\n    background-color: transparent;\\n\"])));","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCESelector.tsx"],"names":["StationSummaryCard","styled","useContext","useState","MetaContext","CategorySelector","FilterSelector","LoadingScreen","OSCESelector","props","token","narrowWindow","category","updateCategory","filter","updateFilter","stationSummariesLoading","background","margin","padding","display","stationSummarires","flexWrap","ss","answeredStations","map","as","id","includes","isDemoStation","openSubscribeModal","selectStation","purchasedOsce","StartOrReview","button"],"mappings":"sSACA,MAAOA,CAAAA,kBAAP,KAA+B,sBAA/B,CAEA,MAAOC,CAAAA,MAAP,KAAkC,mBAAlC,CACA,OAAmCC,UAAnC,CAA+CC,QAA/C,KAA+D,OAA/D,CACA,MAAOC,CAAAA,WAAP,KAAwB,mBAAxB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CAGA,MAAOC,CAAAA,cAAP,KAAuC,kBAAvC,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,C,wFAYA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA8B,CAC/C,gBAAgCP,UAAU,CAACE,WAAD,CAA1C,CAAQM,KAAR,aAAQA,KAAR,CAAeC,YAAf,aAAeA,YAAf,CACA,cAAmCR,QAAQ,CAAC,KAAD,CAA3C,wCAAOS,QAAP,eAAiBC,cAAjB,eACA,eAA+BV,QAAQ,CAAS,WAAT,CAAvC,yCAAOW,MAAP,eAAeC,YAAf,eAEA,mBACI,qBACKN,KAAK,CAACO,uBAAN,cACG,KAAC,aAAD,EAAe,OAAO,CAAC,kBAAvB,EADH,cAGG,aACI,KAAK,CAAE,CACHC,UAAU,CAAE,SADT,CAEHC,MAAM,CAAE,IAFL,CAGHC,OAAO,CAAE,IAHN,CAIHC,OAAO,CAAET,YAAY,CAAG,OAAH,CAAa,MAJ/B,CADX,wBASI,KAAC,gBAAD,EACI,cAAc,CAAEE,cADpB,CAEI,gBAAgB,CAAEJ,KAAK,CAACY,iBAF5B,CAGI,QAAQ,CAAET,QAHd,EATJ,cAeI,oCACI,KAAC,cAAD,EACI,gBAAgB,CAAEH,KAAK,CAACY,iBAD5B,CAEI,YAAY,CAAEN,YAFlB,CAGI,MAAM,CAAED,MAHZ,EADJ,cAOI,YACI,KAAK,CAAE,CACHM,OAAO,CAAE,MADN,CAEHE,QAAQ,CAAE,MAFP,CADX,UAMKb,KAAK,CAACY,iBAAN,CACIP,MADJ,CACW,SAAAS,EAAE,QAAIA,CAAAA,EAAE,CAACX,QAAH,GAAgBA,QAAhB,EAA4BA,QAAQ,GAAK,KAA7C,EADb,EAEIE,MAFJ,CAEW,SAAAS,EAAE,CAAI,CACV,GAAIT,MAAM,GAAK,WAAf,CACI,MAAOL,CAAAA,KAAK,CAACe,gBAAN,CACFC,GADE,CACE,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACC,EAAP,EADJ,EAEFC,QAFE,CAEOL,EAAE,CAACI,EAFV,CAAP,CAGJ,GAAIb,MAAM,GAAK,MAAf,CAAuB,MAAOS,CAAAA,EAAE,CAACM,aAAV,CACvB,GAAIf,MAAM,GAAK,SAAf,CAA0B,MAAO,CAACS,EAAE,CAACM,aAAX,CAC1B,MAAO,KAAP,CAAa;AAChB,CAVJ,EAWIJ,GAXJ,CAWQ,SAAAF,EAAE,qBACH,KAAC,kBAAD,EACI,kBAAkB,CAAEd,KAAK,CAACqB,kBAD9B,CAEI,aAAa,CAAErB,KAAK,CAACsB,aAFzB,CAGI,gBAAgB,CAAEtB,KAAK,CAACe,gBAH5B,CAII,OAAO,CAAED,EAJb,CAKI,SAAS,CACJb,KAAK,GAAK,EAAV,EAAgBD,KAAK,CAACuB,aAAvB,EACAT,EAAE,CAACM,aAPX,EASSN,EAAE,CAACI,EATZ,CADG,EAXV,CANL,EAPJ,GAfJ,GAJR,EADJ,CA+DH,CApED,CAsEA,cAAenB,CAAAA,YAAf,CAEA,GAAMyB,CAAAA,aAAa,CAAGhC,MAAM,CAACiC,MAAV,iRAAnB","sourcesContent":["import { AnsweredStationDetails, StationSummary, Station } from \"./types\";\nimport StationSummaryCard from \"./StationSummaryCard\";\nimport Navigator from \"../Navigator\";\nimport styled, { keyframes } from \"styled-components\";\nimport { Dispatch, SetStateAction, useContext, useState } from \"react\";\nimport MetaContext from \"../../MetaContext\";\nimport CategorySelector from \"./CategorySelector\";\nimport { FaSpinner } from \"react-icons/fa\";\nimport SubscribePanel from \"./SubscribePanel\";\nimport FilterSelector, { Filter } from \"./FilterSelector\";\nimport LoadingScreen from \"./LoadingScreen\";\n\ntype OSCESelectorProps = {\n    stationSummarires: StationSummary[];\n    selectStation: (id: string, options: { review: boolean; marks: (0 | 1)[] }) => void;\n    station: Station;\n    answeredStations: AnsweredStationDetails[];\n    purchasedOsce: boolean;\n    stationSummariesLoading: boolean;\n    openSubscribeModal: () => void;\n};\n\nconst OSCESelector = (props: OSCESelectorProps) => {\n    const { token, narrowWindow } = useContext(MetaContext);\n    const [category, updateCategory] = useState(\"All\");\n    const [filter, updateFilter] = useState<Filter>(\"No Filter\");\n\n    return (\n        <div>\n            {props.stationSummariesLoading ? (\n                <LoadingScreen message=\"Loading Stations\" />\n            ) : (\n                <div\n                    style={{\n                        background: \"#031B34\",\n                        margin: \"5%\",\n                        padding: \"5%\",\n                        display: narrowWindow ? \"block\" : \"flex\",\n                    }}\n                >\n\n                    <CategorySelector\n                        updateCategory={updateCategory}\n                        stationSummaries={props.stationSummarires}\n                        category={category}\n                    />\n                    \n                    <div>\n                        <FilterSelector\n                            stationSummaries={props.stationSummarires}\n                            updateFilter={updateFilter}\n                            filter={filter}\n                        />\n\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexWrap: \"wrap\",\n                            }}\n                        >\n                            {props.stationSummarires\n                                .filter(ss => ss.category === category || category === \"All\")\n                                .filter(ss => {\n                                    if (filter === \"Attempted\")\n                                        return props.answeredStations\n                                            .map(as => as.id)\n                                            .includes(ss.id);\n                                    if (filter === \"Free\") return ss.isDemoStation;\n                                    if (filter === \"Premium\") return !ss.isDemoStation;\n                                    return true; // filter === \"All\"\n                                })\n                                .map(ss => (\n                                    <StationSummaryCard\n                                        openSubscribeModal={props.openSubscribeModal}\n                                        selectStation={props.selectStation}\n                                        answeredStations={props.answeredStations}\n                                        summary={ss}\n                                        available={\n                                            (token !== \"\" && props.purchasedOsce) ||\n                                            ss.isDemoStation\n                                        }\n                                        key={ss.id}\n                                    />\n                                ))}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default OSCESelector;\n\nconst StartOrReview = styled.button`\n    text-align: center;\n    margin: 5px 10px 5px 0;\n    border-radius: 5px;\n    padding: 0 10px;\n    height: 30px;\n    border: 1px solid grey;\n    color: #fad000;\n    background-color: transparent;\n`;\n"]},"metadata":{},"sourceType":"module"}