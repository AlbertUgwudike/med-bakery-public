{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionContent.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _templateObject;\n\nimport { useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../ECGPage/Functions/utility\";\nimport { Box } from \"./Common\";\nimport { playStartTone } from \"./hooks\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, responseId } from \"./types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar initialAudioState = {\n  promptAudio: null,\n  responseWaveSurfer: undefined,\n  promptPlaying: true,\n  responsePlaying: false,\n  recording: false\n};\n\nvar QuestionContent = function QuestionContent(props) {\n  _s();\n\n  var _useState = useState(initialAudioState),\n      _useState2 = _slicedToArray(_useState, 2),\n      audioState = _useState2[0],\n      updateAudioState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingRecorder = _useState4[0],\n      updateLoadingRecorder = _useState4[1];\n\n  var _useReactMediaRecorde = useReactMediaRecorder({\n    audio: true,\n    onStart: function onStart() {\n      updateLoadingRecorder(false);\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          recording: true\n        });\n      });\n      playStartTone();\n    },\n    onStop: function onStop(blobUrl, _) {\n      playStartTone();\n      props.updateStation(function (s) {\n        s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n        return copy(s); // because object is nested, react shallow compares\n      });\n\n      if (!props.lastQuestion) {\n        props.updateQuestionIdx(function (qi) {\n          return {\n            prev: qi.curr,\n            curr: props.questionIdx + 1\n          };\n        });\n      }\n    }\n  }),\n      startRecording = _useReactMediaRecorde.startRecording,\n      stopRecording = _useReactMediaRecorde.stopRecording;\n\n  var stopEverything = function stopEverything() {\n    var _audioState$promptAud, _audioState$responseW;\n\n    console.log(\"stop everything\");\n    (_audioState$promptAud = audioState.promptAudio) === null || _audioState$promptAud === void 0 ? void 0 : _audioState$promptAud.pause();\n    (_audioState$responseW = audioState.responseWaveSurfer) === null || _audioState$responseW === void 0 ? void 0 : _audioState$responseW.stop();\n    if (audioState.recording) stopRecording();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: false,\n        responsePlaying: false,\n        recording: false\n      });\n    });\n  };\n\n  var play = function play(id) {\n    var _audioState$promptAud2, _audioState$responseW2;\n\n    stopEverything();\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptPlaying: id === promptId,\n        responsePlaying: id === responseId\n      });\n    });\n    if (id === promptId) (_audioState$promptAud2 = audioState.promptAudio) === null || _audioState$promptAud2 === void 0 ? void 0 : _audioState$promptAud2.play();else (_audioState$responseW2 = audioState.responseWaveSurfer) === null || _audioState$responseW2 === void 0 ? void 0 : _audioState$responseW2.play();\n  };\n\n  var record = function record() {\n    stopEverything();\n    updateLoadingRecorder(true);\n    startRecording();\n  }; // play prompt whenever questionchanges\n\n\n  useEffect(function () {\n    var promptAudio = document.getElementById(promptId + props.questionIdx);\n    promptAudio.addEventListener(\"ended\", function (_) {\n      updateAudioState(function (as) {\n        return _objectSpread(_objectSpread({}, as), {}, {\n          promptPlaying: false\n        });\n      });\n    });\n    updateAudioState(function (as) {\n      return _objectSpread(_objectSpread({}, as), {}, {\n        promptAudio: promptAudio\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: _objectSpread({\n        gridRowStart: 1,\n        gridColumnStart: 1,\n        transition: \"transform \".concat(500, \"ms\")\n      }, props.transitionStyle),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(QuestionPrompt, {\n          question: props.question,\n          toggle: function toggle() {\n            audioState.promptPlaying ? stopEverything() : play(promptId);\n          },\n          promptId: promptId + props.questionIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Img, {\n          src: props.question.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowStart: 2,\n        gridColumnStart: 1,\n        zIndex: 1000,\n        backgroundColor: \"#1c2124\",\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(TaskSection, {\n        recording: audioState.recording,\n        recordResponse: record,\n        playing: audioState.responsePlaying,\n        playResponse: function playResponse() {\n          return play(responseId);\n        },\n        stopEverything: stopEverything,\n        responseAudio: props.question.responseAudio,\n        loadingRecorder: loadingRecorder,\n        updateAudioState: updateAudioState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(QuestionContent, \"fTvLE78j2Qwl31Dnr9bUNtS+xbw=\", false, function () {\n  return [useReactMediaRecorder];\n});\n\n_c = QuestionContent;\nexport default QuestionContent;\nvar Img = styled.img(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    display: block;\\n    margin: auto;\\n    width: 60%;\\n    transition: width 0.2s;\\n\"])));\n_c2 = Img;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QuestionContent\");\n$RefreshReg$(_c2, \"Img\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/QuestionContent.tsx"],"names":["useEffect","useState","useReactMediaRecorder","styled","copy","Box","playStartTone","QuestionPrompt","TaskSection","promptId","responseId","initialAudioState","promptAudio","responseWaveSurfer","undefined","promptPlaying","responsePlaying","recording","QuestionContent","props","audioState","updateAudioState","loadingRecorder","updateLoadingRecorder","audio","onStart","as","onStop","blobUrl","_","updateStation","s","questions","questionIdx","responseAudio","lastQuestion","updateQuestionIdx","qi","prev","curr","startRecording","stopRecording","stopEverything","console","log","pause","stop","play","id","record","document","getElementById","addEventListener","gridRowStart","gridColumnStart","transition","transitionStyle","textAlign","question","img","zIndex","backgroundColor","height","Img"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport styled from \"styled-components\";\nimport { copy } from \"../ECGPage/Functions/utility\";\nimport { Box } from \"./Common\";\nimport { generateWaveSurfer, playStartTone } from \"./hooks\";\nimport QuestionPrompt from \"./QuestionPrompt\";\nimport TaskSection from \"./TaskSection\";\nimport { promptId, Question, responseId, Station } from \"./types\";\n\ntype QuestionContentProps = {\n    question: Question;\n    lastQuestion: boolean;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    questionIdx: number;\n    updateQuestionIdx: Dispatch<SetStateAction<{ prev: number; curr: number }>>;\n    transitionStyle: any;\n};\n\nexport type AudioState = {\n    promptAudio: HTMLAudioElement | null;\n    responseWaveSurfer: WaveSurfer | undefined;\n    promptPlaying: boolean;\n    responsePlaying: boolean;\n    recording: boolean;\n};\n\nconst initialAudioState: AudioState = {\n    promptAudio: null,\n    responseWaveSurfer: undefined,\n    promptPlaying: true,\n    responsePlaying: false,\n    recording: false,\n};\n\nconst QuestionContent = (props: QuestionContentProps) => {\n    const [audioState, updateAudioState] = useState<AudioState>(initialAudioState);\n    const [loadingRecorder, updateLoadingRecorder] = useState(false);\n\n    const { startRecording, stopRecording } = useReactMediaRecorder({\n        audio: true,\n        onStart: () => {\n            updateLoadingRecorder(false);\n            updateAudioState(as => ({ ...as, recording: true }));\n            playStartTone();\n        },\n        onStop: (blobUrl, _) => {\n            playStartTone();\n            props.updateStation(s => {\n                s.questions[props.questionIdx].responseAudio = blobUrl ? blobUrl : \"\";\n                return copy(s); // because object is nested, react shallow compares\n            });\n            if (!props.lastQuestion) {\n                props.updateQuestionIdx(qi => ({\n                    prev: qi.curr,\n                    curr: props.questionIdx + 1,\n                }));\n            }\n        },\n    });\n\n    const stopEverything = () => {\n        console.log(\"stop everything\");\n        audioState.promptAudio?.pause();\n        audioState.responseWaveSurfer?.stop();\n        if (audioState.recording) stopRecording();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: false,\n            responsePlaying: false,\n            recording: false,\n        }));\n    };\n\n    const play = (id: string) => {\n        stopEverything();\n        updateAudioState(as => ({\n            ...as,\n            promptPlaying: id === promptId,\n            responsePlaying: id === responseId,\n        }));\n\n        if (id === promptId) audioState.promptAudio?.play();\n        else audioState.responseWaveSurfer?.play();\n    };\n\n    const record = () => {\n        stopEverything();\n        updateLoadingRecorder(true);\n        startRecording();\n    };\n\n    // play prompt whenever questionchanges\n    useEffect(() => {\n        const promptAudio = document.getElementById(\n            promptId + props.questionIdx\n        ) as HTMLAudioElement;\n        promptAudio.addEventListener(\"ended\", _ => {\n            updateAudioState(as => ({ ...as, promptPlaying: false }));\n        });\n        updateAudioState(as => ({\n            ...as,\n            promptAudio,\n        }));\n    }, []);\n\n    return (\n        <>\n            <div\n                style={{\n                    gridRowStart: 1,\n                    gridColumnStart: 1,\n                    transition: `transform ${500}ms`,\n                    ...props.transitionStyle,\n                }}\n            >\n                <Box style={{ textAlign: \"center\" }}>\n                    <QuestionPrompt\n                        question={props.question}\n                        toggle={() => {\n                            audioState.promptPlaying ? stopEverything() : play(promptId);\n                        }}\n                        promptId={promptId + props.questionIdx}\n                    />\n\n                    <br></br>\n\n                    <Img src={props.question.img}></Img>\n                    <br />\n                </Box>\n            </div>\n            <div\n                style={{\n                    gridRowStart: 2,\n                    gridColumnStart: 1,\n                    zIndex: 1000,\n                    backgroundColor: \"#1c2124\",\n                    height: \"100vh\",\n                }}\n            >\n                <TaskSection\n                    recording={audioState.recording}\n                    recordResponse={record}\n                    playing={audioState.responsePlaying}\n                    playResponse={() => play(responseId)}\n                    stopEverything={stopEverything}\n                    responseAudio={props.question.responseAudio}\n                    loadingRecorder={loadingRecorder}\n                    updateAudioState={updateAudioState}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default QuestionContent;\n\nconst Img = styled.img`\n    display: block;\n    margin: auto;\n    width: 60%;\n    transition: width 0.2s;\n`;\n"]},"metadata":{},"sourceType":"module"}