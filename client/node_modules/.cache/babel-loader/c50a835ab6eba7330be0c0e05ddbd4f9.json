{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/ECGQuestionProgress.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport styled from 'styled-components';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ECGQuestionProgress = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const backButtonActive = props.questionIdx > 0;\n  const forwadButtonActive = props.questionIdx < props.questions.length - 1;\n  const [backButtonColor, backButtonFunc] = backButtonActive ? [\"#FAD000\", () => props.updateQuestionIdx(i => i - 1)] : [\"grey\", () => {}];\n  const [forwardButtonColor, forwardButtonFunc] = forwadButtonActive ? [\"#FAD000\", () => props.updateQuestionIdx(i => i + 1)] : [\"grey\", () => {}];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    darkMode: darkMode,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      backgroundColor: backButtonColor,\n      textColor: darkMode ? \"white\" : \"black\",\n      onClick: backButtonFunc,\n      children: \"<\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dosset, {\n      children: Array(props.questions.length).fill(0).map((_, idx) => {\n        const correct = props.questions[idx].sections.reduce((flag, section) => flag && section.selected === section.correct, true);\n        let backgroundColor = \"grey\";\n        if (correct && props.questions[idx].answered) backgroundColor = \"green\";\n        if (!correct && props.questions[idx].answered) backgroundColor = \"red\";\n        return /*#__PURE__*/_jsxDEV(Pill, {\n          backgroundColor: backgroundColor,\n          darkMode: darkMode,\n          selected: idx === props.questionIdx\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      backgroundColor: forwardButtonColor,\n      textColor: darkMode ? \"white\" : \"black\",\n      onClick: forwardButtonFunc,\n      children: \">\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ECGQuestionProgress, \"PnQ/ys69gTWC7ND+ZGDKVPZ9Xno=\");\n\n_c = ECGQuestionProgress;\nexport default ECGQuestionProgress;\nconst Container = styled.div`\n    display: inline-block;\n    border-radius: 10px;\n    border: none;\n    font-size: 24px;\n    margin: 0 10px 5px 10px;\n    padding: 0 10px;\n    background-color: ${props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\"};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n`;\n_c2 = Container;\nconst Button = styled.button`\n    display: inline-block;\n    border-style: none;\n    background-color: transparent;\n    color: ${props => props.textColor};\n`;\n_c3 = Button;\nconst Dosset = styled.div`\n    display: inline-block;\n    white-space: wrap;\n    text-align: center;\n`;\n_c4 = Dosset;\nconst Pill = styled.div`\n    display: inline-block;\n    height: 16px;\n    width: 16px;\n    border-radius: 8px;\n    border: 1px solid ${props => props.selected ? \"white\" : \"transparent\"};\n    margin: 0px 2px;\n    background-color: ${props => props.backgroundColor}\n`;\n_c5 = Pill;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ECGQuestionProgress\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"Dosset\");\n$RefreshReg$(_c5, \"Pill\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/ECGQuestionProgress.tsx"],"names":["useContext","styled","MetaContext","ECGQuestionProgress","props","darkMode","backButtonActive","questionIdx","forwadButtonActive","questions","length","backButtonColor","backButtonFunc","updateQuestionIdx","i","forwardButtonColor","forwardButtonFunc","Array","fill","map","_","idx","correct","sections","reduce","flag","section","selected","backgroundColor","answered","Container","div","Button","button","textColor","Dosset","Pill"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\nimport styled from 'styled-components';\nimport MetaContext from '../../MetaContext';\nimport { EcgQuestion } from \"./Generator/ECGTypes\";\n\ntype ECGProgressProps = {\n    updateQuestionIdx: React.Dispatch<React.SetStateAction<number>>;\n    questionIdx: number;\n    questions: EcgQuestion[];\n}\n\nconst ECGQuestionProgress = (props: ECGProgressProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n\n    const backButtonActive = props.questionIdx > 0;\n    const forwadButtonActive = props.questionIdx < props.questions.length - 1;\n\n    const [backButtonColor, backButtonFunc] = backButtonActive ? [\"#FAD000\", () => props.updateQuestionIdx(i => i - 1)] : [\"grey\", () => {}];\n    const [forwardButtonColor, forwardButtonFunc] = forwadButtonActive ? [\"#FAD000\", () => props.updateQuestionIdx(i => i + 1)] : [\"grey\", () => {}];\n\n    return (\n        <Container darkMode = { darkMode }> \n\n            <Button \n                backgroundColor = { backButtonColor }\n                textColor = { darkMode ? \"white\" : \"black\" }\n                onClick = { backButtonFunc }\n            > \n                &lt; \n            </Button>\n\n            <Dosset>\n                { \n                    Array(props.questions.length).fill(0).map((_, idx) => {\n                        const correct = props.questions[idx].sections.reduce((flag, section) => flag && section.selected === section.correct, true);\n                        let backgroundColor = \"grey\";\n                        if (correct && props.questions[idx].answered) backgroundColor = \"green\";\n                        if (!correct && props.questions[idx].answered) backgroundColor = \"red\";\n\n                        return <Pill backgroundColor = { backgroundColor } darkMode = { darkMode } selected = { idx === props.questionIdx } />\n                    }) \n                }\n            </Dosset>\n\n            <Button \n                backgroundColor = { forwardButtonColor }\n                textColor = { darkMode ? \"white\" : \"black\" }\n                onClick = { forwardButtonFunc }\n            > \n                &gt;\n            </Button>\n\n        </Container> \n    );\n}\n\nexport default ECGQuestionProgress;\n\nconst Container = styled.div<{ darkMode: boolean }>`\n    display: inline-block;\n    border-radius: 10px;\n    border: none;\n    font-size: 24px;\n    margin: 0 10px 5px 10px;\n    padding: 0 10px;\n    background-color: ${ props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\" };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n`\n\nconst Button = styled.button<{ backgroundColor: string, textColor: string }>`\n    display: inline-block;\n    border-style: none;\n    background-color: transparent;\n    color: ${ props => props.textColor };\n`\n\nconst Dosset = styled.div`\n    display: inline-block;\n    white-space: wrap;\n    text-align: center;\n`\n\nconst Pill  = styled.div<{ backgroundColor: string, darkMode: boolean, selected: boolean }>`\n    display: inline-block;\n    height: 16px;\n    width: 16px;\n    border-radius: 8px;\n    border: 1px solid ${ props => props.selected ? \"white\" : \"transparent\" };\n    margin: 0px 2px;\n    background-color: ${ props => props.backgroundColor}\n`"]},"metadata":{},"sourceType":"module"}