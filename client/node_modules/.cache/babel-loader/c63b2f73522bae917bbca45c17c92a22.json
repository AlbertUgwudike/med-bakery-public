{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation } from \"react-router-dom\";\nimport OSCEHomePage from \"./OSCEHomePage\";\nimport StationPage from \"./StationPage\";\nimport MetaContext from \"../../MetaContext\";\nimport { NullStation } from \"./DemoStations/NullStation\";\nimport axios from \"../../myaxios\";\nimport { binaryToCode, downloadAssets, extractReponseAudio, populateMarkScheme, populateResponseAudios } from \"./hooks\";\nimport SubscribePage from \"./SubscribePage\";\nimport PaymentAfterMath from \"./PaymentAfterMath\";\nimport LoadingOverlay from \"./LoadingOverlay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar OSCEPage = function OSCEPage() {\n  _s();\n\n  var _useContext = useContext(MetaContext),\n      token = _useContext.token,\n      SERVER_URL = _useContext.SERVER_URL,\n      CLIENT_URL = _useContext.CLIENT_URL;\n\n  var _useState = useState(NullStation),\n      _useState2 = _slicedToArray(_useState, 2),\n      station = _useState2[0],\n      updateStation = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stationSummarires = _useState4[0],\n      updateStationSummaries = _useState4[1];\n\n  var _useState5 = useState({\n    answeredStations: [],\n    purchasedOsce: false\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userDetailsOsce = _useState6[0],\n      updateUserDetailsOsce = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reviewMode = _useState8[0],\n      updateReviewMode = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loading = _useState10[0],\n      updateLoading = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      stationeSummariesLoading = _useState12[0],\n      updateSummariesLoading = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userLoading = _useState14[0],\n      updateUserLoading = _useState14[1];\n\n  var location = useLocation();\n\n  var loadUserDetails = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, _res$data, answeredStations, purchasedOsce;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updateUserLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.post(SERVER_URL + \"/user/osce_details\", {\n                token: token\n              });\n\n            case 4:\n              res = _context.sent;\n\n              if (res.data.success) {\n                _context.next = 7;\n                break;\n              }\n\n              throw \"loadUserDetails (OSCEPage.tsx): user details retrieval failed\";\n\n            case 7:\n              _res$data = res.data, answeredStations = _res$data.answeredStations, purchasedOsce = _res$data.purchasedOsce;\n              updateUserDetailsOsce({\n                answeredStations: answeredStations,\n                purchasedOsce: purchasedOsce\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(_context.t0);\n\n            case 14:\n              updateUserLoading(false);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function loadUserDetails() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (token) {\n      loadUserDetails();\n    } else {\n      updateUserDetailsOsce({\n        answeredStations: [],\n        purchasedOsce: false\n      });\n    }\n  }, [token]);\n\n  var loadSummaries = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              updateSummariesLoading(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.post(SERVER_URL + \"/osce/get_stations\", {\n                token: token\n              });\n\n            case 4:\n              res = _context2.sent;\n\n              if (res.data.success) {\n                _context2.next = 7;\n                break;\n              }\n\n              throw \"loadSummaries (OSCEPage.tsx): station summary retrieval failed\";\n\n            case 7:\n              updateStationSummaries(res.data.summaries);\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n\n            case 13:\n              updateSummariesLoading(false);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 10]]);\n    }));\n\n    return function loadSummaries() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadSummaries();\n  }, []);\n\n  var selectStation = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id, options) {\n      var axres, matches, rawResponseAudios, stationWithMarks, stationWithResponses, localContentStation, _localContentStation;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              updateLoading(true);\n              updateReviewMode(options.review);\n              _context3.prev = 2;\n              _context3.next = 5;\n              return axios.post(SERVER_URL + \"/osce/get_station\", {\n                token: token,\n                id: id\n              });\n\n            case 5:\n              axres = _context3.sent;\n\n              if (axres.data.success) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw \"selecteStation (OSCEPage): Station retrieval failed!\";\n\n            case 8:\n              if (!options.review) {\n                _context3.next = 19;\n                break;\n              }\n\n              matches = userDetailsOsce.answeredStations.filter(function (s) {\n                return s.id === axres.data.station.id;\n              });\n              rawResponseAudios = matches.length === 0 ? Array(axres.data.station.questions.length).fill(\"\") : matches[0].responseAudios;\n              stationWithMarks = populateMarkScheme(axres.data.station, options.marks);\n              stationWithResponses = populateResponseAudios(stationWithMarks, rawResponseAudios);\n              _context3.next = 15;\n              return downloadAssets(stationWithResponses, SERVER_URL);\n\n            case 15:\n              localContentStation = _context3.sent;\n              updateStation(localContentStation);\n              _context3.next = 23;\n              break;\n\n            case 19:\n              _context3.next = 21;\n              return downloadAssets(axres.data.station, SERVER_URL);\n\n            case 21:\n              _localContentStation = _context3.sent;\n              updateStation(_localContentStation);\n\n            case 23:\n              _context3.next = 28;\n              break;\n\n            case 25:\n              _context3.prev = 25;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.error(_context3.t0);\n\n            case 28:\n              updateLoading(false);\n\n            case 29:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 25]]);\n    }));\n\n    return function selectStation(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleExit = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(questions, tok) {\n      var points, markCode, responseAudios;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              updateLoading(true);\n              points = questions.map(function (q) {\n                return q.markScheme.map(function (ms) {\n                  return ms.points.map(function (p) {\n                    return p.selected ? 1 : 0;\n                  });\n                });\n              }).flat(2);\n              markCode = binaryToCode([1].concat(points));\n\n              if (reviewMode) {\n                _context4.next = 9;\n                break;\n              }\n\n              _context4.next = 6;\n              return extractReponseAudio(questions);\n\n            case 6:\n              responseAudios = _context4.sent;\n              _context4.next = 9;\n              return axios.post(SERVER_URL + \"/osce/update_stations\", {\n                token: tok,\n                markCode: markCode,\n                id: station.id,\n                responseAudios: responseAudios\n              });\n\n            case 9:\n              updateStation(NullStation);\n              window.location.href = \"/OSCE\";\n              updateLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleExit(_x3, _x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/OSCE\",\n      children: /*#__PURE__*/_jsxDEV(OSCEHomePage, {\n        stationSummarires: stationSummarires,\n        answeredStations: userDetailsOsce.answeredStations,\n        selectStation: selectStation,\n        station: station,\n        purchasedOsce: userDetailsOsce.purchasedOsce,\n        stationSummariesLoading: stationeSummariesLoading || userLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/Station\",\n      children: /*#__PURE__*/_jsxDEV(StationPage, {\n        handleExit: handleExit,\n        station: station,\n        updateStation: updateStation,\n        answeredStations: userDetailsOsce.answeredStations,\n        reviewMode: reviewMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/Subscribe\",\n      children: /*#__PURE__*/_jsxDEV(SubscribePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/PaymentCanceled\",\n      children: /*#__PURE__*/_jsxDEV(PaymentAfterMath, {\n        message: \"Payment was unsuccessful\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/OSCE/PaymentSuccess\",\n      children: /*#__PURE__*/_jsxDEV(PaymentAfterMath, {\n        message: \"Payment was successful\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(OSCEPage, \"QfkuVTUE9q4MLMmN4ygc9yCZM/M=\", false, function () {\n  return [useLocation];\n});\n\n_c = OSCEPage;\nexport default OSCEPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OSCEPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/OSCEPage.tsx"],"names":["useContext","useEffect","useState","Switch","Route","useLocation","OSCEHomePage","StationPage","MetaContext","NullStation","axios","binaryToCode","downloadAssets","extractReponseAudio","populateMarkScheme","populateResponseAudios","SubscribePage","PaymentAfterMath","LoadingOverlay","OSCEPage","token","SERVER_URL","CLIENT_URL","station","updateStation","stationSummarires","updateStationSummaries","answeredStations","purchasedOsce","userDetailsOsce","updateUserDetailsOsce","reviewMode","updateReviewMode","loading","updateLoading","stationeSummariesLoading","updateSummariesLoading","userLoading","updateUserLoading","location","loadUserDetails","post","res","data","success","console","error","loadSummaries","summaries","selectStation","id","options","review","axres","matches","filter","s","rawResponseAudios","length","Array","questions","fill","responseAudios","stationWithMarks","marks","stationWithResponses","localContentStation","handleExit","tok","points","map","q","markScheme","ms","p","selected","flat","markCode","concat","window","href"],"mappings":"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","sourcesContent":["import { Dispatch, SetStateAction, useContext, useEffect, useState } from \"react\";\nimport { Switch, Route, useLocation, Redirect } from \"react-router-dom\";\nimport OSCEHomePage from \"./OSCEHomePage\";\nimport StationPage from \"./StationPage\";\nimport MetaContext from \"../../MetaContext\";\nimport { NullStation } from \"./DemoStations/NullStation\";\nimport axios from \"../../myaxios\";\nimport { AnsweredStationDetails, Question, StationSummary } from \"./types\";\nimport {\n    binaryToCode,\n    downloadAssets,\n    extractReponseAudio,\n    populateMarkScheme,\n    populateResponseAudios,\n} from \"./hooks\";\nimport SubscribePage from \"./SubscribePage\";\nimport PaymentAfterMath from \"./PaymentAfterMath\";\nimport { produceHeat } from \"../../functions\";\nimport { props } from \"ramda\";\nimport LoadingOverlay from \"./LoadingOverlay\";\n\ntype UserDetailsOsce = {\n    answeredStations: AnsweredStationDetails[];\n    purchasedOsce: boolean;\n};\n\nconst OSCEPage = () => {\n    const { token, SERVER_URL, CLIENT_URL } = useContext(MetaContext);\n    const [station, updateStation] = useState(NullStation);\n    const [stationSummarires, updateStationSummaries] = useState<StationSummary[]>([]);\n    const [userDetailsOsce, updateUserDetailsOsce] = useState<UserDetailsOsce>({\n        answeredStations: [],\n        purchasedOsce: false,\n    });\n    const [reviewMode, updateReviewMode] = useState(false);\n\n    const [loading, updateLoading] = useState(false);\n    const [stationeSummariesLoading, updateSummariesLoading] = useState(false);\n    const [userLoading, updateUserLoading] = useState(false);\n\n    const location = useLocation();\n\n    const loadUserDetails = async () => {\n        updateUserLoading(true);\n\n        try {\n            const res = await axios.post(SERVER_URL + \"/user/osce_details\", { token });\n\n            if (!res.data.success) {\n                throw \"loadUserDetails (OSCEPage.tsx): user details retrieval failed\";\n            }\n\n            const { answeredStations, purchasedOsce } = res.data;\n            updateUserDetailsOsce({ answeredStations, purchasedOsce });\n        } catch (error) {\n            console.error(error);\n        }\n\n        updateUserLoading(false);\n    };\n\n    useEffect(() => {\n        if (token) {\n            loadUserDetails();\n        } else {\n            updateUserDetailsOsce({\n                answeredStations: [],\n                purchasedOsce: false,\n            });\n        }\n    }, [token]);\n\n    const loadSummaries = async () => {\n        updateSummariesLoading(true);\n\n        try {\n            const res = await axios.post(SERVER_URL + \"/osce/get_stations\", { token });\n\n            if (!res.data.success) {\n                throw \"loadSummaries (OSCEPage.tsx): station summary retrieval failed\";\n            }\n\n            updateStationSummaries(res.data.summaries);\n        } catch (error) {\n            console.error(error);\n        }\n        updateSummariesLoading(false);\n    };\n\n    useEffect(() => {\n        loadSummaries();\n    }, []);\n\n    const selectStation = async (id: string, options: { review: boolean; marks: (0 | 1)[] }) => {\n        updateLoading(true);\n        updateReviewMode(options.review);\n\n        try {\n            const axres = await axios.post(SERVER_URL + \"/osce/get_station\", { token, id });\n\n            if (!axres.data.success) {\n                throw \"selecteStation (OSCEPage): Station retrieval failed!\";\n            }\n\n            if (options.review) {\n                const matches = userDetailsOsce.answeredStations.filter(\n                    s => s.id === axres.data.station.id\n                );\n                const rawResponseAudios =\n                    matches.length === 0\n                        ? Array(axres.data.station.questions.length).fill(\"\")\n                        : matches[0].responseAudios;\n\n                const stationWithMarks = populateMarkScheme(axres.data.station, options.marks);\n                const stationWithResponses = populateResponseAudios(\n                    stationWithMarks,\n                    rawResponseAudios\n                );\n                const localContentStation = await downloadAssets(stationWithResponses, SERVER_URL);\n                updateStation(localContentStation);\n            } else {\n                const localContentStation = await downloadAssets(axres.data.station, SERVER_URL);\n                updateStation(localContentStation);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        updateLoading(false);\n    };\n\n    const handleExit = async (questions: Question[], tok: string) => {\n        updateLoading(true);\n\n        const points = questions\n            .map(q => q.markScheme.map(ms => ms.points.map(p => (p.selected ? 1 : 0))))\n            .flat(2);\n        const markCode = binaryToCode([1 as 1 | 0].concat(points));\n\n        if (!reviewMode) {\n            const responseAudios = await extractReponseAudio(questions);\n            await axios.post(SERVER_URL + \"/osce/update_stations\", {\n                token: tok,\n                markCode,\n                id: station.id,\n                responseAudios,\n            });\n        }\n\n        updateStation(NullStation);\n        window.location.href = \"/OSCE\";\n\n        updateLoading(false);\n    };\n\n    return (\n        <Switch>\n            {loading && <LoadingOverlay />}\n\n            <Route exact path=\"/OSCE\">\n                <OSCEHomePage\n                    stationSummarires={stationSummarires}\n                    answeredStations={userDetailsOsce.answeredStations}\n                    selectStation={selectStation}\n                    station={station}\n                    purchasedOsce={userDetailsOsce.purchasedOsce}\n                    stationSummariesLoading={stationeSummariesLoading || userLoading}\n                />\n            </Route>\n\n            <Route path=\"/OSCE/Station\">\n                <StationPage\n                    handleExit={handleExit}\n                    station={station}\n                    updateStation={updateStation}\n                    answeredStations={userDetailsOsce.answeredStations}\n                    reviewMode={reviewMode}\n                />\n            </Route>\n\n            <Route path=\"/OSCE/Subscribe\">\n                <SubscribePage />\n            </Route>\n\n            <Route path=\"/OSCE/PaymentCanceled\">\n                <PaymentAfterMath message=\"Payment was unsuccessful\" />\n            </Route>\n\n            <Route path=\"/OSCE/PaymentSuccess\">\n                <PaymentAfterMath message=\"Payment was successful\" />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default OSCEPage;\n"]},"metadata":{},"sourceType":"module"}