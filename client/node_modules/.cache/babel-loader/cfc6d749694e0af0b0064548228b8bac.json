{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/ECGSession.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport { Panel } from \"../General/Panel\";\nimport { Subtitle } from \"../General/Subtitle\";\nimport { Title } from \"../General/Title\";\nimport ECGAnsweredOptions from \"./ECGAnsweredOptions\";\nimport ECGOptions from \"./ECGOptions\";\nimport ECGQuestionProgress from \"./ECGQuestionProgress\";\nimport { generateECG } from \"./Generator/ECGGenerator\";\nimport ECGSketch from \"./Generator/ECGSketch\";\nimport { themes } from \"./Generator/ECGSketchThemes\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// lets say last question in list is **always** unaanswered\nconst ECGSession = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const [darkTheme, updateDarkTheme] = useState(darkMode);\n  const [questions, updateQuestions] = useState([]);\n  const [questionIdx, updateQuestionIdx] = useState(0);\n  useEffect(() => {\n    updateDarkTheme(darkMode);\n  }, [darkMode]);\n  useEffect(() => {\n    updateQuestions([generateECG(props.topics)]);\n  }, []);\n\n  const handleOptionChange = (label, selected) => {\n    const currentWorkingQuestion = questions[questions.length - 1];\n    const modifiedQuestion = { ...currentWorkingQuestion,\n      sections: currentWorkingQuestion.sections.map(s => s.label === label ? { ...s,\n        selected\n      } : s)\n    };\n    updateQuestions(questions.map((q, i) => i === questions.length - 1 ? modifiedQuestion : q));\n  };\n\n  const submitAnswers = () => {\n    updateQuestions(questions.map((q, i) => i === questions.length - 1 ? { ...q,\n      answered: true\n    } : q).concat([generateECG(props.topics)]));\n  };\n\n  const refreshQuestion = () => {\n    const newQuestion = generateECG(props.topics);\n    updateQuestions(questions.map((q, i) => i === questions.length - 1 ? newQuestion : q));\n  };\n\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false); // can only submit if last question and all fields answered\n\n  const submitPermitted = questionIdx === questions.length - 1 && questions[questions.length - 1].sections.reduce((flag, section) => flag && section.selected !== \"\", true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      darkMode: darkMode,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: darkMode ? \"#FAD000\" : \"#7babff\"\n        },\n        children: \" ECG \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 44\n      }, this), \" Trainer\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n      darkMode: darkMode,\n      children: questions[questionIdx].answered ? \"Review Mode\" : \"Interpret it!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Panel, {\n      id: \"ecgsketch\",\n      darkMode: darkMode,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ECGSketch, {\n        theme: themes[darkTheme ? 0 : 1],\n        question: questions[questionIdx],\n        reviewMode: questions[questionIdx].answered\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          maxWidth: \"1000px\",\n          margin: \"auto\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(ECGQuestionProgress, {\n            questionIdx: questionIdx,\n            updateQuestionIdx: updateQuestionIdx,\n            questions: questions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(BakeButton, {\n            darkMode: darkMode,\n            onClick: questionIdx === questions.length - 1 ? refreshQuestion : () => {},\n            active: questionIdx === questions.length - 1,\n            children: \"Bake new ECG\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: [/*#__PURE__*/_jsxDEV(ReveiwButton, {\n            darkMode: darkMode,\n            onClick: () => updateDarkTheme(!darkTheme),\n            children: \"Toggle Theme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: questions.length > 1 ? \"/User/ECG\" : \"/User/ECG/Session\",\n            children: /*#__PURE__*/_jsxDEV(ReveiwButton, {\n              darkMode: darkMode,\n              onClick: props.finishEcgSession,\n              children: \"Finish\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(SectionContainer, {\n      darkMode: darkMode,\n      children: questions[questionIdx].sections.map(section => {\n        return questions[questionIdx].answered ? /*#__PURE__*/_jsxDEV(ECGAnsweredOptions, {\n          section: section,\n          handleOptionChange: handleOptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(ECGOptions, {\n          section: section,\n          handleOptionChange: handleOptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 27\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      submitPermitted: submitPermitted,\n      reviewMode: questions[questionIdx].answered,\n      onClick: submitPermitted ? submitAnswers : () => {},\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ECGSession, \"s5rKLuA0UuXJiqtShQwa4Xb2Sjg=\");\n\n_c = ECGSession;\nexport default ECGSession;\nconst SectionContainer = styled.div`\n    background-color: ${props => props.darkMode ? \"#191964\" : \"#FBE9EE\"};\n    overflow: scroll;\n    white-space: nowrap;\n    border-radius: 5px;\n    border: 10px solid ${props => props.darkMode ? \"#191964\" : \"#FBE9EE\"};\n`;\n_c2 = SectionContainer;\nconst BakeButton = styled.button`\n    display: inline-block;\n    border-style: none;\n    border-radius: 10px;\n    margin: 0 10px 10px 10px;\n    width: 200px;\n    height: 38px;\n    background-color: ${props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\"};\n    opacity: ${props => props.active ? 1 : 0.3};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n`;\n_c3 = BakeButton;\nconst ReveiwButton = styled.button`\n    display: block;\n    border-radius: 10px;\n    border: none;\n    font-size: 10px;\n    margin: 0px auto 2px auto;\n    width: 100px;\n    padding: 2px 10px;\n    background-color: ${props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\"};\n    color: ${props => props.darkMode ? \"white\" : \"black\"};\n`;\n_c4 = ReveiwButton;\nconst SubmitButton = styled.button`\n    width: 200px;\n    margin: 40px auto 0 auto;\n    font: bold 20px sans-serif;\n    border-radius: 20px;\n    border-style: none;\n    background-color: ${props => props.submitPermitted ? \"#FAD000\" : \"grey\"};\n    display: ${props => props.reviewMode ? \"none\" : \"inline-block\"};\n`;\n_c5 = SubmitButton;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ECGSession\");\n$RefreshReg$(_c2, \"SectionContainer\");\n$RefreshReg$(_c3, \"BakeButton\");\n$RefreshReg$(_c4, \"ReveiwButton\");\n$RefreshReg$(_c5, \"SubmitButton\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/ECGPage/ECGSession.tsx"],"names":["useContext","useEffect","useState","Link","styled","MetaContext","Panel","Subtitle","Title","ECGAnsweredOptions","ECGOptions","ECGQuestionProgress","generateECG","ECGSketch","themes","ECGSession","props","darkMode","darkTheme","updateDarkTheme","questions","updateQuestions","questionIdx","updateQuestionIdx","topics","handleOptionChange","label","selected","currentWorkingQuestion","length","modifiedQuestion","sections","map","s","q","i","submitAnswers","answered","concat","refreshQuestion","newQuestion","submitPermitted","reduce","flag","section","textAlign","color","maxWidth","margin","finishEcgSession","SectionContainer","div","BakeButton","button","active","ReveiwButton","SubmitButton","reviewMode"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,MAAT,QAAuB,6BAAvB;;;;AAIA;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAgE;AAAA;;AAC/E,QAAM;AAAEC,IAAAA;AAAF,MAAejB,UAAU,CAACK,WAAD,CAA/B;AACA,QAAM,CAACa,SAAD,EAAYC,eAAZ,IAA+BjB,QAAQ,CAACe,QAAD,CAA7C;AACA,QAAM,CAACG,SAAD,EAAYC,eAAZ,IAA+BnB,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACoB,WAAD,EAAcC,iBAAd,IAAmCrB,QAAQ,CAAC,CAAD,CAAjD;AAEAD,EAAAA,SAAS,CAAE,MAAM;AACbkB,IAAAA,eAAe,CAACF,QAAD,CAAf;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAhB,EAAAA,SAAS,CAAE,MAAM;AACboB,IAAAA,eAAe,CAAC,CAACT,WAAW,CAACI,KAAK,CAACQ,MAAP,CAAZ,CAAD,CAAf;AACH,GAFQ,EAEN,EAFM,CAAT;;AAKA,QAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAgBC,QAAhB,KAAqC;AAC5D,UAAMC,sBAAsB,GAAGR,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAxC;AACA,UAAMC,gBAA6B,GAAG,EAClC,GAAGF,sBAD+B;AAElCG,MAAAA,QAAQ,EAAEH,sBAAsB,CAACG,QAAvB,CAAgCC,GAAhC,CAAoCC,CAAC,IAAIA,CAAC,CAACP,KAAF,KAAYA,KAAZ,GAAoB,EAAE,GAAGO,CAAL;AAAQN,QAAAA;AAAR,OAApB,GAAyCM,CAAlF;AAFwB,KAAtC;AAIAZ,IAAAA,eAAe,CAACD,SAAS,CAACY,GAAV,CAAc,CAACE,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKf,SAAS,CAACS,MAAV,GAAmB,CAAzB,GAA6BC,gBAA7B,GAAgDI,CAAxE,CAAD,CAAf;AACH,GAPD;;AASA,QAAME,aAAa,GAAG,MAAM;AACxBf,IAAAA,eAAe,CAACD,SAAS,CAACY,GAAV,CAAc,CAACE,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKf,SAAS,CAACS,MAAV,GAAmB,CAAzB,GAA6B,EAAC,GAAGK,CAAJ;AAAOG,MAAAA,QAAQ,EAAE;AAAjB,KAA7B,GAAsDH,CAA9E,EAAiFI,MAAjF,CAAwF,CAAC1B,WAAW,CAACI,KAAK,CAACQ,MAAP,CAAZ,CAAxF,CAAD,CAAf;AACH,GAFD;;AAIA,QAAMe,eAAe,GAAG,MAAM;AAC1B,UAAMC,WAAW,GAAG5B,WAAW,CAACI,KAAK,CAACQ,MAAP,CAA/B;AACAH,IAAAA,eAAe,CAACD,SAAS,CAACY,GAAV,CAAc,CAACE,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKf,SAAS,CAACS,MAAV,GAAmB,CAAzB,GAA6BW,WAA7B,GAA2CN,CAAnE,CAAD,CAAf;AACH,GAHD;;AAKA,MAAId,SAAS,CAACS,MAAV,KAAqB,CAAzB,EAA4B,oBAAO,qCAAP,CAjCmD,CAmC/E;;AACA,QAAMY,eAAe,GACjBnB,WAAW,KAAKF,SAAS,CAACS,MAAV,GAAmB,CAAnC,IACAT,SAAS,CAACA,SAAS,CAACS,MAAV,GAAmB,CAApB,CAAT,CAAgCE,QAAhC,CAAyCW,MAAzC,CAAgD,CAACC,IAAD,EAAOC,OAAP,KAAmBD,IAAI,IAAIC,OAAO,CAACjB,QAAR,KAAqB,EAAhG,EAAoG,IAApG,CAFJ;AAIA,sBACI;AAAK,IAAA,KAAK,EAAI;AAAEkB,MAAAA,SAAS,EAAE;AAAb,KAAd;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAK5B,QAApB;AAAA,8BAA+B;AAAM,QAAA,KAAK,EAAI;AAAE6B,UAAAA,KAAK,EAAG7B,QAAQ,GAAG,SAAH,GAAe;AAAjC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAKA,QAAvB;AAAA,gBAAmCG,SAAS,CAACE,WAAD,CAAT,CAAuBe,QAAvB,GAAkC,aAAlC,GAAkD;AAArF;AAAA;AAAA;AAAA;AAAA,YAJJ,eAMI,QAAC,KAAD;AAAO,MAAA,EAAE,EAAG,WAAZ;AAAwB,MAAA,QAAQ,EAAKpB,QAArC;AAAA,8BAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII,QAAC,SAAD;AAAY,QAAA,KAAK,EAAKH,MAAM,CAACI,SAAS,GAAG,CAAH,GAAO,CAAjB,CAA5B;AAAkD,QAAA,QAAQ,EAAKE,SAAS,CAACE,WAAD,CAAxE;AAAwF,QAAA,UAAU,EAAKF,SAAS,CAACE,WAAD,CAAT,CAAuBe;AAA9H;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI;AAAK,QAAA,SAAS,EAAG,KAAjB;AAAuB,QAAA,KAAK,EAAI;AAAEU,UAAAA,QAAQ,EAAE,QAAZ;AAAsBC,UAAAA,MAAM,EAAE;AAA9B,SAAhC;AAAA,gCAEI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACI,QAAC,mBAAD;AACI,YAAA,WAAW,EAAK1B,WADpB;AAEI,YAAA,iBAAiB,EAAKC,iBAF1B;AAGI,YAAA,SAAS,EAAKH;AAHlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,QAAQ,EAAKH,QAAzB;AAAoC,YAAA,OAAO,EAAKK,WAAW,KAAKF,SAAS,CAACS,MAAV,GAAmB,CAAnC,GAAuCU,eAAvC,GAAyD,MAAM,CAAE,CAAjH;AAAoH,YAAA,MAAM,EAAKjB,WAAW,KAAKF,SAAS,CAACS,MAAV,GAAmB,CAAlK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAgBI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCAEI,QAAC,YAAD;AAAc,YAAA,QAAQ,EAAKZ,QAA3B;AAAsC,YAAA,OAAO,EAAK,MAAME,eAAe,CAAC,CAACD,SAAF,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAMI,QAAC,IAAD;AAAM,YAAA,EAAE,EAAKE,SAAS,CAACS,MAAV,GAAmB,CAAnB,GAAuB,WAAvB,GAAqC,mBAAlD;AAAA,mCACI,QAAC,YAAD;AAAc,cAAA,QAAQ,EAAKZ,QAA3B;AAAsC,cAAA,OAAO,EAAKD,KAAK,CAACiC,gBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eA8CI;AAAA;AAAA;AAAA;AAAA,YA9CJ,eA8CS;AAAA;AAAA;AAAA;AAAA,YA9CT,eAgDI,QAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAKhC,QAA/B;AAAA,gBAEIG,SAAS,CAACE,WAAD,CAAT,CAAuBS,QAAvB,CAAgCC,GAAhC,CAAqCY,OAAO,IAAI;AAC5C,eAAOxB,SAAS,CAACE,WAAD,CAAT,CAAuBe,QAAvB,gBACD,QAAC,kBAAD;AAAoB,UAAA,OAAO,EAAKO,OAAhC;AAA0C,UAAA,kBAAkB,EAAKnB;AAAjE;AAAA;AAAA;AAAA;AAAA,gBADC,gBAED,QAAC,UAAD;AAAY,UAAA,OAAO,EAAKmB,OAAxB;AAAkC,UAAA,kBAAkB,EAAKnB;AAAzD;AAAA;AAAA;AAAA;AAAA,gBAFN;AAGH,OAJD;AAFJ;AAAA;AAAA;AAAA;AAAA,YAhDJ,eA0DI,QAAC,YAAD;AACI,MAAA,eAAe,EAAKgB,eADxB;AAEI,MAAA,UAAU,EAAKrB,SAAS,CAACE,WAAD,CAAT,CAAuBe,QAF1C;AAGI,MAAA,OAAO,EAAKI,eAAe,GAAGL,aAAH,GAAmB,MAAM,CAAE,CAH1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1DJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqEH,CA7GD;;GAAMrB,U;;KAAAA,U;AA+GN,eAAeA,UAAf;AAEA,MAAMmC,gBAAgB,GAAG9C,MAAM,CAAC+C,GAA2B;AAC3D,wBAAyBnC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,SAAjB,GAA6B,SAAU;AACzE;AACA;AACA;AACA,yBAA0BD,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,SAAjB,GAA6B,SAAU;AAC1E,CANA;MAAMiC,gB;AAQN,MAAME,UAAU,GAAGhD,MAAM,CAACiD,MAA+C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAyBrC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,0BAAjB,GAA8C,SAAW;AAC3F,eAAgBD,KAAK,IAAIA,KAAK,CAACsC,MAAN,GAAe,CAAf,GAAmB,GAAK;AACjD,aAActC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,OAAjB,GAA2B,OAAS;AAC3D,CAVA;MAAMmC,U;AAYN,MAAMG,YAAY,GAAInD,MAAM,CAACiD,MAA8B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAyBrC,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,0BAAjB,GAA8C,SAAW;AAC3F,aAAcD,KAAK,IAAIA,KAAK,CAACC,QAAN,GAAiB,OAAjB,GAA2B,OAAS;AAC3D,CAVA;MAAMsC,Y;AAYN,MAAMC,YAAY,GAAIpD,MAAM,CAACiD,MAA0D;AACvF;AACA;AACA;AACA;AACA;AACA,wBAAyBrC,KAAK,IAAIA,KAAK,CAACyB,eAAN,GAAwB,SAAxB,GAAoC,MAAQ;AAC9E,eAAgBzB,KAAK,IAAIA,KAAK,CAACyC,UAAN,GAAmB,MAAnB,GAA4B,cAAgB;AACrE,CARA;MAAMD,Y","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport MetaContext from \"../../MetaContext\";\nimport { Panel } from \"../General/Panel\";\nimport { Subtitle } from \"../General/Subtitle\";\nimport { Title } from \"../General/Title\";\nimport ECGAnsweredOptions from \"./ECGAnsweredOptions\";\nimport ECGOptions from \"./ECGOptions\";\nimport ECGQuestionProgress from \"./ECGQuestionProgress\";\nimport { generateECG } from \"./Generator/ECGGenerator\";\nimport ECGSketch from \"./Generator/ECGSketch\";\nimport { themes } from \"./Generator/ECGSketchThemes\";\nimport { EcgQuestion, EcgQuestionSections, EcgTopic } from \"./Generator/ECGTypes\";\n\n\n// lets say last question in list is **always** unaanswered\nconst ECGSession = (props: { topics: EcgTopic[], finishEcgSession: () => void}) => {\n    const { darkMode } = useContext(MetaContext);\n    const [darkTheme, updateDarkTheme] = useState(darkMode);\n    const [questions, updateQuestions] = useState([] as EcgQuestion[]);\n    const [questionIdx, updateQuestionIdx] = useState(0);\n\n    useEffect( () => {\n        updateDarkTheme(darkMode);\n    }, [darkMode])\n\n    useEffect( () => {\n        updateQuestions([generateECG(props.topics)]);\n    }, []);\n\n\n    const handleOptionChange = (label: string, selected: string) => {\n        const currentWorkingQuestion = questions[questions.length - 1];\n        const modifiedQuestion: EcgQuestion = {\n            ...currentWorkingQuestion,\n            sections: currentWorkingQuestion.sections.map(s => s.label === label ? { ...s, selected } : s) as EcgQuestionSections\n        }\n        updateQuestions(questions.map((q, i) => i === questions.length - 1 ? modifiedQuestion : q))\n    }\n\n    const submitAnswers = () => {\n        updateQuestions(questions.map((q, i) => i === questions.length - 1 ? {...q, answered: true} : q).concat([generateECG(props.topics)]))\n    }\n\n    const refreshQuestion = () => {\n        const newQuestion = generateECG(props.topics);\n        updateQuestions(questions.map((q, i) => i === questions.length - 1 ? newQuestion : q))\n    }\n\n    if (questions.length === 0) return <></>\n\n    // can only submit if last question and all fields answered\n    const submitPermitted = \n        questionIdx === questions.length - 1 &&\n        questions[questions.length - 1].sections.reduce((flag, section) => flag && section.selected !== \"\", true);\n\n    return (\n        <div style = {{ textAlign: \"center\" }}>\n            \n            <Title darkMode = { darkMode }><span style = {{ color: (darkMode ? \"#FAD000\" : \"#7babff\") }}> ECG </span> Trainer</Title>\n\n            <Subtitle darkMode = { darkMode }>{questions[questionIdx].answered ? \"Review Mode\" : \"Interpret it!\"}</Subtitle>\n\n            <Panel id = \"ecgsketch\" darkMode = { darkMode }>\n\n                <br></br>\n\n                <ECGSketch  theme = { themes[darkTheme ? 0 : 1] } question = { questions[questionIdx] } reviewMode = { questions[questionIdx].answered } />\n            \n                <div className = \"row\" style = {{ maxWidth: \"1000px\", margin: \"auto\"}}>\n                    \n                    <div className=\"col-md-4\">\n                        <ECGQuestionProgress \n                            questionIdx = { questionIdx } \n                            updateQuestionIdx = { updateQuestionIdx } \n                            questions = { questions }\n                        />\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <BakeButton darkMode = { darkMode } onClick = { questionIdx === questions.length - 1 ? refreshQuestion : () => {} } active = { questionIdx === questions.length - 1 }>\n                            Bake new ECG\n                        </BakeButton>\n                    </div>\n\n                    <div className=\"col-md-4\">\n\n                        <ReveiwButton darkMode = { darkMode } onClick = { () => updateDarkTheme(!darkTheme) }>\n                            Toggle Theme\n                        </ReveiwButton>\n                        \n                        <Link to = { questions.length > 1 ? \"/User/ECG\" : \"/User/ECG/Session\" }>\n                            <ReveiwButton darkMode = { darkMode } onClick = { props.finishEcgSession }>\n                                Finish\n                            </ReveiwButton>\n                        </Link>\n                        \n                    </div>\n\n                </div>\n\n            </Panel>\n\n            <br/><br/>\n\n            <SectionContainer darkMode = { darkMode } >\n            { \n                questions[questionIdx].sections.map( section => {\n                    return questions[questionIdx].answered \n                        ? <ECGAnsweredOptions section = { section } handleOptionChange = { handleOptionChange } />\n                        : <ECGOptions section = { section } handleOptionChange = { handleOptionChange } />\n                })\n            }\n            </SectionContainer>\n\n            <SubmitButton \n                submitPermitted = { submitPermitted } \n                reviewMode = { questions[questionIdx].answered }\n                onClick = { submitPermitted ? submitAnswers : () => {} }\n            >\n                Submit\n            </SubmitButton>\n\n        </div>\n    );\n}\n\nexport default ECGSession;\n\nconst SectionContainer = styled.div<{ darkMode: boolean }>`\n    background-color: ${ props => props.darkMode ? \"#191964\" : \"#FBE9EE\"};\n    overflow: scroll;\n    white-space: nowrap;\n    border-radius: 5px;\n    border: 10px solid ${ props => props.darkMode ? \"#191964\" : \"#FBE9EE\"};\n`\n\nconst BakeButton = styled.button<{ darkMode: boolean, active: boolean }>`\n    display: inline-block;\n    border-style: none;\n    border-radius: 10px;\n    margin: 0 10px 10px 10px;\n    width: 200px;\n    height: 38px;\n    background-color: ${ props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\" };\n    opacity: ${ props => props.active ? 1 : 0.3 };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n`\n\nconst ReveiwButton  = styled.button<{ darkMode: boolean }>`\n    display: block;\n    border-radius: 10px;\n    border: none;\n    font-size: 10px;\n    margin: 0px auto 2px auto;\n    width: 100px;\n    padding: 2px 10px;\n    background-color: ${ props => props.darkMode ? \"rgba(64, 75, 224, 0.459)\" : \"#FFC9C9\" };\n    color: ${ props => props.darkMode ? \"white\" : \"black\" };\n`\n\nconst SubmitButton  = styled.button<{ submitPermitted: boolean, reviewMode: boolean }>`\n    width: 200px;\n    margin: 40px auto 0 auto;\n    font: bold 20px sans-serif;\n    border-radius: 20px;\n    border-style: none;\n    background-color: ${ props => props.submitPermitted ? \"#FAD000\" : \"grey\" };\n    display: ${ props => props.reviewMode ? \"none\" : \"inline-block\" };\n`"]},"metadata":{},"sourceType":"module"}