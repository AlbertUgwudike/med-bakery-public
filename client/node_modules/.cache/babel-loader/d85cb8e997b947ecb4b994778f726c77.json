{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.multiBufferDataView = {}, global._slicedToArray, global._classCallCheck, global._createClass));\n})(this, function (exports, _slicedToArray, _classCallCheck, _createClass) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\n\n  var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\n\n  var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n\n        var F = function F() {};\n\n        return {\n          s: F,\n          n: function n() {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function e(_e) {\n            throw _e;\n          },\n          f: F\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var normalCompletion = true,\n        didErr = false,\n        err;\n    return {\n      s: function s() {\n        it = it.call(o);\n      },\n      n: function n() {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function e(_e2) {\n        didErr = true;\n        err = _e2;\n      },\n      f: function f() {\n        try {\n          if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  var MultiBufferDataView = /*#__PURE__*/function () {\n    function MultiBufferDataView(buffers) {\n      var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var byteLength = arguments.length > 2 ? arguments[2] : undefined;\n\n      _classCallCheck__default[\"default\"](this, MultiBufferDataView);\n\n      if (byteOffset < 0 || byteLength !== undefined && byteLength < 0) {\n        throw new RangeError();\n      }\n\n      var availableBytes = buffers.reduce(function (length, buffer) {\n        return length + buffer.byteLength;\n      }, 0);\n\n      if (byteOffset > availableBytes || byteLength !== undefined && byteOffset + byteLength > availableBytes) {\n        throw new RangeError();\n      }\n\n      var dataViews = [];\n      var effectiveByteLength = byteLength === undefined ? availableBytes - byteOffset : byteLength;\n      var truncatedBuffers = [];\n      var consumedByteLength = 0;\n      var truncatedByteOffset = byteOffset;\n\n      var _iterator = _createForOfIteratorHelper(buffers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n\n          if (truncatedBuffers.length === 0) {\n            if (buffer.byteLength > truncatedByteOffset) {\n              consumedByteLength = buffer.byteLength - truncatedByteOffset;\n              var byteLengthOfDataView = consumedByteLength > effectiveByteLength ? effectiveByteLength : consumedByteLength;\n              dataViews.push(new DataView(buffer, truncatedByteOffset, byteLengthOfDataView));\n              truncatedBuffers.push(buffer);\n            } else {\n              truncatedByteOffset -= buffer.byteLength;\n            }\n          } else if (consumedByteLength < effectiveByteLength) {\n            consumedByteLength += buffer.byteLength;\n\n            var _byteLengthOfDataView = consumedByteLength > effectiveByteLength ? buffer.byteLength - consumedByteLength + effectiveByteLength : buffer.byteLength;\n\n            dataViews.push(new DataView(buffer, 0, _byteLengthOfDataView));\n            truncatedBuffers.push(buffer);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._buffers = truncatedBuffers;\n      this._byteLength = effectiveByteLength;\n      this._byteOffset = truncatedByteOffset;\n      this._dataViews = dataViews;\n      this._internalBuffer = new DataView(new ArrayBuffer(8));\n    }\n\n    _createClass__default[\"default\"](MultiBufferDataView, [{\n      key: \"buffers\",\n      get: function get() {\n        return this._buffers;\n      }\n    }, {\n      key: \"byteLength\",\n      get: function get() {\n        return this._byteLength;\n      }\n    }, {\n      key: \"byteOffset\",\n      get: function get() {\n        return this._byteOffset;\n      }\n    }, {\n      key: \"getFloat32\",\n      value: function getFloat32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n\n        return this._internalBuffer.getFloat32(0, littleEndian);\n      }\n    }, {\n      key: \"getFloat64\",\n      value: function getFloat64(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n\n        this._internalBuffer.setUint8(4, this.getUint8(byteOffset + 4));\n\n        this._internalBuffer.setUint8(5, this.getUint8(byteOffset + 5));\n\n        this._internalBuffer.setUint8(6, this.getUint8(byteOffset + 6));\n\n        this._internalBuffer.setUint8(7, this.getUint8(byteOffset + 7));\n\n        return this._internalBuffer.getFloat64(0, littleEndian);\n      }\n    }, {\n      key: \"getInt16\",\n      value: function getInt16(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        return this._internalBuffer.getInt16(0, littleEndian);\n      }\n    }, {\n      key: \"getInt32\",\n      value: function getInt32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n\n        return this._internalBuffer.getInt32(0, littleEndian);\n      }\n    }, {\n      key: \"getInt8\",\n      value: function getInt8(byteOffset) {\n        var _this$_findDataViewWi = this._findDataViewWithOffset(byteOffset),\n            _this$_findDataViewWi2 = _slicedToArray__default[\"default\"](_this$_findDataViewWi, 2),\n            dataView = _this$_findDataViewWi2[0],\n            byteOffsetOfDataView = _this$_findDataViewWi2[1];\n\n        return dataView.getInt8(byteOffset - byteOffsetOfDataView);\n      }\n    }, {\n      key: \"getUint16\",\n      value: function getUint16(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        return this._internalBuffer.getUint16(0, littleEndian);\n      }\n    }, {\n      key: \"getUint32\",\n      value: function getUint32(byteOffset, littleEndian) {\n        this._internalBuffer.setUint8(0, this.getUint8(byteOffset + 0));\n\n        this._internalBuffer.setUint8(1, this.getUint8(byteOffset + 1));\n\n        this._internalBuffer.setUint8(2, this.getUint8(byteOffset + 2));\n\n        this._internalBuffer.setUint8(3, this.getUint8(byteOffset + 3));\n\n        return this._internalBuffer.getUint32(0, littleEndian);\n      }\n    }, {\n      key: \"getUint8\",\n      value: function getUint8(byteOffset) {\n        var _this$_findDataViewWi3 = this._findDataViewWithOffset(byteOffset),\n            _this$_findDataViewWi4 = _slicedToArray__default[\"default\"](_this$_findDataViewWi3, 2),\n            dataView = _this$_findDataViewWi4[0],\n            byteOffsetOfDataView = _this$_findDataViewWi4[1];\n\n        return dataView.getUint8(byteOffset - byteOffsetOfDataView);\n      }\n    }, {\n      key: \"setFloat32\",\n      value: function setFloat32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setFloat32(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n      }\n    }, {\n      key: \"setFloat64\",\n      value: function setFloat64(byteOffset, value, littleEndian) {\n        this._internalBuffer.setFloat64(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n        this.setUint8(byteOffset + 4, this._internalBuffer.getUint8(4));\n        this.setUint8(byteOffset + 5, this._internalBuffer.getUint8(5));\n        this.setUint8(byteOffset + 6, this._internalBuffer.getUint8(6));\n        this.setUint8(byteOffset + 7, this._internalBuffer.getUint8(7));\n      }\n    }, {\n      key: \"setInt16\",\n      value: function setInt16(byteOffset, value, littleEndian) {\n        this._internalBuffer.setInt16(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n      }\n    }, {\n      key: \"setInt32\",\n      value: function setInt32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setInt32(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n      }\n    }, {\n      key: \"setInt8\",\n      value: function setInt8(byteOffset, value) {\n        var _this$_findDataViewWi5 = this._findDataViewWithOffset(byteOffset),\n            _this$_findDataViewWi6 = _slicedToArray__default[\"default\"](_this$_findDataViewWi5, 2),\n            dataView = _this$_findDataViewWi6[0],\n            byteOffsetOfDataView = _this$_findDataViewWi6[1];\n\n        dataView.setInt8(byteOffset - byteOffsetOfDataView, value);\n      }\n    }, {\n      key: \"setUint16\",\n      value: function setUint16(byteOffset, value, littleEndian) {\n        this._internalBuffer.setUint16(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n      }\n    }, {\n      key: \"setUint32\",\n      value: function setUint32(byteOffset, value, littleEndian) {\n        this._internalBuffer.setUint32(0, value, littleEndian);\n\n        this.setUint8(byteOffset, this._internalBuffer.getUint8(0));\n        this.setUint8(byteOffset + 1, this._internalBuffer.getUint8(1));\n        this.setUint8(byteOffset + 2, this._internalBuffer.getUint8(2));\n        this.setUint8(byteOffset + 3, this._internalBuffer.getUint8(3));\n      }\n    }, {\n      key: \"setUint8\",\n      value: function setUint8(byteOffset, value) {\n        var _this$_findDataViewWi7 = this._findDataViewWithOffset(byteOffset),\n            _this$_findDataViewWi8 = _slicedToArray__default[\"default\"](_this$_findDataViewWi7, 2),\n            dataView = _this$_findDataViewWi8[0],\n            byteOffsetOfDataView = _this$_findDataViewWi8[1];\n\n        dataView.setUint8(byteOffset - byteOffsetOfDataView, value);\n      }\n    }, {\n      key: \"_findDataViewWithOffset\",\n      value: function _findDataViewWithOffset(byteOffset) {\n        var byteOffsetOfDataView = 0;\n\n        var _iterator2 = _createForOfIteratorHelper(this._dataViews),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var dataView = _step2.value;\n            var byteOffsetOfNextDataView = byteOffsetOfDataView + dataView.byteLength;\n\n            if (byteOffset >= byteOffsetOfDataView && byteOffset < byteOffsetOfNextDataView) {\n              return [dataView, byteOffsetOfDataView];\n            }\n\n            byteOffsetOfDataView = byteOffsetOfNextDataView;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        throw new RangeError();\n      }\n    }]);\n\n    return MultiBufferDataView;\n  }();\n\n  exports.MultiBufferDataView = MultiBufferDataView;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}