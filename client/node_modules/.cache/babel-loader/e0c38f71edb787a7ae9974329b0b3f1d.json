{"ast":null,"code":"import _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Container } from \"../Common\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar QuestionPage = function QuestionPage(props) {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderRef = _useState2[0],\n      setSliderRef = _useState2[1];\n\n  var questionCount = props.station.questions.length;\n  var history = useHistory();\n  var idx = props.questionIdx;\n\n  var nextFunc = function nextFunc() {\n    idx === questionCount - 1 ? history.push(\"/OSCE/Station/Summary\") : props.updateQuestionIdx(idx + 1);\n    sliderRef === null || sliderRef === void 0 ? void 0 : sliderRef.slickNext();\n  };\n\n  var prevFunc = function prevFunc() {\n    if (idx > 0) props.updateQuestionIdx(idx - 1);\n    sliderRef === null || sliderRef === void 0 ? void 0 : sliderRef.slickPrev();\n  };\n\n  var settings = {\n    arrows: false,\n    infinite: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    vertical: true,\n    initialSlide: props.questionIdx\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      updateStation: props.updateStation,\n      station: props.station,\n      handleExit: props.handleExit,\n      title: \"Station\",\n      percentage: 10 + 100 * idx / questionCount,\n      timer: true,\n      nextFunc: nextFunc,\n      prevFunc: prevFunc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Slider, _objectSpread(_objectSpread({\n      ref: setSliderRef\n    }, settings), {}, {\n      children: props.station.questions.map(function (question, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(QuestionContent, {\n          question: question,\n          questionIdx: questionIdx,\n          updateStation: props.updateStation,\n          active: props.questionIdx === questionIdx,\n          updateQuestionIdx: props.updateQuestionIdx,\n          nextFunc: nextFunc\n        }, questionIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(QuestionPage, \"rgBDNffjDSYqdVrDDNOBqam0wio=\", false, function () {\n  return [useHistory];\n});\n\n_c = QuestionPage;\nexport default QuestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx"],"names":["useState","Container","QuestionContent","Header","useHistory","Slider","QuestionPage","props","sliderRef","setSliderRef","questionCount","station","questions","length","history","idx","questionIdx","nextFunc","push","updateQuestionIdx","slickNext","prevFunc","slickPrev","settings","arrows","infinite","slidesToShow","slidesToScroll","vertical","initialSlide","updateStation","handleExit","map","question"],"mappings":";;;;;;;AAAA,SAAmCA,QAAnC,QAAmD,OAAnD;AACA,SAASC,SAAT,QAA0B,WAA1B;AAGA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,gCAAP;AACA,OAAO,sCAAP;;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAA0B;AAAA;;AAC3C,kBAAkCP,QAAQ,CAAgB,IAAhB,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,aAAa,GAAGH,KAAK,CAACI,OAAN,CAAcC,SAAd,CAAwBC,MAA9C;AACA,MAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,MAAMW,GAAG,GAAGR,KAAK,CAACS,WAAlB;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnBF,IAAAA,GAAG,KAAKL,aAAa,GAAG,CAAxB,GACMI,OAAO,CAACI,IAAR,CAAa,uBAAb,CADN,GAEMX,KAAK,CAACY,iBAAN,CAAwBJ,GAAG,GAAG,CAA9B,CAFN;AAGAP,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEY,SAAX;AACH,GALD;;AAOA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIN,GAAG,GAAG,CAAV,EAAaR,KAAK,CAACY,iBAAN,CAAwBJ,GAAG,GAAG,CAA9B;AACbP,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEc,SAAX;AACH,GAHD;;AAKA,MAAMC,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,QAAQ,EAAE,KAFG;AAGbC,IAAAA,YAAY,EAAE,CAHD;AAIbC,IAAAA,cAAc,EAAE,CAJH;AAKbC,IAAAA,QAAQ,EAAE,IALG;AAMbC,IAAAA,YAAY,EAAEtB,KAAK,CAACS;AANP,GAAjB;AASA,sBACI,QAAC,SAAD;AAAA,4BACI,QAAC,MAAD;AACI,MAAA,aAAa,EAAET,KAAK,CAACuB,aADzB;AAEI,MAAA,OAAO,EAAEvB,KAAK,CAACI,OAFnB;AAGI,MAAA,UAAU,EAAEJ,KAAK,CAACwB,UAHtB;AAII,MAAA,KAAK,EAAE,SAJX;AAKI,MAAA,UAAU,EAAE,KAAM,MAAMhB,GAAP,GAAcL,aALnC;AAMI,MAAA,KAAK,EAAE,IANX;AAOI,MAAA,QAAQ,EAAEO,QAPd;AAQI,MAAA,QAAQ,EAAEI;AARd;AAAA;AAAA;AAAA;AAAA,aADJ,eAYI,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAEZ;AAAb,OAA+Bc,QAA/B;AAAA,gBACKhB,KAAK,CAACI,OAAN,CAAcC,SAAd,CAAwBoB,GAAxB,CAA4B,UAACC,QAAD,EAAWjB,WAAX;AAAA,4BACzB,QAAC,eAAD;AACI,UAAA,QAAQ,EAAEiB,QADd;AAEI,UAAA,WAAW,EAAEjB,WAFjB;AAGI,UAAA,aAAa,EAAET,KAAK,CAACuB,aAHzB;AAII,UAAA,MAAM,EAAEvB,KAAK,CAACS,WAAN,KAAsBA,WAJlC;AAKI,UAAA,iBAAiB,EAAET,KAAK,CAACY,iBAL7B;AAMI,UAAA,QAAQ,EAAEF;AANd,WAOSD,WAPT;AAAA;AAAA;AAAA;AAAA,iBADyB;AAAA,OAA5B;AADL;AAAA;AAAA;AAAA;AAAA,aAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AA4BH,CAvDD;;GAAMV,Y;UAGcF,U;;;KAHdE,Y;AAyDN,eAAeA,YAAf","sourcesContent":["import { Dispatch, SetStateAction, useState } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, startAudioRecordingId, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<number>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const questionCount = props.station.questions.length;\n    const history = useHistory();\n    const idx = props.questionIdx;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/Summary\")\n            : props.updateQuestionIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateQuestionIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container>\n            <Header\n                updateStation={props.updateStation}\n                station={props.station}\n                handleExit={props.handleExit}\n                title={\"Station\"}\n                percentage={10 + (100 * idx) / questionCount}\n                timer={true}\n                nextFunc={nextFunc}\n                prevFunc={prevFunc}\n            />\n\n            <Slider ref={setSliderRef} {...settings}>\n                {props.station.questions.map((question, questionIdx) => (\n                    <QuestionContent\n                        question={question}\n                        questionIdx={questionIdx}\n                        updateStation={props.updateStation}\n                        active={props.questionIdx === questionIdx}\n                        updateQuestionIdx={props.updateQuestionIdx}\n                        nextFunc={nextFunc}\n                        key={questionIdx}\n                    />\n                ))}\n            </Slider>\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}