{"ast":null,"code":"import axios from\"axios\";// Add a response interceptor\naxios.interceptors.response.use(function(res){if(res.data.error===\"-- email extraction failed --\"){window.location.href=\"/ExpiryLogin\";throw\"token expired, redirect to signout page\";}return res;},function(error){// Do something with response error\nreturn Promise.reject(error);});var myaxios={post:function post(url,data){return axios({method:\"POST\",url:url,data:data,maxBodyLength:Infinity,maxContentLength:Infinity});},get:function get(url){return axios({method:\"GET\",url:url,maxBodyLength:Infinity,maxContentLength:Infinity});}};export default myaxios;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/myaxios.ts"],"names":["axios","interceptors","response","use","res","data","error","window","location","href","Promise","reject","myaxios","post","url","method","maxBodyLength","Infinity","maxContentLength","get"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACI,SAAAC,GAAG,CAAI,CACH,GAAIA,GAAG,CAACC,IAAJ,CAASC,KAAT,GAAmB,+BAAvB,CAAwD,CACpDC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuB,cAAvB,CACA,KAAM,yCAAN,CACH,CACD,MAAOL,CAAAA,GAAP,CACH,CAPL,CAQI,SAAAE,KAAK,CAAI,CACL;AACA,MAAOI,CAAAA,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP,CACH,CAXL,EAcA,GAAMM,CAAAA,OAAO,CAAG,CACZC,IAAI,CAAE,cAACC,GAAD,CAAcT,IAAd,CAA4B,CAC9B,MAAOL,CAAAA,KAAK,CAAC,CACTe,MAAM,CAAE,MADC,CAETD,GAAG,CAAHA,GAFS,CAGTT,IAAI,CAAJA,IAHS,CAITW,aAAa,CAAEC,QAJN,CAKTC,gBAAgB,CAAED,QALT,CAAD,CAAZ,CAOH,CATW,CAUZE,GAAG,CAAE,aAACL,GAAD,CAAiB,CAClB,MAAOd,CAAAA,KAAK,CAAC,CAAEe,MAAM,CAAE,KAAV,CAAiBD,GAAG,CAAHA,GAAjB,CAAsBE,aAAa,CAAEC,QAArC,CAA+CC,gBAAgB,CAAED,QAAjE,CAAD,CAAZ,CACH,CAZW,CAAhB,CAeA,cAAeL,CAAAA,OAAf","sourcesContent":["import axios from \"axios\";\n\n// Add a response interceptor\naxios.interceptors.response.use(\n    res => {\n        if (res.data.error === \"-- email extraction failed --\") {\n            window.location.href = \"/ExpiryLogin\";\n            throw \"token expired, redirect to signout page\";\n        }\n        return res;\n    },\n    error => {\n        // Do something with response error\n        return Promise.reject(error);\n    }\n);\n\nconst myaxios = {\n    post: (url: string, data: any) => {\n        return axios({\n            method: \"POST\",\n            url,\n            data,\n            maxBodyLength: Infinity,\n            maxContentLength: Infinity,\n        });\n    },\n    get: (url: string) => {\n        return axios({ method: \"GET\", url, maxBodyLength: Infinity, maxContentLength: Infinity });\n    },\n};\n\nexport default myaxios;\n"]},"metadata":{},"sourceType":"module"}