{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/ProgressPie.tsx\",\n    _s = $RefreshSig$();\n\nimport 'react-circular-progressbar/dist/styles.css';\nimport Sketch from 'react-p5';\nimport { useContext } from 'react';\nimport MetaContext from '../../MetaContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProgressPie = props => {\n  _s();\n\n  const {\n    darkMode\n  } = useContext(MetaContext);\n  const piePad = 20;\n  const letterRadius = 13;\n  const canvasRadius = props.pieRadius + piePad;\n  const backgroundColor = darkMode ? [31, 31, 31] : [246, 245, 240];\n  const wedgeColor = darkMode ? [59, 32, 114] : [0, 0, 0];\n  const textColor = darkMode ? [255, 255, 255] : [5, 9, 24];\n\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(2 * canvasRadius, 2 * canvasRadius).parent(canvasParentRef);\n  };\n\n  const draw = p5 => {\n    // clear the display\n    p5.background(backgroundColor);\n    p5.stroke(backgroundColor); // draw the progress pie segments\n\n    p5.strokeWeight(10);\n\n    for (let segmentIdx = 0; segmentIdx < props.sectionCount; segmentIdx++) {\n      const angle = 2 * p5.PI / props.sectionCount; // section letter\n\n      if (props.sectionIdx === segmentIdx) {\n        const textPos = p5.createVector(0, props.pieRadius + letterRadius).rotate(angle * segmentIdx - p5.PI + angle / 2).add(canvasRadius, canvasRadius);\n        p5.fill(textColor);\n        p5.textSize(15);\n        p5.text(String.fromCharCode(props.sectionIdx + 97), textPos.x, textPos.y);\n      }\n\n      p5.fill(props.sectionIdx === segmentIdx ? [250, 208, 0] : wedgeColor);\n      p5.arc(canvasRadius, canvasRadius, 2 * props.pieRadius, 2 * props.pieRadius, angle * segmentIdx - p5.PI / 2, angle * (1 + segmentIdx) - p5.PI / 2, p5.PIE);\n    } // draw the central panel\n\n\n    p5.strokeWeight(0);\n    p5.fill(backgroundColor);\n    p5.ellipse(canvasRadius, canvasRadius, 1.64 * props.pieRadius, 1.64 * props.pieRadius); // draw the question number\n\n    p5.textAlign(p5.CENTER, p5.CENTER);\n    p5.fill(textColor);\n    p5.textSize(50);\n    p5.text(\"\" + (props.questionIdx + 1), canvasRadius, canvasRadius);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProgressPie, \"PnQ/ys69gTWC7ND+ZGDKVPZ9Xno=\");\n\n_c = ProgressPie;\nexport default ProgressPie;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressPie\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/QuestionPage/ProgressPie.tsx"],"names":["Sketch","useContext","MetaContext","ProgressPie","props","darkMode","piePad","letterRadius","canvasRadius","pieRadius","backgroundColor","wedgeColor","textColor","setup","p5","canvasParentRef","createCanvas","parent","draw","background","stroke","strokeWeight","segmentIdx","sectionCount","angle","PI","sectionIdx","textPos","createVector","rotate","add","fill","textSize","text","String","fromCharCode","x","y","arc","PIE","ellipse","textAlign","CENTER","questionIdx"],"mappings":"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","sourcesContent":["import 'react-circular-progressbar/dist/styles.css';\nimport Sketch from 'react-p5';\nimport p5Types from \"p5\";\nimport { useContext } from 'react';\nimport MetaContext from '../../MetaContext';\n\ntype ProgressPieProps = {\n    sectionCount: number;\n    sectionIdx: number;\n    pieRadius: number;\n    darkMode: boolean;\n    questionIdx: number;\n}\n\nconst ProgressPie = (props: ProgressPieProps) => {\n\n    const { darkMode } = useContext(MetaContext);\n\n    const piePad = 20;\n    const letterRadius = 13;\n    const canvasRadius = props.pieRadius + piePad;\n    const backgroundColor = darkMode ? [31,31,31] : [246, 245, 240];\n    const wedgeColor = darkMode ? [59, 32, 114] : [0, 0, 0];\n    const textColor = darkMode ? [255, 255, 255] : [5, 9, 24];\n\n    const setup = (p5: p5Types, canvasParentRef: Element) => {\n\t\tp5.createCanvas(2 * canvasRadius, 2 * canvasRadius).parent(canvasParentRef); \n\t}\n\n    const draw = (p5: p5Types) => {\n        // clear the display\n        p5.background(backgroundColor);\n        p5.stroke(backgroundColor)\n\n        // draw the progress pie segments\n        p5.strokeWeight(10);\n        for (let segmentIdx = 0; segmentIdx < props.sectionCount; segmentIdx++) {\n            const angle = 2 * p5.PI / props.sectionCount;\n\n            // section letter\n            if (props.sectionIdx === segmentIdx) {\n                const textPos = p5.createVector(0, props.pieRadius + letterRadius)\n                                  .rotate(angle * segmentIdx - p5.PI + angle / 2)\n                                  .add(canvasRadius, canvasRadius);\n\n                p5.fill(textColor); p5.textSize(15);\n                p5.text(String.fromCharCode(props.sectionIdx + 97), textPos.x, textPos.y);\n            }\n            \n            p5.fill(props.sectionIdx === segmentIdx ? [250, 208, 0] : wedgeColor)\n            p5.arc(\n                canvasRadius, \n                canvasRadius, \n                2 * props.pieRadius, \n                2 * props.pieRadius, \n                angle * segmentIdx - p5.PI / 2, \n                angle * (1 + segmentIdx) - p5.PI / 2, \n                p5.PIE\n            );\n        }\n\n        // draw the central panel\n        p5.strokeWeight(0); p5.fill(backgroundColor);\n        p5.ellipse(canvasRadius, canvasRadius, 1.64 * props.pieRadius, 1.64 * props.pieRadius);\n\n        // draw the question number\n        p5.textAlign(p5.CENTER, p5.CENTER); p5.fill(textColor); p5.textSize(50);\n        p5.text(\"\" + (props.questionIdx + 1), canvasRadius , canvasRadius);\n    }\n\n    return <Sketch setup = { setup } draw = { draw }/>\n}\n\nexport default ProgressPie;"]},"metadata":{},"sourceType":"module"}