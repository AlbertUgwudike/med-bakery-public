{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { generateUniqueNumber } from 'fast-unique-numbers';\nimport { renderUnknownPortIdError } from './error-renderers';\nimport { isSupportingTransferables } from './is-supporting-transferables';\nvar DESTROY_WORKER_FUNCTIONS = new Map();\nexport var extendWorkerImplementation = function extendWorkerImplementation(createWorker, partialWorkerImplementation, isSupportedFunction) {\n  return _objectSpread(_objectSpread({}, partialWorkerImplementation), {}, {\n    connect: function connect(_ref) {\n      var port = _ref.port;\n      port.start();\n      var destroyWorker = createWorker(port, partialWorkerImplementation);\n      var portId = generateUniqueNumber(DESTROY_WORKER_FUNCTIONS);\n      DESTROY_WORKER_FUNCTIONS.set(portId, function () {\n        destroyWorker();\n        port.close();\n        DESTROY_WORKER_FUNCTIONS.delete(portId);\n      });\n      return {\n        result: portId\n      };\n    },\n    disconnect: function disconnect(_ref2) {\n      var portId = _ref2.portId;\n      var destroyWorker = DESTROY_WORKER_FUNCTIONS.get(portId);\n\n      if (destroyWorker === undefined) {\n        throw renderUnknownPortIdError({\n          portId: portId.toString()\n        });\n      }\n\n      destroyWorker();\n      return {\n        result: null\n      };\n    },\n    isSupported: function () {\n      var _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var isSelfSupported, result, synchronousResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return isSupportingTransferables();\n\n              case 2:\n                isSelfSupported = _context.sent;\n\n                if (!isSelfSupported) {\n                  _context.next = 14;\n                  break;\n                }\n\n                result = isSupportedFunction();\n\n                if (!(result instanceof Promise)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 8;\n                return result;\n\n              case 8:\n                _context.t0 = _context.sent;\n                _context.next = 12;\n                break;\n\n              case 11:\n                _context.t0 = result;\n\n              case 12:\n                synchronousResult = _context.t0;\n                return _context.abrupt(\"return\", {\n                  result: synchronousResult\n                });\n\n              case 14:\n                return _context.abrupt(\"return\", {\n                  result: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function isSupported() {\n        return _isSupported.apply(this, arguments);\n      }\n\n      return isSupported;\n    }()\n  });\n};","map":{"version":3,"sources":["../../../src/helpers/extend-worker-implementation.ts"],"names":[],"mappings":";;;AAAA,SAAS,oBAAT,QAAqC,qBAArC;AAGA,SAAS,wBAAT,QAAyC,mBAAzC;AACA,SAAS,yBAAT,QAA0C,+BAA1C;AAEA,IAAM,wBAAwB,GAAwC,IAAI,GAAJ,EAAtE;AAEA,OAAO,IAAM,0BAA0B,GAAG,SAA7B,0BAA6B,CACtC,YADsC,EAEtC,2BAFsC,EAGtC,mBAHsC;AAAA,yCAKnC,2BALmC;AAMtC,IAAA,OAAO,EAAE,uBAAa;AAAA,UAAV,IAAU,QAAV,IAAU;AAClB,MAAA,IAAI,CAAC,KAAL;AAEA,UAAM,aAAa,GAAG,YAAY,CAAC,IAAD,EAAO,2BAAP,CAAlC;AACA,UAAM,MAAM,GAAG,oBAAoB,CAAC,wBAAD,CAAnC;AAEA,MAAA,wBAAwB,CAAC,GAAzB,CAA6B,MAA7B,EAAqC,YAAK;AACtC,QAAA,aAAa;AACb,QAAA,IAAI,CAAC,KAAL;AACA,QAAA,wBAAwB,CAAC,MAAzB,CAAgC,MAAhC;AACH,OAJD;AAMA,aAAO;AAAE,QAAA,MAAM,EAAE;AAAV,OAAP;AACH,KAnBqC;AAoBtC,IAAA,UAAU,EAAE,2BAAe;AAAA,UAAZ,MAAY,SAAZ,MAAY;AACvB,UAAM,aAAa,GAAG,wBAAwB,CAAC,GAAzB,CAA6B,MAA7B,CAAtB;;AAEA,UAAI,aAAa,KAAK,SAAtB,EAAiC;AAC7B,cAAM,wBAAwB,CAAC;AAAE,UAAA,MAAM,EAAE,MAAM,CAAC,QAAP;AAAV,SAAD,CAA9B;AACH;;AAED,MAAA,aAAa;AAEb,aAAO;AAAE,QAAA,MAAM,EAAE;AAAV,OAAP;AACH,KA9BqC;AA+BtC,IAAA,WAAW;AAAA,kFAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACqB,yBAAyB,EAD9C;;AAAA;AACH,gBAAA,eADG;;AAAA,qBAGL,eAHK;AAAA;AAAA;AAAA;;AAIC,gBAAA,MAJD,GAIU,mBAAmB,EAJ7B;;AAAA,sBAKqB,MAAM,YAAY,OALvC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKuD,MALvD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,8BAKgE,MALhE;;AAAA;AAKC,gBAAA,iBALD;AAAA,iDAOE;AAAE,kBAAA,MAAM,EAAE;AAAV,iBAPF;;AAAA;AAAA,iDAUF;AAAE,kBAAA,MAAM,EAAE;AAAV,iBAVE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA/B2B;AAAA,CAAnC","sourceRoot":"","sourcesContent":["import { generateUniqueNumber } from 'fast-unique-numbers';\nimport { renderUnknownPortIdError } from './error-renderers';\nimport { isSupportingTransferables } from './is-supporting-transferables';\nconst DESTROY_WORKER_FUNCTIONS = new Map();\nexport const extendWorkerImplementation = (createWorker, partialWorkerImplementation, isSupportedFunction) => ({\n    ...partialWorkerImplementation,\n    connect: ({ port }) => {\n        port.start();\n        const destroyWorker = createWorker(port, partialWorkerImplementation);\n        const portId = generateUniqueNumber(DESTROY_WORKER_FUNCTIONS);\n        DESTROY_WORKER_FUNCTIONS.set(portId, () => {\n            destroyWorker();\n            port.close();\n            DESTROY_WORKER_FUNCTIONS.delete(portId);\n        });\n        return { result: portId };\n    },\n    disconnect: ({ portId }) => {\n        const destroyWorker = DESTROY_WORKER_FUNCTIONS.get(portId);\n        if (destroyWorker === undefined) {\n            throw renderUnknownPortIdError({ portId: portId.toString() });\n        }\n        destroyWorker();\n        return { result: null };\n    },\n    isSupported: async () => {\n        const isSelfSupported = await isSupportingTransferables();\n        if (isSelfSupported) {\n            const result = isSupportedFunction();\n            const synchronousResult = result instanceof Promise ? await result : result;\n            return { result: synchronousResult };\n        }\n        return { result: false };\n    }\n});\n//# sourceMappingURL=extend-worker-implementation.js.map"]},"metadata":{},"sourceType":"module"}