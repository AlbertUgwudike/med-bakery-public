{"ast":null,"code":"import _objectSpread from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import{Container}from\"../Common\";import QuestionContent from\"./QuestionContent\";import Header from\"../Header\";import{useHistory}from\"react-router-dom\";import Slider from\"react-slick\";import\"slick-carousel/slick/slick.css\";import\"slick-carousel/slick/slick-theme.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var QuestionPage=function QuestionPage(props){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),sliderRef=_useState2[0],setSliderRef=_useState2[1];var questionCount=props.station.questions.length;var history=useHistory();var idx=props.questionIdx;var nextFunc=function nextFunc(){idx===questionCount-1?history.push(\"/OSCE/Station/Summary\"):props.updateQuestionIdx(idx+1);sliderRef===null||sliderRef===void 0?void 0:sliderRef.slickNext();};var prevFunc=function prevFunc(){if(idx>0)props.updateQuestionIdx(idx-1);sliderRef===null||sliderRef===void 0?void 0:sliderRef.slickPrev();};var settings={arrows:false,infinite:false,slidesToShow:1,slidesToScroll:1,vertical:true,initialSlide:props.questionIdx};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Header,{updateStation:props.updateStation,station:props.station,handleExit:props.handleExit,title:\"Station\",percentage:10+100*idx/questionCount,timer:true,nextFunc:nextFunc,prevFunc:prevFunc}),/*#__PURE__*/_jsx(Slider,_objectSpread(_objectSpread({ref:setSliderRef},settings),{},{children:props.station.questions.map(function(question,questionIdx){return/*#__PURE__*/_jsx(QuestionContent,{question:question,questionIdx:questionIdx,updateStation:props.updateStation,active:props.questionIdx===questionIdx,nextFunc:nextFunc},questionIdx);})}))]});};export default QuestionPage;","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/Question/QuestionPage.tsx"],"names":["useState","Container","QuestionContent","Header","useHistory","Slider","QuestionPage","props","sliderRef","setSliderRef","questionCount","station","questions","length","history","idx","questionIdx","nextFunc","push","updateQuestionIdx","slickNext","prevFunc","slickPrev","settings","arrows","infinite","slidesToShow","slidesToScroll","vertical","initialSlide","updateStation","handleExit","map","question"],"mappings":"iQAAA,OAAmCA,QAAnC,KAAmD,OAAnD,CACA,OAASC,SAAT,KAA0B,WAA1B,CAGA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,aAAnB,CACA,MAAO,gCAAP,CACA,MAAO,sCAAP,C,wFAUA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA0B,CAC3C,cAAkCP,QAAQ,CAAgB,IAAhB,CAA1C,wCAAOQ,SAAP,eAAkBC,YAAlB,eACA,GAAMC,CAAAA,aAAa,CAAGH,KAAK,CAACI,OAAN,CAAcC,SAAd,CAAwBC,MAA9C,CACA,GAAMC,CAAAA,OAAO,CAAGV,UAAU,EAA1B,CACA,GAAMW,CAAAA,GAAG,CAAGR,KAAK,CAACS,WAAlB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnBF,GAAG,GAAKL,aAAa,CAAG,CAAxB,CACMI,OAAO,CAACI,IAAR,CAAa,uBAAb,CADN,CAEMX,KAAK,CAACY,iBAAN,CAAwBJ,GAAG,CAAG,CAA9B,CAFN,CAGAP,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEY,SAAX,GACH,CALD,CAOA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAIN,GAAG,CAAG,CAAV,CAAaR,KAAK,CAACY,iBAAN,CAAwBJ,GAAG,CAAG,CAA9B,EACbP,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEc,SAAX,GACH,CAHD,CAKA,GAAMC,CAAAA,QAAQ,CAAG,CACbC,MAAM,CAAE,KADK,CAEbC,QAAQ,CAAE,KAFG,CAGbC,YAAY,CAAE,CAHD,CAIbC,cAAc,CAAE,CAJH,CAKbC,QAAQ,CAAE,IALG,CAMbC,YAAY,CAAEtB,KAAK,CAACS,WANP,CAAjB,CASA,mBACI,MAAC,SAAD,yBACI,KAAC,MAAD,EACI,aAAa,CAAET,KAAK,CAACuB,aADzB,CAEI,OAAO,CAAEvB,KAAK,CAACI,OAFnB,CAGI,UAAU,CAAEJ,KAAK,CAACwB,UAHtB,CAII,KAAK,CAAE,SAJX,CAKI,UAAU,CAAE,GAAM,IAAMhB,GAAP,CAAcL,aALnC,CAMI,KAAK,CAAE,IANX,CAOI,QAAQ,CAAEO,QAPd,CAQI,QAAQ,CAAEI,QARd,EADJ,cAYI,KAAC,MAAD,8BAAQ,GAAG,CAAEZ,YAAb,EAA+Bc,QAA/B,eACKhB,KAAK,CAACI,OAAN,CAAcC,SAAd,CAAwBoB,GAAxB,CAA4B,SAACC,QAAD,CAAWjB,WAAX,qBACzB,KAAC,eAAD,EACI,QAAQ,CAAEiB,QADd,CAEI,WAAW,CAAEjB,WAFjB,CAGI,aAAa,CAAET,KAAK,CAACuB,aAHzB,CAII,MAAM,CAAEvB,KAAK,CAACS,WAAN,GAAsBA,WAJlC,CAKI,QAAQ,CAAEC,QALd,EAMSD,WANT,CADyB,EAA5B,CADL,GAZJ,GADJ,CA2BH,CAtDD,CAwDA,cAAeV,CAAAA,YAAf","sourcesContent":["import { Dispatch, SetStateAction, useState } from \"react\";\nimport { Container } from \"../Common\";\nimport { Question, startAudioRecordingId, Station } from \"../types\";\nimport { Transition } from \"react-transition-group\";\nimport QuestionContent from \"./QuestionContent\";\nimport Header from \"../Header\";\nimport { useHistory } from \"react-router-dom\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\ntype QuestionProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    updateQuestionIdx: Dispatch<SetStateAction<number>>;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst QuestionPage = (props: QuestionProps) => {\n    const [sliderRef, setSliderRef] = useState<Slider | null>(null);\n    const questionCount = props.station.questions.length;\n    const history = useHistory();\n    const idx = props.questionIdx;\n\n    const nextFunc = () => {\n        idx === questionCount - 1\n            ? history.push(\"/OSCE/Station/Summary\")\n            : props.updateQuestionIdx(idx + 1);\n        sliderRef?.slickNext();\n    };\n\n    const prevFunc = () => {\n        if (idx > 0) props.updateQuestionIdx(idx - 1);\n        sliderRef?.slickPrev();\n    };\n\n    const settings = {\n        arrows: false,\n        infinite: false,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        vertical: true,\n        initialSlide: props.questionIdx,\n    };\n\n    return (\n        <Container>\n            <Header\n                updateStation={props.updateStation}\n                station={props.station}\n                handleExit={props.handleExit}\n                title={\"Station\"}\n                percentage={10 + (100 * idx) / questionCount}\n                timer={true}\n                nextFunc={nextFunc}\n                prevFunc={prevFunc}\n            />\n\n            <Slider ref={setSliderRef} {...settings}>\n                {props.station.questions.map((question, questionIdx) => (\n                    <QuestionContent\n                        question={question}\n                        questionIdx={questionIdx}\n                        updateStation={props.updateStation}\n                        active={props.questionIdx === questionIdx}\n                        nextFunc={nextFunc}\n                        key={questionIdx}\n                    />\n                ))}\n            </Slider>\n        </Container>\n    );\n};\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}