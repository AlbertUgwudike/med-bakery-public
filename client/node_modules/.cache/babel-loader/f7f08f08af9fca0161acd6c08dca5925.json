{"ast":null,"code":"import _regeneratorRuntime from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nexport var createRecorderAudioWorkletNodeFactory = function createRecorderAudioWorkletNodeFactory(createListener, createPostMessage, on, validateState) {\n  return function (audioWorkletNodeConstructor, context) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var audioWorkletNode = new audioWorkletNodeConstructor(context, 'recorder-audio-worklet-processor', _objectSpread(_objectSpread({}, options), {}, {\n      channelCountMode: 'explicit',\n      numberOfInputs: 1,\n      numberOfOutputs: 0\n    }));\n    var ongoingRequests = new Map();\n    var postMessage = createPostMessage(ongoingRequests, audioWorkletNode.port);\n    var unsubscribe = on(audioWorkletNode.port, 'message')(createListener(ongoingRequests));\n    audioWorkletNode.port.start();\n    var state = 'inactive';\n    Object.defineProperties(audioWorkletNode, {\n      pause: {\n        get: function get() {\n          return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    validateState(['recording'], state);\n                    state = 'paused';\n                    return _context.abrupt(\"return\", postMessage({\n                      method: 'pause'\n                    }));\n\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n        }\n      },\n      port: {\n        get: function get() {\n          throw new Error(\"The port of a RecorderAudioWorkletNode can't be accessed.\");\n        }\n      },\n      record: {\n        get: function get() {\n          return /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(encoderPort) {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      validateState(['inactive'], state);\n                      state = 'recording';\n                      return _context2.abrupt(\"return\", postMessage({\n                        method: 'record',\n                        params: {\n                          encoderPort: encoderPort\n                        }\n                      }, [encoderPort]));\n\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            return function (_x) {\n              return _ref2.apply(this, arguments);\n            };\n          }();\n        }\n      },\n      resume: {\n        get: function get() {\n          return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    validateState(['paused'], state);\n                    state = 'recording';\n                    return _context3.abrupt(\"return\", postMessage({\n                      method: 'resume'\n                    }));\n\n                  case 3:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n        }\n      },\n      stop: {\n        get: function get() {\n          return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    validateState(['paused', 'recording'], state);\n                    state = 'stopped';\n                    _context4.prev = 2;\n                    _context4.next = 5;\n                    return postMessage({\n                      method: 'stop'\n                    });\n\n                  case 5:\n                    _context4.prev = 5;\n                    unsubscribe();\n                    return _context4.finish(5);\n\n                  case 8:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, null, [[2,, 5, 8]]);\n          }));\n        }\n      }\n    });\n    return audioWorkletNode;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/recorder-audio-worklet-node-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export const createRecorderAudioWorkletNodeFactory = (createListener, createPostMessage, on, validateState) => {\n    return (audioWorkletNodeConstructor, context, options = {}) => {\n        const audioWorkletNode = new audioWorkletNodeConstructor(context, 'recorder-audio-worklet-processor', {\n            ...options,\n            channelCountMode: 'explicit',\n            numberOfInputs: 1,\n            numberOfOutputs: 0\n        });\n        const ongoingRequests = new Map();\n        const postMessage = createPostMessage(ongoingRequests, audioWorkletNode.port);\n        const unsubscribe = on(audioWorkletNode.port, 'message')(createListener(ongoingRequests));\n        audioWorkletNode.port.start();\n        let state = 'inactive';\n        Object.defineProperties(audioWorkletNode, {\n            pause: {\n                get() {\n                    return async () => {\n                        validateState(['recording'], state);\n                        state = 'paused';\n                        return postMessage({\n                            method: 'pause'\n                        });\n                    };\n                }\n            },\n            port: {\n                get() {\n                    throw new Error(\"The port of a RecorderAudioWorkletNode can't be accessed.\");\n                }\n            },\n            record: {\n                get() {\n                    return async (encoderPort) => {\n                        validateState(['inactive'], state);\n                        state = 'recording';\n                        return postMessage({\n                            method: 'record',\n                            params: { encoderPort }\n                        }, [encoderPort]);\n                    };\n                }\n            },\n            resume: {\n                get() {\n                    return async () => {\n                        validateState(['paused'], state);\n                        state = 'recording';\n                        return postMessage({\n                            method: 'resume'\n                        });\n                    };\n                }\n            },\n            stop: {\n                get() {\n                    return async () => {\n                        validateState(['paused', 'recording'], state);\n                        state = 'stopped';\n                        try {\n                            await postMessage({ method: 'stop' });\n                        }\n                        finally {\n                            unsubscribe();\n                        }\n                    };\n                }\n            }\n        });\n        return audioWorkletNode;\n    };\n};\n//# sourceMappingURL=recorder-audio-worklet-node-factory.js.map"]},"metadata":{},"sourceType":"module"}