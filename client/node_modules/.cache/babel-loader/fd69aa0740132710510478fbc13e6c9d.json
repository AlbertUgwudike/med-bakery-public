{"ast":null,"code":"import _objectSpread from \"/Users/albert/projects/med-bakery-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Timer } from \"./Common\";\nimport { useLoopTime } from \"./hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar TimerApparatus = function TimerApparatus(props) {\n  _s();\n\n  var pathToNext = props.questionIdx === props.station.questions.length - 1 ? \"/Demo/Summary\" : \"/Demo/\" + (props.questionIdx + 1);\n  var secondTicker = useLoopTime(props.station.timeRemaining - 1);\n\n  var convertToString = function convertToString(time) {\n    var minutes = Math.floor(time / 60);\n    var minuteString = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n    var seconds = time % 60;\n    var secondsString = seconds < 10 ? \"0\" + seconds : \"\" + seconds;\n    return minuteString + \":\" + secondsString;\n  };\n\n  useEffect(function () {\n    return function () {\n      props.updateStation(function (s) {\n        return _objectSpread(_objectSpread({}, s), {}, {\n          timeRemaining: secondTicker\n        });\n      });\n    };\n  }, [secondTicker]);\n  if (secondTicker <= 0) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: pathToNext\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 35\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Timer, {\n      children: [\" \", convertToString(secondTicker)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(TimerApparatus, \"wBXWkymg+BNQRqOUS05bbT4yHLY=\", false, function () {\n  return [useLoopTime];\n});\n\n_c = TimerApparatus;\nexport default TimerApparatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerApparatus\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/AlphaTimer.tsx"],"names":["useEffect","Redirect","Timer","useLoopTime","TimerApparatus","props","pathToNext","questionIdx","station","questions","length","secondTicker","timeRemaining","convertToString","time","minutes","Math","floor","minuteString","seconds","secondsString","updateStation","s","textAlign"],"mappings":";;;;;;AAAA,SAAmCA,SAAnC,QAAoD,OAApD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,WAAT,QAA4B,SAA5B;;;AASA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgC;AAAA;;AACnD,MAAMC,UAAU,GACZD,KAAK,CAACE,WAAN,KAAsBF,KAAK,CAACG,OAAN,CAAcC,SAAd,CAAwBC,MAAxB,GAAiC,CAAvD,GACM,eADN,GAEM,YAAYL,KAAK,CAACE,WAAN,GAAoB,CAAhC,CAHV;AAIA,MAAMI,YAAY,GAAGR,WAAW,CAACE,KAAK,CAACG,OAAN,CAAcI,aAAd,GAA8B,CAA/B,CAAhC;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAkB;AACtC,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMI,YAAY,GAAGH,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+B,KAAKA,OAAzD;AACA,QAAMI,OAAO,GAAGL,IAAI,GAAG,EAAvB;AACA,QAAMM,aAAa,GAAGD,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA+B,KAAKA,OAA1D;AACA,WAAOD,YAAY,GAAG,GAAf,GAAqBE,aAA5B;AACH,GAND;;AAQApB,EAAAA,SAAS,CACL;AAAA,WAAM,YAAM;AACRK,MAAAA,KAAK,CAACgB,aAAN,CAAoB,UAAAC,CAAC,EAAI;AACrB,+CAAYA,CAAZ;AAAeV,UAAAA,aAAa,EAAED;AAA9B;AACH,OAFD;AAGH,KAJD;AAAA,GADK,EAML,CAACA,YAAD,CANK,CAAT;AASA,MAAIA,YAAY,IAAI,CAApB,EAAuB,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEL;AAAd;AAAA;AAAA;AAAA;AAAA,WAAP;AAEvB,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEiB,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA,2BACI,QAAC,KAAD;AAAA,sBAASV,eAAe,CAACF,YAAD,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAKH,CA/BD;;GAAMP,c;UAKmBD,W;;;KALnBC,c;AAiCN,eAAeA,cAAf","sourcesContent":["import { Dispatch, SetStateAction, useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Timer } from \"./Common\";\nimport { useLoopTime } from \"./hooks\";\nimport { Station } from \"./types\";\n\ntype TimerApparatusProps = {\n    station: Station;\n    questionIdx: number;\n    updateStation: Dispatch<SetStateAction<Station>>;\n};\n\nconst TimerApparatus = (props: TimerApparatusProps) => {\n    const pathToNext =\n        props.questionIdx === props.station.questions.length - 1\n            ? \"/Demo/Summary\"\n            : \"/Demo/\" + (props.questionIdx + 1);\n    const secondTicker = useLoopTime(props.station.timeRemaining - 1);\n\n    const convertToString = (time: number) => {\n        const minutes = Math.floor(time / 60);\n        const minuteString = minutes < 10 ? \"0\" + minutes : \"\" + minutes;\n        const seconds = time % 60;\n        const secondsString = seconds < 10 ? \"0\" + seconds : \"\" + seconds;\n        return minuteString + \":\" + secondsString;\n    };\n\n    useEffect(\n        () => () => {\n            props.updateStation(s => {\n                return { ...s, timeRemaining: secondTicker };\n            });\n        },\n        [secondTicker]\n    );\n\n    if (secondTicker <= 0) return <Redirect to={pathToNext} />;\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            <Timer> {convertToString(secondTicker)}</Timer>\n        </div>\n    );\n};\n\nexport default TimerApparatus;\n"]},"metadata":{},"sourceType":"module"}