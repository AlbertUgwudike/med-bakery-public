{"ast":null,"code":"export var createUnhandledRejection = function createUnhandledRejection(emitNotSupportedError, window, wrapSubscribeFunction) {\n  return function (coolingOffPeriod) {\n    return wrapSubscribeFunction(function (observer) {\n      if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n        return emitNotSupportedError(observer);\n      }\n\n      var possiblyUnhandledRejections = new Map();\n      var intervalId = null;\n\n      var deletePossiblyUnhandledRejection = function deletePossiblyUnhandledRejection(_ref) {\n        var promise = _ref.promise;\n        return possiblyUnhandledRejections.delete(promise);\n      };\n\n      var emitUnhandledRejection = function emitUnhandledRejection() {\n        var latestTimestampToEmit = Date.now() - coolingOffPeriod;\n        possiblyUnhandledRejections.forEach(function (_ref2, promise) {\n          var reason = _ref2.reason,\n              timestamp = _ref2.timestamp;\n\n          if (timestamp > latestTimestampToEmit) {\n            return;\n          }\n\n          possiblyUnhandledRejections.delete(promise);\n          observer.next(reason);\n        });\n\n        if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n          window.clearInterval(intervalId);\n          intervalId = null;\n        }\n      };\n\n      var registerPossiblyUnhandledRejection = function registerPossiblyUnhandledRejection(event) {\n        event.preventDefault();\n        possiblyUnhandledRejections.set(event.promise, {\n          reason: event.reason,\n          timestamp: Date.now()\n        });\n\n        if (intervalId === null) {\n          intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n        }\n      };\n\n      window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n      window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      return function () {\n        if (intervalId !== null) {\n          window.clearInterval(intervalId);\n        }\n\n        window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n        window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n      };\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/unhandled-rejection.ts"],"names":[],"mappings":"AAEA,OAAO,IAAM,wBAAwB,GAA+B,SAAvD,wBAAuD,CAAC,qBAAD,EAAwB,MAAxB,EAAgC,qBAAhC,EAAyD;AACzH,SAAO,UAAC,gBAAD;AAAA,WACH,qBAAqB,CAAC,UAAC,QAAD,EAAa;AAC/B,UAAI,MAAM,KAAK,IAAX,IAAmB,MAAM,CAAC,aAAP,KAAyB,SAA5C,IAAyD,MAAM,CAAC,WAAP,KAAuB,SAApF,EAA+F;AAC3F,eAAO,qBAAqB,CAAC,QAAD,CAA5B;AACH;;AAED,UAAM,2BAA2B,GAAG,IAAI,GAAJ,EAApC;AAEA,UAAI,UAAU,GAAkB,IAAhC;;AAEA,UAAM,gCAAgC,GAAG,SAAnC,gCAAmC;AAAA,YAAG,OAAH,QAAG,OAAH;AAAA,eAAwC,2BAA2B,CAAC,MAA5B,CAAmC,OAAnC,CAAxC;AAAA,OAAzC;;AACA,UAAM,sBAAsB,GAAG,SAAzB,sBAAyB,GAAK;AAChC,YAAM,qBAAqB,GAAG,IAAI,CAAC,GAAL,KAAa,gBAA3C;AAEA,QAAA,2BAA2B,CAAC,OAA5B,CAAoC,iBAAwB,OAAxB,EAAmC;AAAA,cAAhC,MAAgC,SAAhC,MAAgC;AAAA,cAAxB,SAAwB,SAAxB,SAAwB;;AACnE,cAAI,SAAS,GAAG,qBAAhB,EAAuC;AACnC;AACH;;AAED,UAAA,2BAA2B,CAAC,MAA5B,CAAmC,OAAnC;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,MAAd;AACH,SAPD;;AASA,YAAI,UAAU,KAAK,IAAf,IAAuB,2BAA2B,CAAC,IAA5B,KAAqC,CAAhE,EAAmE;AAC/D,UAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACA,UAAA,UAAU,GAAG,IAAb;AACH;AACJ,OAhBD;;AAiBA,UAAM,kCAAkC,GAAG,SAArC,kCAAqC,CAAC,KAAD,EAAiC;AACxE,QAAA,KAAK,CAAC,cAAN;AAEA,QAAA,2BAA2B,CAAC,GAA5B,CAAgC,KAAK,CAAC,OAAtC,EAA+C;AAC3C,UAAA,MAAM,EAAE,KAAK,CAAC,MAD6B;AAE3C,UAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AAFgC,SAA/C;;AAKA,YAAI,UAAU,KAAK,IAAnB,EAAyB;AACrB,UAAA,UAAU,GAAG,MAAM,CAAC,WAAP,CAAmB,sBAAnB,EAA2C,gBAAgB,GAAG,CAA9D,CAAb;AACH;AACJ,OAXD;;AAaA,MAAA,MAAM,CAAC,gBAAP,CAAwB,kBAAxB,EAA4C,gCAA5C;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,oBAAxB,EAA8C,kCAA9C;AAEA,aAAO,YAAK;AACR,YAAI,UAAU,KAAK,IAAnB,EAAyB;AACrB,UAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACH;;AAED,QAAA,MAAM,CAAC,mBAAP,CAA2B,kBAA3B,EAA+C,gCAA/C;AACA,QAAA,MAAM,CAAC,mBAAP,CAA2B,oBAA3B,EAAiD,kCAAjD;AACH,OAPD;AAQH,KAnDoB,CADlB;AAAA,GAAP;AAqDH,CAtDM","sourceRoot":"","sourcesContent":["export const createUnhandledRejection = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (coolingOffPeriod) => wrapSubscribeFunction((observer) => {\n        if (window === null || window.clearInterval === undefined || window.setInterval === undefined) {\n            return emitNotSupportedError(observer);\n        }\n        const possiblyUnhandledRejections = new Map();\n        let intervalId = null;\n        const deletePossiblyUnhandledRejection = ({ promise }) => possiblyUnhandledRejections.delete(promise);\n        const emitUnhandledRejection = () => {\n            const latestTimestampToEmit = Date.now() - coolingOffPeriod;\n            possiblyUnhandledRejections.forEach(({ reason, timestamp }, promise) => {\n                if (timestamp > latestTimestampToEmit) {\n                    return;\n                }\n                possiblyUnhandledRejections.delete(promise);\n                observer.next(reason);\n            });\n            if (intervalId !== null && possiblyUnhandledRejections.size === 0) {\n                window.clearInterval(intervalId);\n                intervalId = null;\n            }\n        };\n        const registerPossiblyUnhandledRejection = (event) => {\n            event.preventDefault();\n            possiblyUnhandledRejections.set(event.promise, {\n                reason: event.reason,\n                timestamp: Date.now()\n            });\n            if (intervalId === null) {\n                intervalId = window.setInterval(emitUnhandledRejection, coolingOffPeriod / 2);\n            }\n        };\n        window.addEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n        window.addEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n        return () => {\n            if (intervalId !== null) {\n                window.clearInterval(intervalId);\n            }\n            window.removeEventListener('rejectionhandled', deletePossiblyUnhandledRejection);\n            window.removeEventListener('unhandledrejection', registerPossiblyUnhandledRejection);\n        };\n    });\n};\n//# sourceMappingURL=unhandled-rejection.js.map"]},"metadata":{},"sourceType":"module"}