{"ast":null,"code":"var _jsxFileName = \"/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx\",\n    _this = this;\n\nimport { Redirect, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport AlphaHeader from \"./AlphaHeader\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar StationPage = function StationPage(props) {\n  if (props.station.id === \"NullStation\") return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/OSCE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 52\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AlphaHeader, {\n      station: props.station,\n      updateStation: props.updateStation,\n      timedHeader: true,\n      percentage: 50,\n      briefPrompt: \"\",\n      title: \"station\",\n      handleExit: props.handleExit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/OSCE/Station\",\n        children: /*#__PURE__*/_jsxDEV(Brief, {\n          station: props.station,\n          updateStation: props.updateStation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, _this), props.station.questions.map(function (_, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/OSCE/Station/\" + questionIdx,\n          children: function children(_ref) {\n            var match = _ref.match;\n            return /*#__PURE__*/_jsxDEV(QuestionPage, {\n              station: props.station,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              handleExit: props.handleExit,\n              match: match !== null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, _this);\n          }\n        }, questionIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/OSCE/Station/Summary\",\n        children: /*#__PURE__*/_jsxDEV(Summary, {\n          station: props.station,\n          updateStation: props.updateStation,\n          handleExit: props.handleExit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, _this), props.station.questions.map(function (_, questionIdx) {\n        return /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/OSCE/Station/Review\" + questionIdx,\n          children: function children(_ref2) {\n            var match = _ref2.match;\n            return /*#__PURE__*/_jsxDEV(QuestionReviewPage, {\n              station: props.station,\n              updateStation: props.updateStation,\n              questionIdx: questionIdx,\n              handleExit: props.handleExit,\n              match: match !== null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, _this);\n          }\n        }, props.station.questions[questionIdx].question, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, _this);\n      }), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/OSCE/Station/MarkReview\",\n        children: /*#__PURE__*/_jsxDEV(MarkReviewPage, {\n          station: props.station,\n          updateStation: props.updateStation,\n          reviewMode: props.reviewMode,\n          handleExit: props.handleExit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = StationPage;\nexport default StationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"StationPage\");","map":{"version":3,"sources":["/Users/albert/projects/med-bakery-react/client/src/components/OSCEPage/StationPage.tsx"],"names":["Redirect","Route","BrowserRouter","Router","AlphaHeader","Brief","MarkReviewPage","QuestionPage","QuestionReviewPage","Summary","StationPage","props","station","id","updateStation","handleExit","questions","map","_","questionIdx","match","question","reviewMode"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,aAAa,IAAIC,MAA3C,QAAyD,kBAAzD;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAWA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA6B;AAC7C,MAAIA,KAAK,CAACC,OAAN,CAAcC,EAAd,KAAqB,aAAzB,EAAwC,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,WAAP;AAExC,sBACI;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,OAAO,EAAEF,KAAK,CAACC,OADnB;AAEI,MAAA,aAAa,EAAED,KAAK,CAACG,aAFzB;AAGI,MAAA,WAAW,EAAE,IAHjB;AAII,MAAA,UAAU,EAAE,EAJhB;AAKI,MAAA,WAAW,EAAE,EALjB;AAMI,MAAA,KAAK,EAAC,SANV;AAOI,MAAA,UAAU,EAAEH,KAAK,CAACI;AAPtB;AAAA;AAAA;AAAA;AAAA,aADJ,eAWI,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,eAAlB;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEJ,KAAK,CAACC,OAAtB;AAA+B,UAAA,aAAa,EAAED,KAAK,CAACG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eADJ,EAKKH,KAAK,CAACC,OAAN,CAAcI,SAAd,CAAwBC,GAAxB,CAA4B,UAACC,CAAD,EAAIC,WAAJ;AAAA,4BACzB,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAa,UAAA,IAAI,EAAE,mBAAmBA,WAAtC;AAAA,oBACK;AAAA,gBAAGC,KAAH,QAAGA,KAAH;AAAA,gCACG,QAAC,YAAD;AACI,cAAA,OAAO,EAAET,KAAK,CAACC,OADnB;AAEI,cAAA,aAAa,EAAED,KAAK,CAACG,aAFzB;AAGI,cAAA,WAAW,EAAEK,WAHjB;AAII,cAAA,UAAU,EAAER,KAAK,CAACI,UAJtB;AAKI,cAAA,KAAK,EAAEK,KAAK,KAAK;AALrB;AAAA;AAAA;AAAA;AAAA,qBADH;AAAA;AADL,WAAwDD,WAAxD;AAAA;AAAA;AAAA;AAAA,iBADyB;AAAA,OAA5B,CALL,eAmBI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,uBAAZ;AAAA,+BACI,QAAC,OAAD;AACI,UAAA,OAAO,EAAER,KAAK,CAACC,OADnB;AAEI,UAAA,aAAa,EAAED,KAAK,CAACG,aAFzB;AAGI,UAAA,UAAU,EAAEH,KAAK,CAACI;AAHtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eAnBJ,EA2BKJ,KAAK,CAACC,OAAN,CAAcI,SAAd,CAAwBC,GAAxB,CAA4B,UAACC,CAAD,EAAIC,WAAJ;AAAA,4BACzB,QAAC,KAAD;AACI,UAAA,IAAI,EAAE,yBAAyBA,WADnC;AAAA,oBAIK;AAAA,gBAAGC,KAAH,SAAGA,KAAH;AAAA,gCACG,QAAC,kBAAD;AACI,cAAA,OAAO,EAAET,KAAK,CAACC,OADnB;AAEI,cAAA,aAAa,EAAED,KAAK,CAACG,aAFzB;AAGI,cAAA,WAAW,EAAEK,WAHjB;AAII,cAAA,UAAU,EAAER,KAAK,CAACI,UAJtB;AAKI,cAAA,KAAK,EAAEK,KAAK,KAAK;AALrB;AAAA;AAAA;AAAA;AAAA,qBADH;AAAA;AAJL,WAEST,KAAK,CAACC,OAAN,CAAcI,SAAd,CAAwBG,WAAxB,EAAqCE,QAF9C;AAAA;AAAA;AAAA;AAAA,iBADyB;AAAA,OAA5B,CA3BL,eA4CI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,0BAAZ;AAAA,+BACI,QAAC,cAAD;AACI,UAAA,OAAO,EAAEV,KAAK,CAACC,OADnB;AAEI,UAAA,aAAa,EAAED,KAAK,CAACG,aAFzB;AAGI,UAAA,UAAU,EAAEH,KAAK,CAACW,UAHtB;AAII,UAAA,UAAU,EAAEX,KAAK,CAACI;AAJtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA,aAXJ;AAAA,kBADJ;AAmEH,CAtED;;KAAML,W;AAwEN,eAAeA,WAAf","sourcesContent":["import { Dispatch, SetStateAction } from \"react\";\nimport { Redirect, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport AlphaHeader from \"./AlphaHeader\";\nimport Brief from \"./Brief\";\nimport MarkReviewPage from \"./MarkReviewPage\";\nimport QuestionPage from \"./QuestionPage\";\nimport QuestionReviewPage from \"./QuestionReviewPage\";\nimport Summary from \"./Summary\";\nimport { AnsweredStationDetails, Question, Station } from \"./types\";\n\ntype StationPageProps = {\n    station: Station;\n    updateStation: Dispatch<SetStateAction<Station>>;\n    answeredStations: AnsweredStationDetails[];\n    reviewMode: boolean;\n    handleExit: (questions: Question[], tok: string) => void;\n};\n\nconst StationPage = (props: StationPageProps) => {\n    if (props.station.id === \"NullStation\") return <Redirect to=\"/OSCE\" />;\n\n    return (\n        <>\n            <AlphaHeader\n                station={props.station}\n                updateStation={props.updateStation}\n                timedHeader={true}\n                percentage={50}\n                briefPrompt={\"\"}\n                title=\"station\"\n                handleExit={props.handleExit}\n            />\n\n            <Router>\n                <Route exact path=\"/OSCE/Station\">\n                    <Brief station={props.station} updateStation={props.updateStation} />\n                </Route>\n\n                {props.station.questions.map((_, questionIdx) => (\n                    <Route exact path={\"/OSCE/Station/\" + questionIdx} key={questionIdx}>\n                        {({ match }) => (\n                            <QuestionPage\n                                station={props.station}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                handleExit={props.handleExit}\n                                match={match !== null}\n                            />\n                        )}\n                    </Route>\n                ))}\n\n                <Route path=\"/OSCE/Station/Summary\">\n                    <Summary\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n\n                {props.station.questions.map((_, questionIdx) => (\n                    <Route\n                        path={\"/OSCE/Station/Review\" + questionIdx}\n                        key={props.station.questions[questionIdx].question}\n                    >\n                        {({ match }) => (\n                            <QuestionReviewPage\n                                station={props.station}\n                                updateStation={props.updateStation}\n                                questionIdx={questionIdx}\n                                handleExit={props.handleExit}\n                                match={match !== null}\n                            />\n                        )}\n                    </Route>\n                ))}\n\n                <Route path=\"/OSCE/Station/MarkReview\">\n                    <MarkReviewPage\n                        station={props.station}\n                        updateStation={props.updateStation}\n                        reviewMode={props.reviewMode}\n                        handleExit={props.handleExit}\n                    />\n                </Route>\n            </Router>\n        </>\n    );\n};\n\nexport default StationPage;\n"]},"metadata":{},"sourceType":"module"}